[
    {
        "question_id": 0,
        "prev_question_id": 8194,
        "db_id": "sales_in_weather",
        "question": "Among the stations with 3 stores, how many stations have a station pressure of no more than 30 on February 18, 2014?",
        "evidence": "station with 3 stores refers to station_nbr where Count(store_nbr) = 3; station pressure of no more than 30 refers to stnpressure < 30; On February 18, 2014 refers to date = '2014-02-18'",
        "SQL": "SELECT COUNT(station_nbr) FROM weather WHERE `date` = '2014-02-18' AND stnpressure < 30 AND station_nbr IN ( SELECT station_nbr FROM relation GROUP BY station_nbr HAVING COUNT(store_nbr) = 3 )",
        "difficulty": "moderate"
    },
    {
        "question_id": 1,
        "prev_question_id": 8202,
        "db_id": "sales_in_weather",
        "question": "How many stations were able to sell item 5 on January 2014?",
        "evidence": "item 5 refers to item_nbr = 5; on January 2014 refers to Substring (date, 1, 7) = '2014-01'",
        "SQL": "SELECT COUNT(DISTINCT T2.station_nbr) AS number FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr WHERE SUBSTR(`date`, 1, 7) = '2014-01' AND item_nbr = 5",
        "difficulty": "moderate"
    },
    {
        "question_id": 2,
        "prev_question_id": 8208,
        "db_id": "sales_in_weather",
        "question": "What is the sea level and average speed for store number 3 and store number 4?",
        "evidence": "store number 3 refers to store_nbr = 3; average speed refers to avgspeed; store number 4 refers to store_nbr = 4",
        "SQL": "SELECT T1.sealevel, T1.avgspeed FROM weather AS T1 INNER JOIN relation AS T2 ON T1.station_nbr = T2.station_nbr WHERE T2.store_nbr = 3 OR T2.store_nbr = 4",
        "difficulty": "simple"
    },
    {
        "question_id": 3,
        "prev_question_id": 8252,
        "db_id": "mondial_geo",
        "question": "The lake with the highest altitude is located in which city?",
        "evidence": "",
        "SQL": "SELECT T2.City FROM lake AS T1 LEFT JOIN located AS T2 ON T2.Lake = T1.Name ORDER BY T1.Altitude DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 4,
        "prev_question_id": 61,
        "db_id": "movie_platform",
        "question": "How many movie lists with over 100 movies had user 85981819 created when he or she was a paying subscriber?",
        "evidence": "the user was a paying subscriber when he created the list refers to user_has_payment_method = 1;\u00a0 movie lists with over 100 refers to list_movie_number >100;\u00a0 user 85981819 refers to user_id = 85981819;",
        "SQL": "SELECT COUNT(*) FROM lists AS T1 INNER JOIN lists_users AS T2 ON T1.list_id = T2.list_id AND T1.user_id = T2.user_id WHERE T1.user_id = 85981819 AND T1.list_movie_number > 100 AND T2.user_has_payment_method = 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 5,
        "prev_question_id": 74,
        "db_id": "movie_platform",
        "question": "Please list all the links to the ratings on the movie \"A Way of Life\" with a critic.",
        "evidence": "A Way of Life' refers to movie_title; with a critic refers to critic is not null, links to the ratings refers to rating_url;",
        "SQL": "SELECT T1.rating_url FROM ratings AS T1 INNER JOIN movies AS T2 ON T1.movie_id = T2.movie_id WHERE T2.movie_title = 'A Way of Life' AND T1.critic IS NOT NULL",
        "difficulty": "simple"
    },
    {
        "question_id": 6,
        "prev_question_id": 75,
        "db_id": "movie_platform",
        "question": "How many users have rated the most popular movie?",
        "evidence": "most popular refers to Max(movie_popularity);",
        "SQL": "SELECT COUNT(rating_id) FROM ratings WHERE movie_id = ( SELECT movie_id FROM movies ORDER BY movie_popularity DESC LIMIT 1 )",
        "difficulty": "moderate"
    },
    {
        "question_id": 7,
        "prev_question_id": 90,
        "db_id": "movie_platform",
        "question": "Please list the id of the director of the movie \"It's Winter\".",
        "evidence": "It's Winter' is movie_title;",
        "SQL": "SELECT director_id FROM movies WHERE movie_title = 'It''s Winter'",
        "difficulty": "simple"
    },
    {
        "question_id": 8,
        "prev_question_id": 104,
        "db_id": "movie_platform",
        "question": "What was the title of the first list created by a user 85981819? And please provide the user_avatar_image_url.",
        "evidence": "user 85981819 refers to user_id = 85981819;\u00a0 first list created refers to Min (list_creation_date_utc);",
        "SQL": "SELECT T2.list_title, T1.user_avatar_image_url FROM lists_users AS T1 INNER JOIN lists AS T2 ON T1.list_id = T2.list_id WHERE T1.user_id = 85981819 ORDER BY T2.list_creation_timestamp_utc LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 9,
        "prev_question_id": 8302,
        "db_id": "mondial_geo",
        "question": "Please list the deserts in the countries whose population is over 100000 and covers an area of under 500000.",
        "evidence": "",
        "SQL": "SELECT T2.Desert FROM country AS T1 INNER JOIN geo_desert AS T2 ON T1.Code = T2.Country WHERE T1.Area > 100000 AND T1.Population < 500000",
        "difficulty": "simple"
    },
    {
        "question_id": 10,
        "prev_question_id": 113,
        "db_id": "movie_platform",
        "question": "Who is the director that made the most movies? Give the director's id.",
        "evidence": "director that made the most movies refers to MAX(COUNT(movie_id))",
        "SQL": "SELECT director_id FROM movies GROUP BY director_id ORDER BY COUNT(movie_id) DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 11,
        "prev_question_id": 114,
        "db_id": "movie_platform",
        "question": "How many movies did the director of the highest movie popularity make?",
        "evidence": "highest movie popularity refers to MAX(movie_popularity)",
        "SQL": "SELECT COUNT(movie_id) FROM movies WHERE director_id = ( SELECT director_id FROM movies ORDER BY movie_popularity DESC LIMIT 1 )",
        "difficulty": "moderate"
    },
    {
        "question_id": 12,
        "prev_question_id": 118,
        "db_id": "movie_platform",
        "question": "How many followers did the user who posted the list \"Non-American Films about World War II\" have?",
        "evidence": "the list \"Non-American Films about World War II\" refers to list_title = 'Non-American Films about World War II'",
        "SQL": "SELECT SUM(T2.list_followers) FROM lists_users AS T1 INNER JOIN lists AS T2 ON T1.list_id = T2.list_id WHERE T2.list_title LIKE 'Non-American Films about World War II'",
        "difficulty": "simple"
    },
    {
        "question_id": 13,
        "prev_question_id": 8325,
        "db_id": "mondial_geo",
        "question": "List the all the cities and its city population for provinces with population more than 1000000.",
        "evidence": "",
        "SQL": "SELECT T1.Name, T1.Population FROM city AS T1 INNER JOIN province AS T2 ON T2.Name = T1.Province WHERE T2.Population > 1000000",
        "difficulty": "simple"
    },
    {
        "question_id": 14,
        "prev_question_id": 168,
        "db_id": "book_publishing_company",
        "question": "What is the title with the most ordered quantity in year 1992?",
        "evidence": "total quantity refers to qty; most ordered quantity refers to order with the highest quantity where MAX(count(qty)); date refers to ord_date; year 1992 refers to YEAR(ord_date) = 1992",
        "SQL": "SELECT T2.title FROM sales AS T1 INNER JOIN titles AS T2 ON T1.title_id = T2.title_id WHERE STRFTIME('%Y', T1.ord_date) = '1992' ORDER BY T1.qty DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 15,
        "prev_question_id": 175,
        "db_id": "book_publishing_company",
        "question": "List all titles published in year 1991. Also provide notes details of the title and the publisher's name.",
        "evidence": "publisher name refers to pub_name; publication date refers to pubdate; published in year 1991 refers to YEAR(pubdate) = 1991",
        "SQL": "SELECT T1.title, T1.notes, T2.pub_name FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id WHERE STRFTIME('%Y', T1.pubdate) = '1991'",
        "difficulty": "moderate"
    },
    {
        "question_id": 16,
        "prev_question_id": 180,
        "db_id": "book_publishing_company",
        "question": "State the publisher name for publisher ID 877? Calculate its average year to date sales.",
        "evidence": "publisher id refers to pub_id; publisher name refers to pub_name; average year to date sales = AVG(ytd_sales)",
        "SQL": "SELECT T2.pub_name, AVG(T1.ytd_sales) FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id WHERE T1.pub_id = '0877' GROUP BY T2.pub_name",
        "difficulty": "simple"
    },
    {
        "question_id": 17,
        "prev_question_id": 185,
        "db_id": "book_publishing_company",
        "question": "Name the Chief Executive Officer and when he/she was hired.",
        "evidence": "Chief Financial Offer is a job description which refers to job_desc",
        "SQL": "SELECT T1.fname, T1.lname, T1.hire_date FROM employee AS T1 INNER JOIN jobs AS T2 ON T1.job_id = T2.job_id WHERE T2.job_desc = 'Chief Financial Officier'",
        "difficulty": "challenging"
    },
    {
        "question_id": 18,
        "prev_question_id": 8379,
        "db_id": "mondial_geo",
        "question": "Which country was the source of Pjandsh River? Give the full name of the country.",
        "evidence": "",
        "SQL": "SELECT T1.Name FROM country AS T1 INNER JOIN located AS T2 ON T1.Code = T2.Country WHERE T2.River = 'Pjandsh'",
        "difficulty": "simple"
    },
    {
        "question_id": 19,
        "prev_question_id": 220,
        "db_id": "book_publishing_company",
        "question": "What's Pedro S Afonso's job title?",
        "evidence": "job title means job description which refers to job_desc",
        "SQL": "SELECT T2.job_desc FROM employee AS T1 INNER JOIN jobs AS T2 ON T1.job_id = T2.job_id WHERE T1.fname = 'Pedro' AND T1.minit = 'S' AND T1.lname = 'Afonso'",
        "difficulty": "simple"
    },
    {
        "question_id": 20,
        "prev_question_id": 8432,
        "db_id": "mondial_geo",
        "question": "What is the geographic location of Aarhus city? Please provide the answer with the coordinates of the location.",
        "evidence": "Longitude, Latitude = coordinates of the location",
        "SQL": "SELECT Longitude, Latitude FROM city WHERE Name = 'Aarhus'",
        "difficulty": "simple"
    },
    {
        "question_id": 21,
        "prev_question_id": 257,
        "db_id": "retail_complains",
        "question": "What is the percentage of the increase of complaints filed by the clients from New York from the year 2016 to the year 2017?",
        "evidence": "percentage of increase = MULTIPLY(DIVIDE(SUBTRACT(SUM(year(\"Date received\") = 2017), SUM(year(\"Date received\") = 2016)), SUM(year(\"Date received\") = 2016)), 1.0); New York refers to city = 'New York'; year(\"Date received\") BETWEEN 2016 AND 2017;",
        "SQL": "SELECT 100.0 * (SUM(CASE WHEN strftime('%Y', T2.`Date received`) = '2017' THEN 1 ELSE 0 END) - SUM(CASE WHEN strftime('%Y', T2.`Date received`) = '2016' THEN 1 ELSE 0 END)) / SUM(CASE WHEN strftime('%Y', T2.`Date received`) = '2016' THEN 1 ELSE 0 END) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.city = 'New York City'",
        "difficulty": "challenging"
    },
    {
        "question_id": 22,
        "prev_question_id": 263,
        "db_id": "retail_complains",
        "question": "How many days delay for the complaint call from Mr. Brantley Julian Stanley on 2012/5/18?",
        "evidence": "days delay for the complaint = SUBTRACT(\"date sent to company\", \"Date received\"); Mr refers to sex = 'Male'; on 2012/5/18 refers to \"Date received\" = '2012-05-18';",
        "SQL": "SELECT 365 * (strftime('%Y', T2.`Date sent to company`) - strftime('%Y', T2.`Date received`)) + 30 * (strftime('%M', T2.`Date sent to company`) - strftime('%M', T2.`Date received`)) + (strftime('%d', T2.`Date sent to company`) - strftime('%d', T2.`Date received`)) AS days FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.`Date received` = '2012-05-18' AND T1.sex = 'Male' AND T1.first = 'Brantley' AND T1.middle = 'Julian' AND T1.last = 'Stanley'",
        "difficulty": "challenging"
    },
    {
        "question_id": 23,
        "prev_question_id": 277,
        "db_id": "retail_complains",
        "question": "Calculate the average age of clients from the Midwest region.",
        "evidence": "average age = AVG(age);",
        "SQL": "SELECT CAST(SUM(T1.age) AS REAL) / COUNT(T3.Region) AS average FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN state AS T3 ON T2.state_abbrev = T3.StateCode WHERE T3.Region = 'Midwest'",
        "difficulty": "challenging"
    },
    {
        "question_id": 24,
        "prev_question_id": 281,
        "db_id": "retail_complains",
        "question": "What is the number of complaints related to Credit cards came from female clients?",
        "evidence": "Credit cards refers to Product = 'Credit card'; female refers to sex = 'female';",
        "SQL": "SELECT COUNT(T1.sex) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.sex = 'Female' AND T2.Product = 'Credit card'",
        "difficulty": "simple"
    },
    {
        "question_id": 25,
        "prev_question_id": 8494,
        "db_id": "mondial_geo",
        "question": "What river has the 17th-longest length overall? Specify it's length.",
        "evidence": "",
        "SQL": "SELECT Name, Length FROM river ORDER BY Length DESC LIMIT 16, 1",
        "difficulty": "simple"
    },
    {
        "question_id": 26,
        "prev_question_id": 8544,
        "db_id": "software_company",
        "question": "List the marital status of customers within the age of 40 to 60 that has the highest income among the group.",
        "evidence": "age of 40 to 60 refers to age BETWEEN 40 AND 60; the highest income refers to MAX(INCOME_K);",
        "SQL": "SELECT T1.MARITAL_STATUS FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.age >= 40 AND T1.age <= 60 ORDER BY T2.INCOME_K DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 27,
        "prev_question_id": 8568,
        "db_id": "software_company",
        "question": "In male customers ages from 30 to 50, how many of them has an income ranges from 2000 to 2300?",
        "evidence": "male customers ages from 30 to 50 refer to SEX = 'Male' where age BETWEEN 30 AND 50; income ranges from 2000 to 2300 refers to INCOME_K BETWEEN 2000 AND 3000;",
        "SQL": "SELECT COUNT(T1.ID) FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.SEX = 'Male' AND T1.age >= 30 AND T1.age <= 50 AND T2.INCOME_K >= 2000 AND T2.INCOME_K <= 2300",
        "difficulty": "moderate"
    },
    {
        "question_id": 28,
        "prev_question_id": 385,
        "db_id": "retail_complains",
        "question": "Which state has the most cities?",
        "evidence": "state refers to state_abbrev; most cities refers to max(count(city))",
        "SQL": "SELECT state_abbrev FROM district GROUP BY state_abbrev ORDER BY COUNT(city) DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 29,
        "prev_question_id": 406,
        "db_id": "retail_complains",
        "question": "List the product and its issues of the complains of clients with age greater than the 60% of average age of all clients.",
        "evidence": "age greater than the 60% of average age refers to age > multiply(avg(age) , 0.6)",
        "SQL": "SELECT DISTINCT T2.Product, T2.Issue FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T1.age * 100 > ( SELECT AVG(age) * 60 FROM client )",
        "difficulty": "challenging"
    },
    {
        "question_id": 30,
        "prev_question_id": 8609,
        "db_id": "chicago_crime",
        "question": "Give the name of the person who was responsible for case No.JB524952.",
        "evidence": "name of the person refers to commander; case No.JB524952 refers to case_number = 'JB524952'",
        "SQL": "SELECT T1.commander FROM District AS T1 INNER JOIN Crime AS T2 ON T1.district_no = T2.district_no WHERE T2.case_number = 'JB524952'",
        "difficulty": "simple"
    },
    {
        "question_id": 31,
        "prev_question_id": 420,
        "db_id": "movies_4",
        "question": "Among the movie in which Dariusz Wolski works as the director of photography, what is the percentage of those movie whose vote average is over 5.0?",
        "evidence": "director of photography refers to job = 'Director of Photography'; vote average is over 8.0 refers to vote_average > 5; percentage = divide(sum(movie_id) when vote_average > 5, count(movie_id)) as percentage",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T1.vote_average > 5 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.vote_average) FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T3.person_name = 'Dariusz Wolski' AND T2.job = 'Director of Photography'",
        "difficulty": "challenging"
    },
    {
        "question_id": 32,
        "prev_question_id": 421,
        "db_id": "movies_4",
        "question": "What is the average revenue of the movie in which Dariusz Wolski works as the director of photography?",
        "evidence": "director of photography refers to job = 'Director of Photography'; average revenue = divide(sum(revenue), count(movie_id))",
        "SQL": "SELECT CAST(SUM(T1.revenue) AS REAL) / COUNT(T1.movie_id) FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T3.person_name = 'Dariusz Wolski' AND T2.job = 'Director of Photography'",
        "difficulty": "moderate"
    },
    {
        "question_id": 33,
        "prev_question_id": 422,
        "db_id": "movies_4",
        "question": "Give the name of the movie with a revenue of 559852396.",
        "evidence": "name of the movie refers to title; revenue of 559852396 refers to revenue = '559852396'",
        "SQL": "SELECT title FROM movie WHERE revenue = 559852396",
        "difficulty": "simple"
    },
    {
        "question_id": 34,
        "prev_question_id": 8622,
        "db_id": "chicago_crime",
        "question": "What is the name of the community with the highest population?",
        "evidence": "name of the community refers to community_area_name; the highest population refers to max(population)",
        "SQL": "SELECT community_area_name FROM Community_Area ORDER BY population DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 35,
        "prev_question_id": 435,
        "db_id": "movies_4",
        "question": "Calculate the average budget of the movies directed by Jaume Collet-Serra.",
        "evidence": "directed by refers to job = 'Director'; average budget = AVG(budget)",
        "SQL": "SELECT CAST(SUM(T1.budget) AS REAL) / COUNT(T1.movie_id) FROM movie AS T1 INNER JOIN movie_crew AS T2 ON T1.movie_id = T2.movie_id INNER JOIN person AS T3 ON T2.person_id = T3.person_id WHERE T3.person_name = 'Jaume Collet-Serra' AND T2.job = 'Director'",
        "difficulty": "challenging"
    },
    {
        "question_id": 36,
        "prev_question_id": 8632,
        "db_id": "chicago_crime",
        "question": "In the most populated ward, how many incidents of domestic violence were reported in a bar or tavern?",
        "evidence": "the most populated refers to max(population); domestic violence refers to domestic = 'TRUE'; in a bar or tavern refers to location_description = 'BAR OR TAVERN'",
        "SQL": "SELECT COUNT(T2.report_no) FROM Ward AS T1 INNER JOIN Crime AS T2 ON T1.ward_no = T2.ward_no WHERE T2.domestic = 'TRUE' AND T2.location_description = 'BAR OR TAVERN' ORDER BY T1.Population DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 37,
        "prev_question_id": 8645,
        "db_id": "chicago_crime",
        "question": "Describe the specific description and case locations under IUCR 142.",
        "evidence": "specific description refers to secondary_description; location refers to latitude, longitude; IUCR 142 refers to iucr_no = 142",
        "SQL": "SELECT T1.secondary_description, T2.latitude, T2.longitude FROM IUCR AS T1 INNER JOIN Crime AS T2 ON T1.iucr_no = T2.iucr_no WHERE T2.iucr_no = 142",
        "difficulty": "simple"
    },
    {
        "question_id": 38,
        "prev_question_id": 466,
        "db_id": "movies_4",
        "question": "Give the genre and popularity of movies whose revenue is at least 120,000,000 between 2012 and 2015.",
        "evidence": "genre refers to genre_name; revenue is at least 120,000,000 refers to revenue > = 120000000; between 2012 and 2015 refers to release_date BETWEEN '2012-01-01' AND '2015-12-31'",
        "SQL": "SELECT T3.genre_name, T1.popularity FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id INNER JOIN genre AS T3 ON T2.genre_id = T3.genre_id WHERE T1.revenue > 120000000 AND T1.release_date BETWEEN '2012-01-01' AND '2015-12-31'",
        "difficulty": "moderate"
    },
    {
        "question_id": 39,
        "prev_question_id": 8663,
        "db_id": "chicago_crime",
        "question": "Who is the alderman in the ward associated with the crime with report number 23769?",
        "evidence": "alderman refers to alderman_suffix, alderman_first_name, alderman_last_name; report number 23769 refers to report_no = 23769",
        "SQL": "SELECT T2.alderman_first_name, T2.alderman_last_name FROM Crime AS T1 INNER JOIN Ward AS T2 ON T2.ward_no = T1.ward_no WHERE T1.report_no = 23769",
        "difficulty": "moderate"
    },
    {
        "question_id": 40,
        "prev_question_id": 8677,
        "db_id": "chicago_crime",
        "question": "Find the commander's name, email address, and phone number of the Ogden district.",
        "evidence": "commander's name refers to commander; email address refers to email; phone number refers to phone",
        "SQL": "SELECT commander, email, phone FROM District WHERE district_name = 'Ogden'",
        "difficulty": "simple"
    },
    {
        "question_id": 41,
        "prev_question_id": 489,
        "db_id": "movies_4",
        "question": "Which keywords belong to the movie titles with the highest popularity?",
        "evidence": "Which keywords refers to keyword_name; highest popularity refers to max(popularity)",
        "SQL": "SELECT T3.keyword_name FROM movie AS T1 INNER JOIN movie_keywords AS T2 ON T1.movie_id = T2.movie_id INNER JOIN keyword AS T3 ON T2.keyword_id = T3.keyword_id ORDER BY T1.popularity DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 42,
        "prev_question_id": 8693,
        "db_id": "chicago_crime",
        "question": "How many crimes happened in longitude -8772658001?",
        "evidence": "",
        "SQL": "SELECT COUNT(*) FROM Crime WHERE longitude = '-87.72658001'",
        "difficulty": "simple"
    },
    {
        "question_id": 43,
        "prev_question_id": 8694,
        "db_id": "chicago_crime",
        "question": "List all the crimes of the narcotic type that exist.",
        "evidence": "narcotic type refers to primary_description = 'NARCOTICS'; crime refers to secondary_description",
        "SQL": "SELECT secondary_description FROM IUCR WHERE primary_description = 'NARCOTICS' GROUP BY secondary_description",
        "difficulty": "simple"
    },
    {
        "question_id": 44,
        "prev_question_id": 503,
        "db_id": "movies_4",
        "question": "What is the ID of the production company which produced the movie \"Gladiator\"?",
        "evidence": "ID of the production company refers to company_id; movie \"Gladiator\" refers to title = 'Gladiator'",
        "SQL": "SELECT T2.company_id FROM movie AS T1 INNER JOIN movie_company AS T2 ON T1.movie_id = T2.movie_id WHERE T1.title = 'Gladiator'",
        "difficulty": "simple"
    },
    {
        "question_id": 45,
        "prev_question_id": 509,
        "db_id": "movies_4",
        "question": "Find out the language ID of the movie with the highest popularity.",
        "evidence": "highest popularity refers to max(popularity)",
        "SQL": "SELECT T2.language_id FROM movie AS T1 INNER JOIN movie_languages AS T2 ON T1.movie_id = T2.movie_id ORDER BY T1.popularity DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 46,
        "prev_question_id": 520,
        "db_id": "movies_4",
        "question": "What is the longest runtime of all movies?",
        "evidence": "longest runtime refers to max(runtime)",
        "SQL": "SELECT MAX(runtime) FROM movie",
        "difficulty": "simple"
    },
    {
        "question_id": 47,
        "prev_question_id": 533,
        "db_id": "movies_4",
        "question": "What is the title of the movie with the most keywords?",
        "evidence": "most keywords refers to max(count(keyword_id))",
        "SQL": "SELECT T1.title FROM movie AS T1 INNER JOIN movie_keywords AS T2 ON T1.movie_id = T2.movie_id GROUP BY T1.title ORDER BY COUNT(T2.keyword_id) DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 48,
        "prev_question_id": 540,
        "db_id": "movies_4",
        "question": "List the movies in the Somali language.",
        "evidence": "List the movies refers to title; Somali language refers to language_name = 'Somali'",
        "SQL": "SELECT T1.title FROM movie AS T1 INNER JOIN movie_languages AS T2 ON T1.movie_id = T2.movie_id INNER JOIN language AS T3 ON T2.language_id = T3.language_id WHERE T3.language_name = 'Somali'",
        "difficulty": "moderate"
    },
    {
        "question_id": 49,
        "prev_question_id": 8751,
        "db_id": "chicago_crime",
        "question": "Name the neighborhood of the community area in crime with report number 23843?",
        "evidence": "neighborhood refers to neighborhood_name; '23778' is the report_no",
        "SQL": "SELECT T3.neighborhood_name FROM Community_Area AS T1 INNER JOIN Crime AS T2 ON T1.community_area_no = T2.community_area_no INNER JOIN Neighborhood AS T3 ON T2.community_area_no = T3.community_area_no WHERE T2.report_no = 23778",
        "difficulty": "moderate"
    },
    {
        "question_id": 50,
        "prev_question_id": 8752,
        "db_id": "chicago_crime",
        "question": "What is the FBI description of the crime for report number 23778?",
        "evidence": "\"23778\" is the report_no; FBI description refers to description",
        "SQL": "SELECT T1.description FROM FBI_Code AS T1 INNER JOIN Crime AS T2 ON T1.fbi_code_no = T2.fbi_code_no WHERE T2.report_no = 23843",
        "difficulty": "simple"
    },
    {
        "question_id": 51,
        "prev_question_id": 8755,
        "db_id": "chicago_crime",
        "question": "What is the full name of the alderman of ward no.21?",
        "evidence": "full name of alderman refers to alderman_first_name, alderman_last_name, alderman_name_suffix",
        "SQL": "SELECT alderman_first_name, alderman_last_name, alderman_name_suffix FROM Ward WHERE ward_no = 21",
        "difficulty": "simple"
    },
    {
        "question_id": 52,
        "prev_question_id": 584,
        "db_id": "codebase_comments",
        "question": "How much is the processed time of the method whose tokenized name is \"about box1 dispose\"? Indicate the language of the method.",
        "evidence": "language refers to Lang;",
        "SQL": "SELECT DISTINCT T1.ProcessedTime, T2.Lang FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.NameTokenized = 'about box1 dispose'",
        "difficulty": "moderate"
    },
    {
        "question_id": 53,
        "prev_question_id": 8802,
        "db_id": "food_inspection",
        "question": "What is the average score for \"Chairman Bao\" in all its unscheduled routine inspections?",
        "evidence": "DIVIDE(SUM(score where type = 'Routine - Unscheduled' and name = 'Chairman Bao'), COUNT(type = 'Routine - Unscheduled' where name = 'Chairman Bao'));",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.name = 'Chairman Bao' THEN T1.score ELSE 0 END) AS REAL) / COUNT(CASE WHEN T1.type = 'Routine - Unscheduled' THEN T1.score ELSE 0 END) FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id",
        "difficulty": "challenging"
    },
    {
        "question_id": 54,
        "prev_question_id": 616,
        "db_id": "codebase_comments",
        "question": "Among all the solution of the 'zh-cn' methods, which path is most often used?",
        "evidence": "solution refers to SolutionId; zh-cn refers to Lang = 'zh-cn'; path that is most often used refers to MAX(COUNT(Path));",
        "SQL": "SELECT T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Lang = 'zh-cn' GROUP BY T1.Path ORDER BY COUNT(T1.Path) DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 55,
        "prev_question_id": 619,
        "db_id": "codebase_comments",
        "question": "Show the solution path for the method \"Mosa.Platform.x86.Instructions.IMul.EmitLegacy\"?",
        "evidence": "solution path refers to Path; method refers to Name; Name = 'Mosa.Platform.x86.Instructions.IMul.EmitLegacy';",
        "SQL": "SELECT T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Name = 'Mosa.Platform.x86.Instructions.IMul.EmitLegacy'",
        "difficulty": "simple"
    },
    {
        "question_id": 56,
        "prev_question_id": 8811,
        "db_id": "food_inspection",
        "question": "What is the name of the establishment with the lowest inspection score of all time?",
        "evidence": "the lowest inspection score refers to MIN(score);",
        "SQL": "SELECT T2.name FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.score = ( SELECT MIN(score) FROM inspections )",
        "difficulty": "simple"
    },
    {
        "question_id": 57,
        "prev_question_id": 8814,
        "db_id": "food_inspection",
        "question": "In 2013, what are the names of the establishments with contaminated or adulterated food?",
        "evidence": "establishments have the same meaning as businesses; contaminated or adulterated food refers to violations where description = 'Contaminated or adulterated food'; date = '2013';",
        "SQL": "SELECT T2.name FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE STRFTIME('%Y', T1.`date`) = '2013' AND T1.description = 'Contaminated or adulterated food'",
        "difficulty": "moderate"
    },
    {
        "question_id": 58,
        "prev_question_id": 628,
        "db_id": "codebase_comments",
        "question": "List all the methods with a solution with a \"636449700980488000\" processed time.",
        "evidence": "methods refers to Name; solution refers to SolutionId;",
        "SQL": "SELECT DISTINCT T2.Name FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T1.ProcessedTime = 636449700980488000",
        "difficulty": "simple"
    },
    {
        "question_id": 59,
        "prev_question_id": 631,
        "db_id": "codebase_comments",
        "question": "List all the path of solution from all the \"it\" lang code method.",
        "evidence": "path of the solution refers to Path; solution refers to Solution.Id;",
        "SQL": "SELECT DISTINCT T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Lang = 'it'",
        "difficulty": "simple"
    },
    {
        "question_id": 60,
        "prev_question_id": 632,
        "db_id": "codebase_comments",
        "question": "What is the path of solution of \"spinachLexer.mT__55\" method?",
        "evidence": "path of the solution refers to Path; solution refers to Solution.Id; method refers to Name; Name = 'spinachLexer.mT__55';",
        "SQL": "SELECT T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Name = 'spinachLexer.mT__55'",
        "difficulty": "simple"
    },
    {
        "question_id": 61,
        "prev_question_id": 8838,
        "db_id": "food_inspection",
        "question": "How many of the businesses are located at 1825 POST St #223, San Francisco?",
        "evidence": "1825 POST St #223 refers to address = '1825 POST St #223', San Francisco is the name of the city;",
        "SQL": "SELECT COUNT(business_id) FROM businesses WHERE address = '1825 POST St #223' AND city = 'SAN FRANCISCO'",
        "difficulty": "simple"
    },
    {
        "question_id": 62,
        "prev_question_id": 8840,
        "db_id": "food_inspection",
        "question": "What is the total number of businesses with a tax code H25?",
        "evidence": "",
        "SQL": "SELECT COUNT(tax_code) FROM businesses WHERE tax_code = 'H25'",
        "difficulty": "simple"
    },
    {
        "question_id": 63,
        "prev_question_id": 8843,
        "db_id": "food_inspection",
        "question": "List owner's name of businesses with a 100 score.",
        "evidence": "owner's name of businesses refers to owner_name;",
        "SQL": "SELECT DISTINCT T2.owner_name FROM inspections AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.score = 100",
        "difficulty": "challenging"
    },
    {
        "question_id": 64,
        "prev_question_id": 656,
        "db_id": "codebase_comments",
        "question": "Among the english methods,please list the tokenized names of methods whose solutions need to be compiled.",
        "evidence": "english methods refers to lang = 'en'; tokenized name refers to NameTokenized; methods refers to Name; solution needs to be compiled refers to WasCompiled = 0;",
        "SQL": "SELECT NameTokenized FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE Lang = 'en' AND WasCompiled = 0",
        "difficulty": "moderate"
    },
    {
        "question_id": 65,
        "prev_question_id": 658,
        "db_id": "codebase_comments",
        "question": "Please provide the path of solution of method whose full comment is Feeds data into the parser.",
        "evidence": "path of solution refers to Path; method refers to name; full comment = 'Feeds data into the parser';",
        "SQL": "SELECT T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.FullComment = 'Feeds data into the parser'",
        "difficulty": "simple"
    },
    {
        "question_id": 66,
        "prev_question_id": 8855,
        "db_id": "food_inspection",
        "question": "In businesses with a score lower than 95 and located around the postal code of 94110, what is the percentage of businesses with a risk category of low risk?",
        "evidence": "DIVIDE(COUNT(business_id where risk_category = 'Low Risk', score < 95 and postal_code = 94110), COUNT(business_id where score < 95 and postal_code = 94110)) as percentage;",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.risk_category = 'Low Risk' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.risk_category) FROM violations AS T1 INNER JOIN inspections AS T2 ON T1.business_id = T2.business_id INNER JOIN businesses AS T3 ON T2.business_id = T3.business_id WHERE T2.score < 95 AND T3.postal_code = 94110",
        "difficulty": "challenging"
    },
    {
        "question_id": 67,
        "prev_question_id": 667,
        "db_id": "codebase_comments",
        "question": "What is the solution path for method number 3?",
        "evidence": "solution path refers to Path; method number refers to Method_100k.Id; Method_100k.Id = 3;",
        "SQL": "SELECT T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Id = 3",
        "difficulty": "simple"
    },
    {
        "question_id": 68,
        "prev_question_id": 687,
        "db_id": "codebase_comments",
        "question": "How many solution path does the repository with 111 stars, 58 forks, and 111 watchers?",
        "evidence": "solution path refers to Path;",
        "SQL": "SELECT COUNT(T2.Path) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Stars = 111 AND T1.Forks = 58 AND T1.Watchers = 111",
        "difficulty": "simple"
    },
    {
        "question_id": 69,
        "prev_question_id": 691,
        "db_id": "trains",
        "question": "How many cars are there on train no.1?",
        "evidence": "train no.1 refers to train_id = 1",
        "SQL": "SELECT COUNT(id) FROM cars WHERE train_id = 1",
        "difficulty": "simple"
    },
    {
        "question_id": 70,
        "prev_question_id": 695,
        "db_id": "trains",
        "question": "Please list the IDs of all the cars on train no.1 that have 2 wheels.",
        "evidence": "train no.1 refers to train_id = 1; 2 wheels refers to wheels = 2",
        "SQL": "SELECT id FROM cars WHERE train_id = 1 AND wheels = 2",
        "difficulty": "simple"
    },
    {
        "question_id": 71,
        "prev_question_id": 8895,
        "db_id": "cookbook",
        "question": "Which ingredient appeared the least in recipes?",
        "evidence": "ingredient appeared the least in recipes refers to MIN(ingredient_id)",
        "SQL": "SELECT T1.name FROM Ingredient AS T1 INNER JOIN Quantity AS T2 ON T1.ingredient_id = T2.ingredient_id GROUP BY T2.ingredient_id ORDER BY COUNT(T2.ingredient_id) ASC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 72,
        "prev_question_id": 8924,
        "db_id": "cookbook",
        "question": "Which recipe has the highest calories?",
        "evidence": "the highest calories refers to MAX(calories)",
        "SQL": "SELECT T1.title FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id ORDER BY T2.calories DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 73,
        "prev_question_id": 8939,
        "db_id": "human_resources",
        "question": "How many male employees work at the address 450 Peachtree Rd?",
        "evidence": "male employees refers to gender = 'M'",
        "SQL": "SELECT COUNT(*) FROM employee AS T1  INNER JOIN location AS T2  ON T1.locationID = T2.locationID WHERE T2.address = '450 Peachtree Rd' AND T1.gender = 'M'",
        "difficulty": "simple"
    },
    {
        "question_id": 74,
        "prev_question_id": 8958,
        "db_id": "human_resources",
        "question": "What is Kenneth Charles's position title?",
        "evidence": "Kenneth Charles is the full name of an employee; full name = firstname, lastname",
        "SQL": "SELECT T2.positiontitle FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE T1.firstname = 'Kenneth' AND T1.lastname = 'Charles'",
        "difficulty": "simple"
    },
    {
        "question_id": 75,
        "prev_question_id": 8969,
        "db_id": "human_resources",
        "question": "How many male Regional Managers are there?",
        "evidence": "male refers to gender = 'M'; Regional Managers is a position title",
        "SQL": "SELECT COUNT(*) FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE T2.positiontitle = 'Regional Manager' AND T1.gender = 'M'",
        "difficulty": "moderate"
    },
    {
        "question_id": 76,
        "prev_question_id": 782,
        "db_id": "social_media",
        "question": "How many tweets in total were posted by a user in Argentina?",
        "evidence": "\"Argentina\" is the Country",
        "SQL": "SELECT COUNT(T1.TweetID) FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID WHERE T2.Country = 'Argentina' LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 77,
        "prev_question_id": 8976,
        "db_id": "human_resources",
        "question": "List the location cities in the Western states.",
        "evidence": "Western states refers to state = 'CO' OR state = 'UT' OR state = 'CA'; location cities refers to locationcity",
        "SQL": "SELECT locationcity FROM location WHERE state IN ('CO', 'UT', 'CA')",
        "difficulty": "simple"
    },
    {
        "question_id": 78,
        "prev_question_id": 791,
        "db_id": "social_media",
        "question": "What is the gender of the user who has posted the tweet that is seen by the most number of unique users?",
        "evidence": "seen by the most number of unique users refers to Max(Reach)",
        "SQL": "SELECT T2.Gender FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID ORDER BY T1.Reach DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 79,
        "prev_question_id": 809,
        "db_id": "social_media",
        "question": "For the tweet which got the most likes, state the gender of the user who tweeted it.",
        "evidence": "most likes refers to Max(Likes)",
        "SQL": "SELECT T2.Gender FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID ORDER BY T1.Likes DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 80,
        "prev_question_id": 813,
        "db_id": "social_media",
        "question": "What is the percentage of the tweets from California are positive?",
        "evidence": "\"California\" is the State; positive tweet refers to Sentiment > 0; percentage = Divide (Count(TweetID where Sentiment > 0), Count (TweetID)) * 100",
        "SQL": "SELECT SUM(CASE WHEN T1.Sentiment > 0 THEN 1.0 ELSE 0 END) / COUNT(T1.TweetID) AS percentage FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID WHERE State = 'California'",
        "difficulty": "challenging"
    },
    {
        "question_id": 81,
        "prev_question_id": 9006,
        "db_id": "bike_share_1",
        "question": "How long did it take for bike id 426 to reach 2nd at South Park from Market at 4th on 8/29/2013? Indicate the duration in minutes.",
        "evidence": "duration in minutes refers to DIVIDE(duration, 60 seconds); 2nd at South Park refers to end_station_name; Market at 4th refers to start_station_name; start_date = '8/29/2013'; end_date = '8/29/2013';",
        "SQL": "SELECT CAST(duration AS REAL) / 60  FROM trip WHERE bike_id = 426 AND end_station_name = '2nd at South Park' AND start_station_name = 'Market at 4th' AND start_date LIKE '8/29/2013%' AND end_date LIKE '8/29/2013%'",
        "difficulty": "challenging"
    },
    {
        "question_id": 82,
        "prev_question_id": 9027,
        "db_id": "bike_share_1",
        "question": "Among the subscriber, how many of them finished the 2nd at Folsom and Civic Center BART (7th at Market) as their start and end stations respectively for no more than 490 seconds under minimum visibility of 4 miles.",
        "evidence": "subscription_type = 'Subscriber'; no more than 490 seconds refers to duration<490; start_station_name = '2nd at Folsom'; end_station_name = 'Civic Center BART (7th at Market)'; min_visibility_miles = 4;",
        "SQL": "SELECT COUNT(T1.id) FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE T1.subscription_type = 'Subscriber' AND T2.min_visibility_miles = 4 AND T1.duration < 490 AND T1.start_station_name = '2nd at Folsom' AND T1.end_station_name = 'Civic Center BART (7th at Market)'",
        "difficulty": "moderate"
    },
    {
        "question_id": 83,
        "prev_question_id": 845,
        "db_id": "social_media",
        "question": "How many more tweets with a positive sentiment than the tweets with a neutral sentiment were posted by male users?",
        "evidence": "positive sentiment tweet refers to Sentiment > 0; neutral sentiment refers to Sentiment = 0; male user refers to Gender = 'Male'; difference = Subtract (Count (TweetID where Sentiment > 0), Count (TweetID where Sentiment = 0))",
        "SQL": "SELECT SUM(CASE WHEN T1.Sentiment > 0 THEN 1 ELSE 0 END) - SUM(CASE WHEN T1.Sentiment = 0 THEN 1 ELSE 0 END) AS diff FROM twitter AS T1 INNER JOIN user AS T2 ON T1.UserID = T2.UserID WHERE T2.Gender = 'Male'",
        "difficulty": "challenging"
    },
    {
        "question_id": 84,
        "prev_question_id": 9041,
        "db_id": "bike_share_1",
        "question": "In 2006, how many trips ended at stations in Mountain View?",
        "evidence": "in 2006 refers to start_date LIKE'%2006%'; ended at station refers to end_station_name; Mountain View refers to city = 'Mountain View';",
        "SQL": "SELECT COUNT(T2.city) FROM trip AS T1 INNER JOIN station AS T2 ON T2.name = T1.end_station_name WHERE T2.city = 'Mountain View' AND T1.start_date LIKE '%2006%'",
        "difficulty": "moderate"
    },
    {
        "question_id": 85,
        "prev_question_id": 9044,
        "db_id": "bike_share_1",
        "question": "How many trips which subscription types were Subscriber and ended in San Jose city?",
        "evidence": "ended in refers to end_station_name;",
        "SQL": "SELECT COUNT(T1.subscription_type) FROM trip AS T1 INNER JOIN station AS T2 ON T2.name = T1.end_station_name WHERE T1.subscription_type = 'Subscriber' AND T2.city = 'San Jose'",
        "difficulty": "simple"
    },
    {
        "question_id": 86,
        "prev_question_id": 867,
        "db_id": "cs_semester",
        "question": "Among the professors who have more than 3 research assistants, how many of them are male?",
        "evidence": "research assistant refers to the student who serves for research where the abbreviation is RA; more than 3 research assistant refers to COUNT(student_id) > 3;",
        "SQL": "SELECT COUNT(*) FROM ( SELECT T2.prof_id FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id WHERE T2.gender = 'Male' GROUP BY T1.prof_id HAVING COUNT(T1.student_id) > 3 )",
        "difficulty": "moderate"
    },
    {
        "question_id": 87,
        "prev_question_id": 9062,
        "db_id": "bike_share_1",
        "question": "In which city's station is a bike borrowed on trip ID4069?",
        "evidence": "bike is borrowed from refers to start_station_id;",
        "SQL": "SELECT T2.city FROM trip AS T1 INNER JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T1.id = 4069",
        "difficulty": "simple"
    },
    {
        "question_id": 88,
        "prev_question_id": 9065,
        "db_id": "bike_share_1",
        "question": "How many trips made by a subscriber started in August, 2013 from a station that can hold more than 20 bikes?",
        "evidence": "subscriber refers to subscription_type = 'Subscriber'; in August 2013 refers to start_date LIKE'8%' AND start_date LIKE'%2013%'; station that can hold more than 20 bikes refers to dock_count>20;",
        "SQL": "SELECT COUNT(T2.id) FROM station AS T1 INNER JOIN trip AS T2 ON T1.id = T2.start_station_id WHERE T2.subscription_type = 'Subscriber' AND T2.start_date LIKE '8/%/2013%' AND T1.dock_count > 20",
        "difficulty": "simple"
    },
    {
        "question_id": 89,
        "prev_question_id": 9080,
        "db_id": "bike_share_1",
        "question": "Are all stations with zip code 94107 located in San Francisco city?",
        "evidence": "station refers to name;",
        "SQL": "SELECT DISTINCT T2.city FROM trip AS T1 INNER JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T1.zip_code = 94107",
        "difficulty": "simple"
    },
    {
        "question_id": 90,
        "prev_question_id": 9093,
        "db_id": "bike_share_1",
        "question": "What is the percentage ration of customers to subscribers that started their trips within the city of San Francisco?",
        "evidence": "customer refers to subscription_type = 'customer'; subscriber refers to subscription_type = 'subscriber'; started their trips within refers to start_station_id; percentage ratio = DIVIDE(SUM(subscription_type = 'Customer'), SUM(subscription_type = 'Subscriber')) as percentage;",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.subscription_type = 'Customer' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T1.subscription_type = 'Subscriber' THEN 1 ELSE 0 END) FROM trip AS T1 LEFT JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T2.city = 'San Francisco'",
        "difficulty": "challenging"
    },
    {
        "question_id": 91,
        "prev_question_id": 9107,
        "db_id": "movie_3",
        "question": "Which film has a higher replacement cost, ACE GOLDFINGER or ACADEMY DINOSAUR?",
        "evidence": "higher replacement cost refers to Max(replacement_cost); 'ACE GOLDFIINGER' and 'ACADEMY DINOSAUR' are both the title of film",
        "SQL": "SELECT title FROM film WHERE title IN ('ACE GOLDFINGER', 'ACADEMY DINOSAUR') ORDER BY replacement_cost DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 92,
        "prev_question_id": 9112,
        "db_id": "movie_3",
        "question": "Please give the full names of all the active staff.",
        "evidence": "full name refers to first_name, last_name; active staff refers to active = 1",
        "SQL": "SELECT first_name, last_name FROM staff WHERE active = 1",
        "difficulty": "simple"
    },
    {
        "question_id": 93,
        "prev_question_id": 9116,
        "db_id": "movie_3",
        "question": "How many films are in English?",
        "evidence": "\"English\" is the name of language",
        "SQL": "SELECT COUNT(T1.film_id) FROM film AS T1 INNER JOIN language AS T2 ON T1.language_id = T2.language_id WHERE T2.name = 'English'",
        "difficulty": "moderate"
    },
    {
        "question_id": 94,
        "prev_question_id": 935,
        "db_id": "cs_semester",
        "question": "Among professors with the highest popularity, how many of their students have research capability of 5?",
        "evidence": "highest popularity refers to MAX(popularity); research capability refers to capability; capability = 5;",
        "SQL": "SELECT COUNT(T1.student_id) FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id WHERE T1.capability = 5 ORDER BY T2.popularity DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 95,
        "prev_question_id": 9145,
        "db_id": "movie_3",
        "question": "Give the postal code for the address No.65.",
        "evidence": "address no. 65 refers to address_id = 65",
        "SQL": "SELECT postal_code FROM address WHERE address_id = 65",
        "difficulty": "simple"
    },
    {
        "question_id": 96,
        "prev_question_id": 9153,
        "db_id": "movie_3",
        "question": "How many actors played a role in the 2006 film whose rental duration is 7 days, rental rate is 4.99 and is 98 minutes duration?",
        "evidence": "in 2006 refers to release_year = 2006; 98 min duration refers to length = 98; number of actors refers to count(actor_id)",
        "SQL": "SELECT COUNT(T1.actor_id) FROM film_actor AS T1 INNER JOIN film AS T2 ON T1.film_id = T2.film_id WHERE T2.release_year = 2006 AND T2.rental_duration = 7 AND T2.rental_duration = 4.99 AND T2.length = 98",
        "difficulty": "challenging"
    },
    {
        "question_id": 97,
        "prev_question_id": 964,
        "db_id": "cs_semester",
        "question": "List the student's first and last name that got a C in the course named \"Applied Deep Learning\".",
        "evidence": "student's first name refers to f_name; student's last name refers to l_name; got a C refers to grade = 'C';",
        "SQL": "SELECT T1.f_name, T1.l_name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.name = 'Applied Deep Learning ' AND T2.grade = 'C'",
        "difficulty": "moderate"
    },
    {
        "question_id": 98,
        "prev_question_id": 9157,
        "db_id": "movie_3",
        "question": "Give the name of the manager staff for store No.1.",
        "evidence": "store no. 1 refers to store_id = 1; name refers to first_name, last_name",
        "SQL": "SELECT T1.first_name, T1.last_name FROM staff AS T1 INNER JOIN store AS T2 ON T1.store_id = T2.store_id WHERE T2.store_id = 1",
        "difficulty": "simple"
    },
    {
        "question_id": 99,
        "prev_question_id": 966,
        "db_id": "cs_semester",
        "question": "Among the students with a capability below 3, what is the difference of undergraduate students from research postgraduate students?",
        "evidence": "capability < 3; difference = subtract(count(type = 'UG')), (count(type = 'RPG')); undergraduate students refers to type = 'UG'; research postgraduate students refers to type = 'RPG';",
        "SQL": "SELECT SUM(CASE WHEN T2.type = 'UG' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.type = 'RPG' THEN 1 ELSE 0 END) FROM RA AS T1 INNER JOIN student AS T2 ON T1.student_id = T2.student_id WHERE T1.capability < 3",
        "difficulty": "challenging"
    },
    {
        "question_id": 100,
        "prev_question_id": 9164,
        "db_id": "movie_3",
        "question": "How much money did the customer No.297 pay for the rental which happened at 12:27:27 on 2005/7/28?",
        "evidence": "customer no. 297 refers to customer_id = 297; at 12:27:27 on 2005/7/28 refers to rental_date = '2005-07-28 12:27:27'; money pay for rent refers to amount",
        "SQL": "SELECT T1.amount FROM payment AS T1 INNER JOIN rental AS T2 ON T1.rental_id = T2.rental_id WHERE T2.rental_date = '2005-07-28 12:27:27' AND T2.customer_id = 297",
        "difficulty": "moderate"
    },
    {
        "question_id": 101,
        "prev_question_id": 9168,
        "db_id": "movie_3",
        "question": "Give the name of the film for inventory No.3479.",
        "evidence": "inventory no. 3479 refers to inventory_id = '3479'; name of film refers to title",
        "SQL": "SELECT T1.title FROM film AS T1 INNER JOIN inventory AS T2 ON T1.film_id = T2.film_id WHERE T2.inventory_id = 3479",
        "difficulty": "simple"
    },
    {
        "question_id": 102,
        "prev_question_id": 9180,
        "db_id": "movie_3",
        "question": "How many rentals were returned on 5/27/2005?",
        "evidence": "return on 5/27/2005 refers to return_date = '2005-05-27'; rental refers to rental_id",
        "SQL": "SELECT COUNT(rental_id) FROM rental WHERE rental_date = '2005-05-27'",
        "difficulty": "simple"
    },
    {
        "question_id": 103,
        "prev_question_id": 9182,
        "db_id": "movie_3",
        "question": "List the name of the films that can only be found in store id 2.",
        "evidence": "name of film refers to title",
        "SQL": "SELECT T1.title FROM film AS T1 INNER JOIN inventory AS T2 ON T1.film_id = T2.film_id WHERE T2.store_id = 2",
        "difficulty": "moderate"
    },
    {
        "question_id": 104,
        "prev_question_id": 9204,
        "db_id": "movie_3",
        "question": "Calculate the average payment amount per customer.",
        "evidence": "average payment refers to AVG(amount)",
        "SQL": "SELECT AVG(amount) FROM payment GROUP BY customer_id",
        "difficulty": "challenging"
    },
    {
        "question_id": 105,
        "prev_question_id": 9205,
        "db_id": "movie_3",
        "question": "What is the name and email of the staff in store ID 2?",
        "evidence": "name refers to first_name, last_name",
        "SQL": "SELECT first_name, last_name, email FROM staff WHERE store_id = 2",
        "difficulty": "simple"
    },
    {
        "question_id": 106,
        "prev_question_id": 9226,
        "db_id": "movie_3",
        "question": "Provide the full names and emails of customers whose payments were greater than 70% of the average.",
        "evidence": "full name refers to first_name, last_name; average payment refers to AVG(amount); payments were greater than 70% of the average refers to amount > (AVG(amount) MULTIPLY 0.7)",
        "SQL": "SELECT DISTINCT T2.first_name, T2.last_name, T2.email FROM payment AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id INNER JOIN address AS T3 ON T2.address_id = T3.address_id WHERE T1.amount > ( SELECT AVG(amount) FROM payment ) * 0.7",
        "difficulty": "challenging"
    },
    {
        "question_id": 107,
        "prev_question_id": 1035,
        "db_id": "computer_student",
        "question": "How many courses were taught by a professor who is currently the member of faculty?",
        "evidence": "professor refers to professor = 1;\u00a0 member of faculty refers to hasPosition <> 0",
        "SQL": "SELECT COUNT(*) FROM person AS T1 INNER JOIN taughtBy AS T2 ON T1.p_id = T2.p_id WHERE T1.professor = 1 AND T1.hasPosition <> 0",
        "difficulty": "simple"
    },
    {
        "question_id": 108,
        "prev_question_id": 9241,
        "db_id": "movie_3",
        "question": "List the store ID of the films with a rental rate greater than the 60% of average rental rate of all listed films.",
        "evidence": "average rental rate of all listed films refers to AVG(rental_rate); rental rate greater than the 60% of average rental rate refers to rental_rate > (AVG(rental_rate)) MULTIPLY 0.6",
        "SQL": "SELECT T2.store_id FROM film AS T1 INNER JOIN inventory AS T2 ON T1.film_id = T2.film_id WHERE T1.rental_rate > ( SELECT AVG(T1.rental_rate) * 0.6 FROM film AS T1 )",
        "difficulty": "challenging"
    },
    {
        "question_id": 109,
        "prev_question_id": 1052,
        "db_id": "talkingdata",
        "question": "What are the categories of the top 2 oldest events?",
        "evidence": "oldest event refers to MIN(timestamp);",
        "SQL": "SELECT T4.category FROM events_relevant AS T1 INNER JOIN app_events_relevant AS T2 ON T1.event_id = T2.event_id INNER JOIN app_labels AS T3 ON T3.app_id = T2.app_id INNER JOIN label_categories AS T4 ON T3.label_id = T4.label_id ORDER BY T1.timestamp LIMIT 2",
        "difficulty": "simple"
    },
    {
        "question_id": 110,
        "prev_question_id": 1059,
        "db_id": "talkingdata",
        "question": "How many events were there on 30th April, 2016?",
        "evidence": "on 30th April, 2016 refers to `timestamp` LIKE '2016-04-30%';",
        "SQL": "SELECT COUNT(event_id) FROM events WHERE SUBSTR(`timestamp`, 1, 10) = '2016-04-30'",
        "difficulty": "simple"
    },
    {
        "question_id": 111,
        "prev_question_id": 1066,
        "db_id": "talkingdata",
        "question": "How many events did the 88-years-old male users participate on 4th May,2016?",
        "evidence": "88-years-old refers to age = 88; male refers to gender = 'M'; on 4th May, 2016 refers to timestamp LIKE '2016-05-04%';",
        "SQL": "SELECT COUNT(T2.event_id) FROM gender_age AS T1 INNER JOIN events AS T2 ON T2.device_id = T1.device_id WHERE T1.gender = 'M' AND SUBSTR(`timestamp`, 1, 10) = '2016-05-04' AND T1.age = 88",
        "difficulty": "simple"
    },
    {
        "question_id": 112,
        "prev_question_id": 9272,
        "db_id": "movie_3",
        "question": "What is the title of the films in which Cuba Allen acted?",
        "evidence": "'Cuba Allen' is a full name of an actor; full name refers to first_name, last_name",
        "SQL": "SELECT T3.title FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T1.first_name = 'Cuba' AND T1.last_name = 'Allen'",
        "difficulty": "simple"
    },
    {
        "question_id": 113,
        "prev_question_id": 9288,
        "db_id": "movie_3",
        "question": "Please list the full names of any three inactive customers.",
        "evidence": "full name refers to first_name, last_name; inactive customers refers to active = 0",
        "SQL": "SELECT first_name, last_name FROM customer WHERE active = 0 LIMIT 3",
        "difficulty": "simple"
    },
    {
        "question_id": 114,
        "prev_question_id": 1101,
        "db_id": "talkingdata",
        "question": "How many female users belong to the age group of 27 to 28?",
        "evidence": "female refers to gender = 'F'; age group of 27 to 28 refers to `group` = 'F27-28';",
        "SQL": "SELECT COUNT(device_id) FROM gender_age WHERE `group` = 'F27-28' AND gender = 'F'",
        "difficulty": "moderate"
    },
    {
        "question_id": 115,
        "prev_question_id": 1104,
        "db_id": "talkingdata",
        "question": "What is the age of the youngest female user of the app?",
        "evidence": "youngest user refers to MIN(age); female refers to gender = 'F';",
        "SQL": "SELECT MIN(age) FROM gender_age WHERE gender = 'F'",
        "difficulty": "simple"
    },
    {
        "question_id": 116,
        "prev_question_id": 9301,
        "db_id": "movie_3",
        "question": "What is the percentage of documentary films?",
        "evidence": "documentary' is a name of a category; calculation = DIVIDE(SUM(name = 'Documentary'), COUNT(film_id)) * 100",
        "SQL": "SELECT CAST(SUM(IIF(T2.name = 'Documentary', 1, 0)) AS REAL) * 100 / COUNT(T1.film_id) FROM film_category AS T1 INNER JOIN category AS T2 ON T1.category_id = T2.category_id",
        "difficulty": "moderate"
    },
    {
        "question_id": 117,
        "prev_question_id": 1109,
        "db_id": "talkingdata",
        "question": "How many users belong to \"Financial Information\" category?",
        "evidence": "",
        "SQL": "SELECT COUNT(T1.app_id) FROM app_labels AS T1 INNER JOIN label_categories AS T2 ON T1.label_id = T2.label_id WHERE T2.category = 'Financial Information'",
        "difficulty": "simple"
    },
    {
        "question_id": 118,
        "prev_question_id": 9309,
        "db_id": "movie_3",
        "question": "How many films did a customer named Francis Sikes rent?",
        "evidence": "'Francis Sikes' is a full name of a customer; full name refers to first_name, last_name;",
        "SQL": "SELECT COUNT(T1.customer_id) FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id WHERE T1.first_name = 'FRANCIS' AND T1.last_name = 'SIKES'",
        "difficulty": "simple"
    },
    {
        "question_id": 119,
        "prev_question_id": 1124,
        "db_id": "talkingdata",
        "question": "For the event which happened at 23:55:16 on 2016/5/7, in the location coordinate(113, 28), on what device did it happen? Give the name of the device model.",
        "evidence": "at 23:55:16 on 2016/5/7 refers to timestamp = '2016/5/7 23:55:16'; location coordinate (113, 28) refers to longitude = '113' AND latitude = '28';",
        "SQL": "SELECT T1.device_model FROM phone_brand_device_model2 AS T1 INNER JOIN events AS T2 ON T1.device_id = T2.event_id WHERE T2.longitude = '113' AND T2.latitude = '28' AND T2.timestamp = '2016-05-07 23:55:16'",
        "difficulty": "moderate"
    },
    {
        "question_id": 120,
        "prev_question_id": 9322,
        "db_id": "movie_3",
        "question": "Please indicate the full name of actor id 5.",
        "evidence": "full name refers to first_name, last_name",
        "SQL": "SELECT first_name, last_name FROM actor WHERE actor_id = 5",
        "difficulty": "simple"
    },
    {
        "question_id": 121,
        "prev_question_id": 1143,
        "db_id": "talkingdata",
        "question": "For the device with an event occurring on 2016/5/1 at 0:55:25, what is the gender of its user?",
        "evidence": "on 2016/5/1 at 0:55:25 refers to timestamp = '2016-05-01 00:55:25';",
        "SQL": "SELECT T1.gender FROM gender_age AS T1 INNER JOIN events AS T2 ON T1.device_id = T2.device_id WHERE T2.timestamp = '2016-05-01 00:55:25'",
        "difficulty": "challenging"
    },
    {
        "question_id": 122,
        "prev_question_id": 9336,
        "db_id": "movie_3",
        "question": "Calculate the percentage of total payment of MARGARET MOORE customers.",
        "evidence": "percentage = divide(sum(amount where first_name = 'MARGARET' and last_name = 'MOORE'), sum(amount)) * 100%",
        "SQL": "SELECT CAST(SUM(IIF(T2.first_name = 'MARGARET' AND T2.last_name = 'MOORE', T1.amount, 0)) AS REAL) * 100 / SUM(T1.amount) FROM payment AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id",
        "difficulty": "challenging"
    },
    {
        "question_id": 123,
        "prev_question_id": 9338,
        "db_id": "movie_3",
        "question": "How many film titles were released in 2006?",
        "evidence": "released in 2006 refers to release_year = 2006",
        "SQL": "SELECT COUNT(film_id) FROM film WHERE release_year = 2006",
        "difficulty": "simple"
    },
    {
        "question_id": 124,
        "prev_question_id": 1154,
        "db_id": "talkingdata",
        "question": "Please list the event IDs of the events that have happened on the device of the oldest user.",
        "evidence": "oldest user refers to MAX(age);",
        "SQL": "SELECT T2.event_id FROM gender_age AS T1 INNER JOIN events AS T2 ON T1.device_id = T2.device_id ORDER BY T1.age DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 125,
        "prev_question_id": 1159,
        "db_id": "talkingdata",
        "question": "What is the average age of the female users who uses a vivo device?",
        "evidence": "average age = AVG(age); female refers to gender = 'F'; vivo device refers to phone_brand = 'vivo';",
        "SQL": "SELECT AVG(T1.age) FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.phone_brand = 'vivo' AND T1.gender = 'F'",
        "difficulty": "moderate"
    },
    {
        "question_id": 126,
        "prev_question_id": 9353,
        "db_id": "movie_3",
        "question": "List down email address of customers who were attended by staff with ID 2.",
        "evidence": "email address refers to email",
        "SQL": "SELECT DISTINCT T1.email FROM customer AS T1 INNER JOIN rental AS T2 ON T1.customer_id = T2.customer_id WHERE T2.staff_id = 2",
        "difficulty": "simple"
    },
    {
        "question_id": 127,
        "prev_question_id": 9365,
        "db_id": "movie_3",
        "question": "From 5/30/2005 at 3:43:54 AM to 7/31/2005 at 10:08:29 PM, how many times did Susan Wilson pay for film rentals?",
        "evidence": "from 5/30/2005 at 3:43:54 AM to 7/31/2005 at 10:08:29 PM refers to payment_date between '2005-05-30 03:43:54' and '2005-07-31 10:08:29'",
        "SQL": "SELECT COUNT(T1.customer_id) FROM payment AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id WHERE T1.payment_date BETWEEN '2005-05-30 03:43:54' AND '2005-07-31 10:08:29'",
        "difficulty": "moderate"
    },
    {
        "question_id": 128,
        "prev_question_id": 1173,
        "db_id": "talkingdata",
        "question": "Describe the number of app IDs and location of the event ID \"79641\".",
        "evidence": "location = longitude, latitude;",
        "SQL": "SELECT COUNT(T1.app_id), T2.longitude, T2.latitude FROM app_events AS T1 INNER JOIN events AS T2 ON T1.event_id = T2.event_id WHERE T1.event_id = 79641 GROUP BY T2.longitude, T2.latitude",
        "difficulty": "simple"
    },
    {
        "question_id": 129,
        "prev_question_id": 9364,
        "db_id": "movie_3",
        "question": "Compute the total payment made by Sarah Lewis for film rentals so far.",
        "evidence": "total payment = sum(amount)",
        "SQL": "SELECT SUM(T3.amount) FROM rental AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id INNER JOIN payment AS T3 ON T1.rental_id = T3.rental_id WHERE T2.first_name = 'SARAH' AND T2.last_name = 'LEWIS'",
        "difficulty": "moderate"
    },
    {
        "question_id": 130,
        "prev_question_id": 9370,
        "db_id": "movie_3",
        "question": "Name the cast members of the movie 'African Egg'.",
        "evidence": "cast member name refers to first_name, last_name; 'African Egg' refers to title = 'AFRICAN EGG'",
        "SQL": "SELECT T2.first_name, T2.last_name FROM film_actor AS T1 INNER JOIN actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T1.film_id = T3.film_id WHERE T3.title = 'AFRICAN EGG'",
        "difficulty": "moderate"
    },
    {
        "question_id": 131,
        "prev_question_id": 1179,
        "db_id": "talkingdata",
        "question": "Among the HTC users, calculate the percentage of female users who are over 80.",
        "evidence": "HTC refers to phone_brand = 'HTC'; percentage = DIVIDE(SUM(gender = 'F' AND age > 80), COUNT(device_id)); female refers to gender = 'F'; over 80 refers to age > 80",
        "SQL": "SELECT SUM(IIF(T1.gender = 'F' AND T1.age > 80, 1, 0)) / COUNT(T1.device_id) AS per FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.phone_brand = 'HTC'",
        "difficulty": "challenging"
    },
    {
        "question_id": 132,
        "prev_question_id": 9385,
        "db_id": "movie_3",
        "question": "How many film categories are there?",
        "evidence": "",
        "SQL": "SELECT COUNT(DISTINCT category_id) FROM category",
        "difficulty": "simple"
    },
    {
        "question_id": 133,
        "prev_question_id": 1197,
        "db_id": "talkingdata",
        "question": "State the number of users who are under 50 and above 20 use device model of Galaxy Premier.",
        "evidence": "under 50 and above 20 refers to age BTWEEEN 20 AND 50;",
        "SQL": "SELECT COUNT(T1.device_id) FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T1.age BETWEEN 20 AND 50 AND T2.device_model = 'Galaxy Premier'",
        "difficulty": "simple"
    },
    {
        "question_id": 134,
        "prev_question_id": 1228,
        "db_id": "talkingdata",
        "question": "What is the age and gender of the person who uses the device number 29182687948017100 on event number 1?",
        "evidence": "device number refers to device_id; device_id = 29182687948017100; event number refers to event_id; and event_id = 1;",
        "SQL": "SELECT T1.age, T1.gender FROM gender_age AS T1 INNER JOIN events_relevant AS T2 ON T1.device_id = T2.device_id WHERE T1.device_id = 29182687948017100 AND T2.event_id = 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 135,
        "prev_question_id": 1229,
        "db_id": "talkingdata",
        "question": "How many male users have the log of events at the same longitude of 114?",
        "evidence": "male refers to gender = 'M';",
        "SQL": "SELECT COUNT(T1.device_id) FROM gender_age AS T1 INNER JOIN events_relevant AS T2 ON T1.device_id = T2.device_id WHERE T2.longitude = 114 AND T1.gender = 'M'",
        "difficulty": "moderate"
    },
    {
        "question_id": 136,
        "prev_question_id": 1235,
        "db_id": "talkingdata",
        "question": "What is the percentage of device users in the F27-28 age group who experienced an event on the 3rd of May 2016?",
        "evidence": "percentage = MULTIPLY(DIVIDE(SUM(`group` = 'F27-28'), COUNT(device_id)), 1.0); on the 3rd of May 2016 refers to timestamp = '2016-05-03%';",
        "SQL": "SELECT SUM(IIF(T1.`group` = 'F27-28', 1, 0)) / COUNT(T1.device_id) AS per FROM gender_age AS T1 INNER JOIN events_relevant AS T2 ON T1.device_id = T2.device_id WHERE SUBSTR(T2.timestamp, 1, 10) = '2016-05-03'",
        "difficulty": "challenging"
    },
    {
        "question_id": 137,
        "prev_question_id": 9427,
        "db_id": "movie_3",
        "question": "What is the average amount of money spent by a customer in Italy on a single film rental?",
        "evidence": "Italy refers to country = 'Italy'; average amount = divide(sum(amount), count(customer_id)) where country = 'Italy'",
        "SQL": "SELECT AVG(T5.amount) FROM address AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id INNER JOIN country AS T3 ON T2.country_id = T3.country_id INNER JOIN customer AS T4 ON T1.address_id = T4.address_id INNER JOIN payment AS T5 ON T4.customer_id = T5.customer_id WHERE T3.country = 'Italy'",
        "difficulty": "challenging"
    },
    {
        "question_id": 138,
        "prev_question_id": 1245,
        "db_id": "law_episode",
        "question": "Please list all the keywords of the episode \"Refuge: Part 1\".",
        "evidence": "episode \"Refuge: Part 1\" refers to title = 'Refuge: Part 1'",
        "SQL": "SELECT T2.keyword FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'Refuge: Part 1'",
        "difficulty": "moderate"
    },
    {
        "question_id": 139,
        "prev_question_id": 1265,
        "db_id": "law_episode",
        "question": "For the episode with the most votes, give its air date.",
        "evidence": "the most votes refers to max(votes)",
        "SQL": "SELECT T2.air_date FROM Vote AS T1 INNER JOIN Episode AS T2 ON T2.episode_id = T1.episode_id GROUP BY T2.episode_id ORDER BY SUM(T1.votes) DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 140,
        "prev_question_id": 1271,
        "db_id": "law_episode",
        "question": "What are the names of the person that were not credited at the end of episode tt0629391?",
        "evidence": "not credited refers to credited = ''; episode tt0629391 refers to episode_id = 'tt0629391'",
        "SQL": "SELECT T2.name FROM Credit AS T1 INNER JOIN Person AS T2 ON T2.person_id = T1.person_id WHERE T1.credited = 'false' AND T1.episode_id = 'tt0629391'",
        "difficulty": "moderate"
    },
    {
        "question_id": 141,
        "prev_question_id": 1280,
        "db_id": "law_episode",
        "question": "What is the title of the episode with the highest number of keywords?",
        "evidence": "the highest number of keywords refers to max(count(keyword))",
        "SQL": "SELECT T1.title FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id GROUP BY T1.episode_id ORDER BY COUNT(T2.keyword) DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 142,
        "prev_question_id": 1281,
        "db_id": "law_episode",
        "question": "Among the episodes that were aired in 1998, how many won an International Monitor Awards?",
        "evidence": "aired in 1998 refers to air_date like '1998%'; won refers to result = 'Winner'; International Monitor Awards refers to organization = 'International Monitor Awards'",
        "SQL": "SELECT COUNT(T1.episode_id) FROM Episode AS T1 INNER JOIN Award AS T2 ON T1.episode_id = T2.episode_id WHERE strftime('%Y', T1.air_date) = '1998' AND T2.organization = 'International Monitor Awards' AND T2.result = 'Winner'",
        "difficulty": "moderate"
    },
    {
        "question_id": 143,
        "prev_question_id": 1317,
        "db_id": "law_episode",
        "question": "Write down the title, summary, and air date of the episode that garnered 72 10-star votes.",
        "evidence": "72 10-star votes refers to stars = 10 and votes = 72",
        "SQL": "SELECT T2.title, T2.summary, T2.air_date FROM Vote AS T1 INNER JOIN Episode AS T2 ON T2.episode_id = T1.episode_id WHERE T1.stars = 10 AND T1.votes = 72",
        "difficulty": "simple"
    },
    {
        "question_id": 144,
        "prev_question_id": 1336,
        "db_id": "law_episode",
        "question": "List out director names that received an award along with the episode number.",
        "evidence": "director refers to role = 'director'; received an award refers to result = 'Winner'; episode number refers to episode",
        "SQL": "SELECT T3.name, T1.episode_id FROM Episode AS T1 INNER JOIN Award AS T2 ON T1.episode_id = T2.episode_id INNER JOIN Person AS T3 ON T2.person_id = T3.person_id WHERE T2.role = 'director' AND T2.result = 'Winner'",
        "difficulty": "moderate"
    },
    {
        "question_id": 145,
        "prev_question_id": 1338,
        "db_id": "law_episode",
        "question": "What is the average rating for each episode in season 9?",
        "evidence": "average rating = divide(sum(rating), count(episode_id))",
        "SQL": "SELECT SUM(rating) / COUNT(episode_id) FROM Episode WHERE season = 9",
        "difficulty": "simple"
    },
    {
        "question_id": 146,
        "prev_question_id": 1381,
        "db_id": "synthea",
        "question": "Provide the name of the patient who had a claim on 1947/9/11.",
        "evidence": "name of the patient implies full name and refers to first, last; on 1947/9/11 refers to BILLABLEPERIOD = '1947-09-11';",
        "SQL": "SELECT T1.first, T1.last FROM patients AS T1 INNER JOIN claims AS T2 ON T1.patient = T2.PATIENT WHERE T2.billableperiod = '1947-09-11'",
        "difficulty": "simple"
    },
    {
        "question_id": 147,
        "prev_question_id": 1404,
        "db_id": "synthea",
        "question": "Among the patients with prediabetes, how many are female?",
        "evidence": "patients with prediabetes refer to PATIENT from conditions where DESCRIPTION = 'Prediabetes'; female refers to gender = 'F';",
        "SQL": "SELECT COUNT(DISTINCT T2.patient) FROM conditions AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T2.gender = 'F' AND T1.DESCRIPTION = 'Prediabetes'",
        "difficulty": "simple"
    },
    {
        "question_id": 148,
        "prev_question_id": 1447,
        "db_id": "synthea",
        "question": "How many of the patients who underwent a 'bone immobilization' procedure have a driver's license?",
        "evidence": "patients who underwent a 'bone immobilization' procedure refer to PATIENT from procedures where DESCRIPTION = 'Bone immobilization'; have a driver's license refers to drivers is not null;",
        "SQL": "SELECT COUNT(DISTINCT T1.patient) FROM patients AS T1 INNER JOIN procedures AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Bone immobilization' AND T1.drivers IS NOT NULL",
        "difficulty": "simple"
    },
    {
        "question_id": 149,
        "prev_question_id": 1514,
        "db_id": "synthea",
        "question": "What is the percentage of female patients who started the care plan in 2010?",
        "evidence": "female patients refers to gender = 'F'; started the care plan in 2010 refers to substr(careplans.START, 1, 4) = '2010'; percentage = MULTIPLY(DIVIDE(COUNT(patients.patient WHERE patients.gender = 'F'), COUNT(patients.patient) WHERE substr(careplans.START, 1, 4) = '2010'), 100);",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.gender = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.PATIENT) AS percentage FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE strftime('%Y', T1.START) = '2010'",
        "difficulty": "challenging"
    },
    {
        "question_id": 150,
        "prev_question_id": 1590,
        "db_id": "car_retails",
        "question": "Between 8/1/2003 and 8/30/2004, how many checks were issued by Mini Gifts Distributors Ltd.? Please list their check numbers.",
        "evidence": "paymentDate BETWEEN '2003-08-01' AND '2004-08-30'; Mini Gifts Distributors Ltd. Is a customer name;",
        "SQL": "SELECT T1.checkNumber FROM payments AS T1 INNER JOIN customers AS T2 ON T1.customerNumber = T2.customerNumber WHERE T1.paymentDate >= '2003-08-01' AND T1.paymentDate <= '2004-08-30' AND T2.customerName = 'Mini Gifts Distributors Ltd.'",
        "difficulty": "simple"
    },
    {
        "question_id": 151,
        "prev_question_id": 1600,
        "db_id": "car_retails",
        "question": "How many customers with a canceled shipment have a credit limit greater than 115,000?",
        "evidence": "cancelled shipment refers to status = 'cancelled'; creditLimit > 115000;",
        "SQL": "SELECT COUNT(T1.customerNumber) FROM customers AS T1 INNER JOIN orders AS T2 ON T1.customerNumber = T2.customerNumber WHERE T2.status = 'Cancelled' AND T1.creditLimit > 115000",
        "difficulty": "moderate"
    },
    {
        "question_id": 152,
        "prev_question_id": 1609,
        "db_id": "car_retails",
        "question": "How many kinds of products did order No. 10252 contain?",
        "evidence": "Products refer to productCode;",
        "SQL": "SELECT COUNT(t.productCode) FROM orderdetails t WHERE t.orderNumber = '10252'",
        "difficulty": "moderate"
    },
    {
        "question_id": 153,
        "prev_question_id": 1616,
        "db_id": "car_retails",
        "question": "Which customer made the order No. 10160? Give the contact name.",
        "evidence": "",
        "SQL": "SELECT t2.contactFirstName, t2.contactLastName FROM orders AS t1 INNER JOIN customers AS t2 ON t1.customerNumber = t2.customerNumber WHERE t1.orderNumber = '10160'",
        "difficulty": "simple"
    },
    {
        "question_id": 154,
        "prev_question_id": 1617,
        "db_id": "car_retails",
        "question": "Where was the order No. 10383 shipped to? Show me the address.",
        "evidence": "Address comprises addressLine1 and addressLine2;",
        "SQL": "SELECT t2.addressLine1, t2.addressLine2 FROM orders AS t1 INNER JOIN customers AS t2 ON t1.customerNumber = t2.customerNumber WHERE t1.orderNumber = '10383'",
        "difficulty": "moderate"
    },
    {
        "question_id": 155,
        "prev_question_id": 1618,
        "db_id": "car_retails",
        "question": "For the productline where the product No.S18_2949 was produced, what's the text description for that product line?",
        "evidence": "",
        "SQL": "SELECT t1.textDescription FROM productlines AS t1 INNER JOIN products AS t2 ON t1.productLine = t2.productLine WHERE t2.productCode = 'S18_2949'",
        "difficulty": "simple"
    },
    {
        "question_id": 156,
        "prev_question_id": 1636,
        "db_id": "car_retails",
        "question": "When were the products ordered by Cruz & Sons Co. on 2003-03-03 shipped?",
        "evidence": "Cruz & Sons Co. is name of customer; ordered on 2003-03-03 refers to orderDate;",
        "SQL": "SELECT t1.shippedDate FROM orders AS t1 INNER JOIN customers AS t2 ON t1.customerNumber = t2.customerNumber WHERE t2.customerName = 'Cruz & Sons Co.' AND t1.orderDate = '2003-03-03'",
        "difficulty": "simple"
    },
    {
        "question_id": 157,
        "prev_question_id": 1645,
        "db_id": "car_retails",
        "question": "What is the percentage of employees are in Paris office?",
        "evidence": "DIVIDE(COUNT(employeeNumber) when city = 'Paris'), (COUNT(employeeNumber)) as percentage;",
        "SQL": "SELECT CAST(COUNT(CASE WHEN t1.city = 'Paris' THEN t2.employeeNumber ELSE NULL END) AS REAL) * 100 / COUNT(t2.employeeNumber) FROM offices AS t1 INNER JOIN employees AS t2 ON t1.officeCode = t2.officeCode",
        "difficulty": "moderate"
    },
    {
        "question_id": 158,
        "prev_question_id": 1651,
        "db_id": "car_retails",
        "question": "How much did customer 103 pay in total?",
        "evidence": "Pay in total refers to SUM(amount);",
        "SQL": "SELECT SUM(t.amount) FROM payments t WHERE t.customerNumber = '103'",
        "difficulty": "simple"
    },
    {
        "question_id": 159,
        "prev_question_id": 1663,
        "db_id": "car_retails",
        "question": "Who are the sales representatives in New York City? List their full names.",
        "evidence": "New York City refers to city = 'NYC'; sales representative refers to jobTitle = 'Sales Rep';",
        "SQL": "SELECT t1.lastName, t1.firstName FROM employees AS t1 INNER JOIN offices AS t2 ON t1.officeCode = t2.officeCode WHERE t2.city = 'NYC' AND t1.jobTitle = 'Sales Rep'",
        "difficulty": "simple"
    },
    {
        "question_id": 160,
        "prev_question_id": 1769,
        "db_id": "restaurant",
        "question": "Among the restaurants located on the street number ranges from 1000 to 2000, what is the percentage of Afghani restaurants are there?",
        "evidence": "street number ranges from 1000 to 2000 refers to 1000 < = street_num < = 2000; Afghani restaurant refers to food_type = 'afghani'; percentage = divide(count(id_restaurant where food_type = 'afghani'), count(id_restaurant)) * 100%",
        "SQL": "SELECT CAST(SUM(IIF(T2.food_type = 'afghani', 1, 0)) AS REAL) * 100 / COUNT(T1.id_restaurant) FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE 1000 <= T1.street_num <= 2000",
        "difficulty": "challenging"
    },
    {
        "question_id": 161,
        "prev_question_id": 1773,
        "db_id": "restaurant",
        "question": "Which county in northern California has the highest number of cities?",
        "evidence": "northern California refers to region = 'northern california'; the highest number of cities refers to max(count(city))",
        "SQL": "SELECT county FROM geographic WHERE region = 'northern california' GROUP BY county ORDER BY COUNT(city) DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 162,
        "prev_question_id": 1790,
        "db_id": "soccer_2016",
        "question": "Please list the IDs of all the matches in the year 2008.",
        "evidence": "ID of matches refers to Match_Id; in the year 2008 refers to SUBSTR(Match_Date, 1, 4) = '2008'",
        "SQL": "SELECT Match_Id FROM `Match` WHERE SUBSTR(Match_Date, 1, 4) = '2008'",
        "difficulty": "simple"
    },
    {
        "question_id": 163,
        "prev_question_id": 1792,
        "db_id": "soccer_2016",
        "question": "Which country is the oldest player from?",
        "evidence": "country refers to Country_Name; the oldest refers to min(DOB)",
        "SQL": "SELECT T1.Country_Name FROM Country AS T1 INNER JOIN Player AS T2 ON T2.Country_Name = T1.Country_Id WHERE T2.Country_Name IS NOT NULL ORDER BY T2.DOB LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 164,
        "prev_question_id": 1849,
        "db_id": "soccer_2016",
        "question": "What is the role of K Goel in the match ID 335992?",
        "evidence": "role refers to Role_Desc; K Goel refers to Player_Name = 'K Goel'; match ID 335992 refers to Match_Id = 335992",
        "SQL": "SELECT T3.Role_Desc FROM Player AS T1 INNER JOIN Player_Match AS T2 ON T2.Player_Id = T1.Player_Id INNER JOIN Rolee AS T3 ON T3.Role_Id = T2.Role_Id WHERE T2.Match_Id = 335992 AND T1.Player_Name = 'K Goel'",
        "difficulty": "moderate"
    },
    {
        "question_id": 165,
        "prev_question_id": 1860,
        "db_id": "soccer_2016",
        "question": "Provide the match IDs which were held on 18th April 2015.",
        "evidence": "on 18th April 2015 refers to DATE(Match_Date) = '2015-04-18'",
        "SQL": "SELECT Match_Id FROM Match WHERE Match_Date LIKE '%2015-04-18%'",
        "difficulty": "simple"
    },
    {
        "question_id": 166,
        "prev_question_id": 1899,
        "db_id": "soccer_2016",
        "question": "On average, how many players from each country bat with their right hand?",
        "evidence": "bat with their right hand refers to Batting_hand = 'Right-hand bat'; average = divide(count(Player_Id) when Batting_hand = 'Right-hand bat', count(Country_Name))",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.Batting_hand = 'Right-hand bat' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.Country_Name) FROM Batting_Style AS T1 INNER JOIN Player AS T2 ON T1.Batting_id = T2.Batting_hand",
        "difficulty": "moderate"
    },
    {
        "question_id": 167,
        "prev_question_id": 1901,
        "db_id": "soccer_2016",
        "question": "In the matches where the winning margin is less than fifty, how many teams won by wicket?",
        "evidence": "winning margin is less than fifty refers to Win_Margin < 50; won by wicket refers to Win_Type = 'wickets'",
        "SQL": "SELECT COUNT(T2.Win_Id) FROM `Match` AS T1 INNER JOIN Win_By AS T2 ON T1.Win_Type = T2.Win_Id WHERE T2.Win_Type = 'wickets' AND T1.Win_Margin < 50",
        "difficulty": "moderate"
    },
    {
        "question_id": 168,
        "prev_question_id": 1919,
        "db_id": "soccer_2016",
        "question": "List all Zimbabwean players.",
        "evidence": "Zimbabwean refers to Country_Name = 'Zimbabwea'; players refers to Player_Name",
        "SQL": "SELECT T1.Player_Name FROM Player AS T1 INNER JOIN Country AS T2 ON T1.Country_Name = T2.Country_Id WHERE T2.Country_Name = 'Zimbabwea'",
        "difficulty": "simple"
    },
    {
        "question_id": 169,
        "prev_question_id": 1952,
        "db_id": "soccer_2016",
        "question": "How many players have won at least 5 man of the match awards?",
        "evidence": "won at least 5 man of the match awards refers to COUNT(Match_Id) > = 5",
        "SQL": "SELECT COUNT(Match_Id) FROM `Match` GROUP BY Man_of_the_Match HAVING COUNT(Match_Id) >= 5",
        "difficulty": "simple"
    },
    {
        "question_id": 170,
        "prev_question_id": 1961,
        "db_id": "soccer_2016",
        "question": "Which country is the youngest player from?",
        "evidence": "country refers to Country_Name; youngest player refers to max(DOB)",
        "SQL": "SELECT T1.Country_Name FROM Country AS T1 INNER JOIN Player AS T2 ON T1.Country_Id = T2.Country_Name ORDER BY T2.DOB DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 171,
        "prev_question_id": 1996,
        "db_id": "soccer_2016",
        "question": "What is the venue for the match ID 829768?",
        "evidence": "\nvenue refers to Venue_Name",
        "SQL": "SELECT T1.Venue_Name FROM Venue AS T1 INNER JOIN Match AS T2 ON T1.venue_id = T2.venue_id WHERE T2.match_id = 829768",
        "difficulty": "simple"
    },
    {
        "question_id": 172,
        "prev_question_id": 2022,
        "db_id": "soccer_2016",
        "question": "What is the outcome type of match ID 392195?",
        "evidence": "",
        "SQL": "SELECT T2.Outcome_Type FROM Match AS T1 INNER JOIN Outcome AS T2 ON T1.Outcome_type = T2.Outcome_Id WHERE T1.Match_Id = '392195'",
        "difficulty": "simple"
    },
    {
        "question_id": 173,
        "prev_question_id": 2035,
        "db_id": "soccer_2016",
        "question": "What is the percentage of matches that are won by runs?",
        "evidence": "won by runs refers to win_type = 1; percentage refers to DIVIDE(COUNT(win_type = 1), COUNT(Win_Type)) * 100",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.win_type = 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Win_Type) FROM Match AS T1 INNER JOIN Win_By AS T2 ON T1.Win_Type = T2.Win_Id",
        "difficulty": "moderate"
    },
    {
        "question_id": 174,
        "prev_question_id": 2038,
        "db_id": "soccer_2016",
        "question": "Who is the winning team in a match held on April 26, 2009 with a winning margin of 6 points?",
        "evidence": "winning margin of 6 points refers to Win_Margin = 6; held on April 26, 2009 refers to Match_Date = '2009-04-26'",
        "SQL": "SELECT T1.Team_Name FROM Team AS T1 INNER JOIN Match AS T2 ON T1.team_id = T2.match_winner WHERE T2.Win_Margin = 6 AND T2.Match_Date = '2009-04-26'",
        "difficulty": "moderate"
    },
    {
        "question_id": 175,
        "prev_question_id": 2044,
        "db_id": "soccer_2016",
        "question": "Among the matches of Delhi Daredevils in 2009, what is the percentage of their matches won by wickets?",
        "evidence": "Delhi Daredevils refers to team_name = 'Delhi Daredevils'; in 2009 refers to Match_Date = '2009%'; won by wickets refers to Win_Type = 'wickets'; percentage refers to DIVIDE(COUNT(Win_Type = 'wickets'), COUNT(Win_Type))",
        "SQL": "SELECT CAST(SUM(CASE WHEN T3.Win_Type = 'wickets' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T3.Win_Type) FROM Team AS T1 INNER JOIN Match AS T2 ON T1.Team_Id = T2.Match_Winner INNER JOIN Win_By AS T3 ON T2.Win_Type = T3.Win_Id WHERE T1.Team_Name = 'Delhi Daredevils'",
        "difficulty": "challenging"
    },
    {
        "question_id": 176,
        "prev_question_id": 2101,
        "db_id": "world_development_indicators",
        "question": "Please list the countries that got the footnote \"Data are classified as official aid.\" on the series code DC.DAC.AUSL.CD in 2002.",
        "evidence": "countries are the Countrycode; footnote refers to Description = 'Data are classified as official aid'",
        "SQL": "SELECT T1.SHORTNAME FROM Country AS T1 INNER JOIN FootNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T2.Description = 'Data are classified as official aid.' AND T2.Seriescode = 'DC.DAC.AUSL.CD' AND T2.Year LIKE '%2002%'",
        "difficulty": "simple"
    },
    {
        "question_id": 177,
        "prev_question_id": 2128,
        "db_id": "world_development_indicators",
        "question": "Please list the short name of countries which have the latest trade data after 2010.",
        "evidence": "the latest trade data after 2010 implies LatestTradeData > 2010;",
        "SQL": "SELECT ShortName FROM Country WHERE LatestTradeData > 2010",
        "difficulty": "moderate"
    },
    {
        "question_id": 178,
        "prev_question_id": 2130,
        "db_id": "world_development_indicators",
        "question": "Please calculate the average of Arms imports (SIPRI trend indicator values) of the European & Central Asian countries.",
        "evidence": "European & Central Asian is the name of the region; IndicatorName = 'Arms imports (SIPRI trend indicator values)'; countries refer to CountryCode; DIVIDE(Sum(Value), Count(CountryCode));",
        "SQL": "SELECT CAST(SUM(T2.Value) AS REAL) / COUNT(T1.CountryCode) FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.Region = 'Europe & Central Asia' AND T2.IndicatorName = 'Arms imports (SIPRI trend indicator values)'",
        "difficulty": "challenging"
    },
    {
        "question_id": 179,
        "prev_question_id": 2137,
        "db_id": "world_development_indicators",
        "question": "From 1960 to 1965, which country had the highest Death rate, crude (per 1,000 people)?",
        "evidence": "IndicatorName = 'Death rate, crude (per 1,000 people)'; the highest refers to MAX(Value); from 1960 to 1965 refers to Year between '1960' and '1965'; country refers to CountryName;",
        "SQL": "SELECT CountryName FROM Indicators WHERE Year BETWEEN 1960 AND 1965 AND IndicatorName = 'Death rate, crude (per 1,000 people)' ORDER BY Value DESC LIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question_id": 180,
        "prev_question_id": 2166,
        "db_id": "world_development_indicators",
        "question": "Name the countries' long name with national accounts base year prior to 1980.",
        "evidence": "national accounts base year prior to 1980 means before 1980 and refers to NationalAccountsBaseYear<1980;",
        "SQL": "SELECT LongName FROM Country WHERE NationalAccountsBaseYear < '1980' AND NationalAccountsBaseYear != ''",
        "difficulty": "moderate"
    },
    {
        "question_id": 181,
        "prev_question_id": 2172,
        "db_id": "world_development_indicators",
        "question": "List the long name of countries with indicator name in 1980.",
        "evidence": "with any indicator name implies IndicatorName is not NULL; Year = '1980';",
        "SQL": "SELECT DISTINCT T1.LongName FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Year = 1980 AND T2.IndicatorName IS NOT NULL",
        "difficulty": "moderate"
    },
    {
        "question_id": 182,
        "prev_question_id": 2174,
        "db_id": "world_development_indicators",
        "question": "Name 5 country codes of country with highest value and state the region of these countries.",
        "evidence": "with highest value refers to MAX(Value);",
        "SQL": "SELECT DISTINCT T1.CountryCode, T1.Region FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode ORDER BY T2.Value DESC LIMIT 5",
        "difficulty": "simple"
    },
    {
        "question_id": 183,
        "prev_question_id": 2203,
        "db_id": "world_development_indicators",
        "question": "What is the percentage of countries in the Middle East and North Africa that have finished reporting on their real external debt?",
        "evidence": "percentage = divide(count(countrycode where\u00a0 ExternalDebtReportingStatus = 'Actual' ), count(countrycode))*100%; in the Middle East and North Africa refers to region = 'Middle East & North Africa'; have finished reporting on their real external debt refers to ExternalDebtReportingStatus = 'Actual'",
        "SQL": "SELECT CAST(SUM(CASE WHEN ExternalDebtReportingStatus = 'Actual' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(CountryCode) FROM Country WHERE region = 'Middle East & North Africa'",
        "difficulty": "moderate"
    },
    {
        "question_id": 184,
        "prev_question_id": 2247,
        "db_id": "movielens",
        "question": "List the different director IDs of the movies whose user rating is more than 4.",
        "evidence": "",
        "SQL": "SELECT DISTINCT T2.directorid FROM u2base AS T1 INNER JOIN movies2directors AS T2 ON T1.movieid = T2.movieid WHERE T1.rating > 4",
        "difficulty": "simple"
    },
    {
        "question_id": 185,
        "prev_question_id": 2274,
        "db_id": "movielens",
        "question": "What is the percentage of female audiences who viewed movies with rating 2?",
        "evidence": "The audience and users are the same meaning; Female users refers to u_gender = 'F'; Percentage of female users = count(female users) / count(all users); count(all users) = count(female users) + count(male users)",
        "SQL": "SELECT CAST(SUM(IIF(T2.u_gender = 'F', 1, 0)) AS REAL) * 100 / COUNT(T2.userid) FROM u2base AS T1 INNER JOIN users AS T2 ON T1.userid = T2.userid WHERE T1.rating = 2",
        "difficulty": "moderate"
    },
    {
        "question_id": 186,
        "prev_question_id": 2282,
        "db_id": "movielens",
        "question": "For the movies in English that are the oldest, how many of them have the lowest rating?",
        "evidence": "Year contains relative value, higer year value refers to newer date; Year = 4 refers to newest date, Year = 1 refer to oldest date; Lowest rating = 1\uff1bisEnglish = 'T' means English movie",
        "SQL": "SELECT COUNT(DISTINCT T1.movieid) FROM movies AS T1 INNER JOIN u2base AS T2 ON T1.movieid = T2.movieid WHERE T1.year = 1 AND T2.rating = 1 AND T1.isEnglish = 'T'",
        "difficulty": "simple"
    },
    {
        "question_id": 187,
        "prev_question_id": 2285,
        "db_id": "movielens",
        "question": "Please list the genre of the movies that are directed by the directors with the highest level of average revenue.",
        "evidence": "",
        "SQL": "SELECT T2.genre FROM directors AS T1 INNER JOIN movies2directors AS T2 ON T1.directorid = T2.directorid WHERE T1.avg_revenue = 4",
        "difficulty": "simple"
    },
    {
        "question_id": 188,
        "prev_question_id": 2301,
        "db_id": "movielens",
        "question": "List the cast and the director of the movie with the id 1949144.",
        "evidence": "",
        "SQL": "SELECT T1.actorid, T2.directorid FROM movies2actors AS T1 INNER JOIN movies2directors AS T2 ON T1.movieid = T2.movieid WHERE T1.movieid = 1949144",
        "difficulty": "simple"
    },
    {
        "question_id": 189,
        "prev_question_id": 2387,
        "db_id": "superstore",
        "question": "What are the order date and product name of the order ID CA-2011-137274 from the Central region?",
        "evidence": "",
        "SQL": "SELECT T1.`Order Date`, T2.`Product Name` FROM central_superstore AS T1 INNER JOIN product AS T2 ON T1.`Product ID` = T2.`Product ID` WHERE T1.`Order ID` = 'CA-2011-137274' AND T2.Region = 'Central'",
        "difficulty": "simple"
    },
    {
        "question_id": 190,
        "prev_question_id": 2459,
        "db_id": "superstore",
        "question": "List the customer's name from the South region with a standard class ship mode and sales greater than the 88% of the average sales of all orders.",
        "evidence": "sales greater than the 88% of the average sales of all orders refers to Sales > avg(Sales) * 0.88; South region refers to south_superstore",
        "SQL": "SELECT DISTINCT T2.`Customer Name` FROM south_superstore AS T1 INNER JOIN people AS T2 ON T1.`Customer ID` = T2.`Customer ID` WHERE T2.Region = 'South' AND T1.`Ship Mode` = 'Standard Class' AND 100 * T1.Sales / ( SELECT AVG(Sales) FROM south_superstore ) > 88",
        "difficulty": "challenging"
    },
    {
        "question_id": 191,
        "prev_question_id": 2471,
        "db_id": "shooting",
        "question": "For case number '134472-2015', list the last name of the officers involved and state the subject statuses.",
        "evidence": "",
        "SQL": "SELECT T2.last_name, T1.subject_statuses FROM incidents AS T1 INNER JOIN officers AS T2 ON T1.case_number = T2.case_number WHERE T1.case_number = '134472-2015'",
        "difficulty": "simple"
    },
    {
        "question_id": 192,
        "prev_question_id": 2547,
        "db_id": "app_store",
        "question": "What is the rating and the total Sentiment subjectivity score of \"Onefootball - Soccer Scores\"?",
        "evidence": "Onefootball - Soccer Scores refers to App = 'Onefootball - Soccer Scores';",
        "SQL": "SELECT T1.Rating, SUM(T2.Sentiment_Subjectivity) FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.App = 'Onefootball - Soccer Scores'",
        "difficulty": "simple"
    },
    {
        "question_id": 193,
        "prev_question_id": 2757,
        "db_id": "european_football_1",
        "question": "What is the name of the division in which Club Brugge and Genk competed on September 13, 2009?",
        "evidence": "September 13, 2009 refers to Date = '2009-09-13'; Club Brugge refers to HomeTeam; Genk refers to AwayTeam;",
        "SQL": "SELECT T2.name FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T1.Date = '2009-09-13' and T1.HomeTeam = 'Club Brugge' AND T1.AwayTeam = 'Genk'",
        "difficulty": "moderate"
    },
    {
        "question_id": 194,
        "prev_question_id": 2774,
        "db_id": "european_football_1",
        "question": "For a game had a score of 1-8 in the year of 2011, what division was that game in? Give the full name of the division.",
        "evidence": "2011 refers to season; a score of 1-8 refers to FTHG = '1' and FTAG = '8';",
        "SQL": "SELECT T2.division, T2.name FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T1.season = 2011 AND T1.FTHG = 1 AND T1.FTAG = 8",
        "difficulty": "simple"
    },
    {
        "question_id": 195,
        "prev_question_id": 2891,
        "db_id": "professional_basketball",
        "question": "Name the teams along with the coaches that went to 'Quarter Final' round in 1946.",
        "evidence": "team name refers to teams.name; coach refers to coachID; 'Quarter Final' round refers to round = 'QF'; in 1946 refers to year = 1946",
        "SQL": "SELECT DISTINCT T1.coachID, T3.name FROM coaches AS T1 JOIN series_post AS T2 ON T1.tmID = T2.tmIDWinner JOIN teams AS T3 ON T3.tmID = T1.tmID WHERE T2.round = 'QF' AND T2.year = 1946",
        "difficulty": "simple"
    },
    {
        "question_id": 196,
        "prev_question_id": 2897,
        "db_id": "professional_basketball",
        "question": "List the year, team and coach that with winning rate of above 75%.",
        "evidence": "team refers to teams.name; coach refers to coachID; winning rate of above 75% refers to divide(won, add(won, lost)) > 0.75",
        "SQL": "SELECT DISTINCT T1.year, T2.name, T1.coachID FROM coaches AS T1 INNER JOIN teams AS T2 ON T1.tmID = T2.tmID WHERE CAST(T1.won AS REAL) / CAST((T1.won + T1.lost) AS REAL) > 0.75",
        "difficulty": "challenging"
    },
    {
        "question_id": 197,
        "prev_question_id": 2909,
        "db_id": "professional_basketball",
        "question": "How many awards were given out in 2010 to players who attended high school in Chicago?",
        "evidence": "in 2010 refers to year = 2010; attended high school in Chicago refers to college = 'Chicago'",
        "SQL": "SELECT COUNT(T1.award) FROM awards_players AS T1 INNER JOIN players AS T2 ON T1.playerID = T2.playerID WHERE T1.year = 2010 AND T2.hsCity = 'Chicago'",
        "difficulty": "moderate"
    },
    {
        "question_id": 198,
        "prev_question_id": 2919,
        "db_id": "professional_basketball",
        "question": "Find the full name of the player born in Atlanta and have the highest number of blocks. Also, in which team did this player perform the most number of blocks?",
        "evidence": "full name refers to first_name, middle_name, last_name; born in Atlanta refers to birthCity = 'Atlanta'; the highest number of blocks refers to max(blocks); team refers to tmID",
        "SQL": "SELECT T1.firstName, T1.lastName, T2.tmID FROM players AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID WHERE T1.birthCity = 'Atlanta' ORDER BY T2.blocks DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 199,
        "prev_question_id": 2920,
        "db_id": "professional_basketball",
        "question": "State the name of teams ranked first five or more times and lost a league two or more times between 1980 and 2000?",
        "evidence": "name of team refers to teams.name; between 1980 and 2000 refers to year between 1980 and 2000; ranked first five or more times refers to count(rank = 1) > = 5; lost a league two or more times refers to lost > 2",
        "SQL": "SELECT T1.name FROM teams AS T1 INNER JOIN series_post AS T2 ON T1.tmID = T2.tmIDLoser AND T1.year = T2.year WHERE T1.rank < 5 AND T2.lgIDLoser > 2 AND T2.year BETWEEN 1980 AND 2000",
        "difficulty": "moderate"
    },
    {
        "question_id": 200,
        "prev_question_id": 2932,
        "db_id": "professional_basketball",
        "question": "What's the name of the player in 1996 who had the most steals that didn't play in the playoffs?",
        "evidence": "name of the player refers to first_name, middle_name, last_name; in 1996 refers to year = 1996; the most steals refers to max(steals); didn't play in the playoffs refers to playoff = null",
        "SQL": "SELECT T1.playerID FROM players AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID WHERE T2.year = 1996 AND T2.PostGP = 0 ORDER BY T2.steals DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 201,
        "prev_question_id": 2936,
        "db_id": "professional_basketball",
        "question": "What's the full name of the team that won the most games in 2001 but didn't make the playoffs?",
        "evidence": "full name of the team refers to teams.name; in 2001 refers to year = 2001; didn't make the playoffs refers to PostGP = 0; won the most games refers to max(won)",
        "SQL": "SELECT T2.tmID FROM players_teams AS T1 INNER JOIN teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.PostGP = 0 ORDER BY T2.won DESC LIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question_id": 202,
        "prev_question_id": 2980,
        "db_id": "shakespeare",
        "question": "Give the description for the Act No.2, Scene No.2 of Midsummer Night's Dream.",
        "evidence": "Act No.2 refers to Act = '2'; Scene No.2\u00a0 refers to Scene = '2'; Midsummer Night's Dream refers to Title = 'Midsummer Night''s Dream'",
        "SQL": "SELECT T2.Description FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T2.Act = '2' AND T2.Scene = '2' AND T1.Title = 'Midsummer Night''s Dream'",
        "difficulty": "simple"
    },
    {
        "question_id": 203,
        "prev_question_id": 3042,
        "db_id": "shakespeare",
        "question": "Please list any two character names in chapter 18708.",
        "evidence": "character names refers to CharName; chapter 18708 refers to chapter_id = 18708",
        "SQL": "SELECT T1.CharName FROM characters AS T1 INNER JOIN paragraphs AS T2 ON T1.id = T2.character_id WHERE T2.chapter_id = 18708 LIMIT 2",
        "difficulty": "simple"
    },
    {
        "question_id": 204,
        "prev_question_id": 3080,
        "db_id": "cars",
        "question": "Tell the origin country of car no.382.",
        "evidence": "origin country refers to country; car no.382 refers to ID = 382",
        "SQL": "SELECT DISTINCT T2.country FROM production AS T1 INNER JOIN country AS T2 ON T1.country = T2.origin WHERE T1.ID = 382",
        "difficulty": "moderate"
    },
    {
        "question_id": 205,
        "prev_question_id": 3081,
        "db_id": "cars",
        "question": "Which is the origin country of the $44274.40748 car?",
        "evidence": "origin country refers to country; the $44274.40748 car refers to price = 44274.40748",
        "SQL": "SELECT T3.country FROM price AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country WHERE T1.price = 44274.40748",
        "difficulty": "simple"
    },
    {
        "question_id": 206,
        "prev_question_id": 3084,
        "db_id": "cars",
        "question": "When was the $32650.65157 car introduced to the market? State the year.",
        "evidence": "the $32650.65157 car refers to price = 32650.65157; year refers to model",
        "SQL": "SELECT T1.model FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T2.price = '32650.65157'",
        "difficulty": "simple"
    },
    {
        "question_id": 207,
        "prev_question_id": 3089,
        "db_id": "cars",
        "question": "What is the percentage of Japanese cars in the database?",
        "evidence": "Japanese car refers to country = 'Japan'; percentage = divide(count(ID where country = 'Japan'), count(ID)) * 100%",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.country = 'Japan' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM production AS T1 INNER JOIN country AS T2 ON T1.country = T2.origin",
        "difficulty": "challenging"
    },
    {
        "question_id": 208,
        "prev_question_id": 3100,
        "db_id": "cars",
        "question": "Which year did Europe produce the most cars?",
        "evidence": "year refers to model_year; Europe refers to country = 'Europe'; the most cars refers to max(model_year)",
        "SQL": "SELECT T1.model_year FROM production AS T1 INNER JOIN country AS T2 ON T1.country = T2.origin WHERE T2.country = 'Europe' GROUP BY T1.model_year ORDER BY COUNT(T1.model_year) DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 209,
        "prev_question_id": 3117,
        "db_id": "cars",
        "question": "List the car's name with a price worth greater than 85% of the average price of all cars.",
        "evidence": "car's name refers to car_name; a price worth greater than 85% of the average price of all cars refers to price > multiply(avg(price), 0.85)",
        "SQL": "SELECT T1.car_name FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T2.price * 100 > ( SELECT AVG(price) * 85 FROM price )",
        "difficulty": "challenging"
    },
    {
        "question_id": 210,
        "prev_question_id": 3123,
        "db_id": "cars",
        "question": "Provide the name and model of the car with the highest price.",
        "evidence": "car's name refers to car_name; the highest price refers to max(price)",
        "SQL": "SELECT T1.car_name, T1.model FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID ORDER BY T2.price DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 211,
        "prev_question_id": 3133,
        "db_id": "cars",
        "question": "What is the average price of model 70 cars?",
        "evidence": "model 70 refers to model = 70; average price = avg(price) where model = 70",
        "SQL": "SELECT AVG(T2.price) FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T1.model = 70",
        "difficulty": "moderate"
    },
    {
        "question_id": 212,
        "prev_question_id": 3140,
        "db_id": "cars",
        "question": "How many Japanese cars weigh more than 2000 lbs?",
        "evidence": "Japanese car refers to country = 'Japan'; weigh more than 2000 lbs refers to weight > 2000",
        "SQL": "SELECT COUNT(*) FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country WHERE T3.country = 'Japan' AND T1.weight > 2000",
        "difficulty": "simple"
    },
    {
        "question_id": 213,
        "prev_question_id": 3147,
        "db_id": "donor",
        "question": "What is the total amount of donations in 2012.",
        "evidence": "total amount of donations refers to sum(donation_total); 2012 refers to donation_timestamp LIKE'2012%'",
        "SQL": "SELECT SUM(donation_total) FROM donations WHERE donation_timestamp LIKE '2012%'",
        "difficulty": "simple"
    },
    {
        "question_id": 214,
        "prev_question_id": 3155,
        "db_id": "donor",
        "question": "What is the project in which 320 students will be impacted if the project is funded? Name the project and state the project cost.",
        "evidence": "320 students will be impacted refers to students_reached = 320; name the project refers to title; project cost refers tp total_price_excluding_optional_support",
        "SQL": "SELECT T1.title, T2.total_price_excluding_optional_support FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.students_reached = 320",
        "difficulty": "moderate"
    },
    {
        "question_id": 215,
        "prev_question_id": 3184,
        "db_id": "donor",
        "question": "What is the prefix for the teacher who handled the 'Reading About Other Cultures' project?",
        "evidence": "Reading About Other Cultures' project refers to title = 'Reading About Other Cultures'; prefix for the teacher refers to teacher_prefix",
        "SQL": "SELECT T2.teacher_prefix FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.title LIKE 'Reading About Other Cultures'",
        "difficulty": "simple"
    },
    {
        "question_id": 216,
        "prev_question_id": 3192,
        "db_id": "donor",
        "question": "What is the donation message for donation ID a84dace1ff716f6f0c7af8ef9090a5d5?",
        "evidence": "",
        "SQL": "SELECT donation_message FROM donations WHERE donationid = 'a84dace1ff716f6f0c7af8ef9090a5d5'",
        "difficulty": "simple"
    },
    {
        "question_id": 217,
        "prev_question_id": 3206,
        "db_id": "donor",
        "question": "Which item provided to a project whose main subject area is Literacy & Language has the highest unit price?",
        "evidence": "main subject area refers to primary_focus_area = 'Literacy & Language'; highest unit price refers to Max(item_unit_price);",
        "SQL": "SELECT T1.item_name FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T2.primary_focus_area = 'Literacy & Language' ORDER BY T1.item_unit_price DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 218,
        "prev_question_id": 3209,
        "db_id": "donor",
        "question": "Is donor \u201c22cbc920c9b5fa08dfb331422f5926b5\u201d a teacher?",
        "evidence": "donor \u201c22cbc920c9b5fa08dfb331422f5926b5\u201d refers to donor_acctid = '22cbc920c9b5fa08dfb331422f5926b5'; is a teacher refers to is_teacher_acct;",
        "SQL": "SELECT DISTINCT is_teacher_acct FROM donations WHERE donor_acctid = '22cbc920c9b5fa08dfb331422f5926b5'",
        "difficulty": "simple"
    },
    {
        "question_id": 219,
        "prev_question_id": 3219,
        "db_id": "donor",
        "question": "What is the short description of the project that gives donation to school \u201c301c9bf0a45d159d162b65a93fddd74e\u201d?",
        "evidence": "school \u201c301c9bf0a45d159d162b65a93fddd74e\" refers to schoolid = '301c9bf0a45d159d162b65a93fddd74e';",
        "SQL": "SELECT T2.short_description FROM projects AS T1 INNER JOIN essays AS T2 ON T1.projectid = T2.projectid WHERE T1.schoolid = '301c9bf0a45d159d162b65a93fddd74e'",
        "difficulty": "moderate"
    },
    {
        "question_id": 220,
        "prev_question_id": 3236,
        "db_id": "donor",
        "question": "How many number of donations did the project 'A Rug For Reaching Readers' get?",
        "evidence": "A Rug For Reaching Readers'is the title;",
        "SQL": "SELECT SUM(T2.donation_total) FROM essays AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T1.title LIKE 'A Rug For Reaching Readers'",
        "difficulty": "simple"
    },
    {
        "question_id": 221,
        "prev_question_id": 3241,
        "db_id": "donor",
        "question": "What is the teacher's account ID for the project that got the donation at 11:38:43 on 2008/7/29 ?",
        "evidence": "donation at 11:38:43 on 2008/7/29 refers to donation_timestamp = '2008/7/29 11:38:43'; teacher's account ID refers to teacher_acctid;",
        "SQL": "SELECT T1.teacher_acctid FROM essays AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T2.donation_timestamp LIKE '2008-07-29 11:38:43.361'",
        "difficulty": "moderate"
    },
    {
        "question_id": 222,
        "prev_question_id": 3268,
        "db_id": "donor",
        "question": "What is the sum of the total donated amounts paid through Amazon?",
        "evidence": "paid through Amazon refers to payment_method = 'Amazon'; sum of the total donated amounts refers to SUM(donation_to_project,donation_optional_support)",
        "SQL": "SELECT SUM(donation_to_project) + SUM(donation_optional_support) FROM donations WHERE payment_method = 'amazon'",
        "difficulty": "simple"
    },
    {
        "question_id": 223,
        "prev_question_id": 3315,
        "db_id": "video_games",
        "question": "Which publisher has published the most games?",
        "evidence": "publisher refers to publisher_name; the most games refers to max(count(game_id))",
        "SQL": "SELECT T.publisher_name FROM ( SELECT T2.publisher_name, COUNT(DISTINCT T2.id) FROM game_publisher AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id GROUP BY T1.publisher_id ORDER BY COUNT(T2.id) DESC LIMIT 1 ) t",
        "difficulty": "moderate"
    },
    {
        "question_id": 224,
        "prev_question_id": 3330,
        "db_id": "video_games",
        "question": "State the publisher name of the game \"ModNation Racers\".",
        "evidence": "game \"ModNation Racers\" refers to game_name = 'ModNation Racers'",
        "SQL": "SELECT T1.publisher_name FROM publisher AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.publisher_id INNER JOIN game AS T3 ON T2.game_id = T3.id WHERE T3.game_name = 'ModNation Racers'",
        "difficulty": "moderate"
    },
    {
        "question_id": 225,
        "prev_question_id": 3334,
        "db_id": "video_games",
        "question": "Name of the publisher of the game id 10031.",
        "evidence": "name of publisher refers to publisher_name; the game id 10031 refers to game_id = '10031'",
        "SQL": "SELECT T2.publisher_name FROM game_publisher AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.game_id = 10031",
        "difficulty": "simple"
    },
    {
        "question_id": 226,
        "prev_question_id": 3371,
        "db_id": "video_games",
        "question": "Give the name of the publisher of the game ID 75.",
        "evidence": "name of publisher refers to publisher_name; the game ID 75 refers to game_id = 75",
        "SQL": "SELECT T2.publisher_name FROM game_publisher AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T1.game_id = 75",
        "difficulty": "simple"
    },
    {
        "question_id": 227,
        "prev_question_id": 3380,
        "db_id": "video_games",
        "question": "List the game IDs that were released in 2017.",
        "evidence": "game ID refers to game.id; released in 2017 refers to release_year = 2017",
        "SQL": "SELECT T.id FROM game_platform AS T WHERE T.release_year = 2017",
        "difficulty": "simple"
    },
    {
        "question_id": 228,
        "prev_question_id": 3403,
        "db_id": "video_games",
        "question": "What are the games that were released in 2006?",
        "evidence": "game refers to game_name; released in 2006 refers to release_year = 2006",
        "SQL": "SELECT T3.game_name FROM game_platform AS T1 INNER JOIN game_publisher AS T2 ON T1.game_publisher_id = T2.id INNER JOIN game AS T3 ON T2.game_id = T3.id WHERE T1.release_year = 2006",
        "difficulty": "moderate"
    },
    {
        "question_id": 229,
        "prev_question_id": 3406,
        "db_id": "video_games",
        "question": "List all the platform games.",
        "evidence": "platform game refers to genre_name = 'Platform'; game refers to game_name",
        "SQL": "SELECT T2.game_name FROM genre AS T1 INNER JOIN game AS T2 ON T1.id = T2.genre_id WHERE T1.genre_name = 'Platform'",
        "difficulty": "simple"
    },
    {
        "question_id": 230,
        "prev_question_id": 3411,
        "db_id": "video_games",
        "question": "What percentage of games are sports?",
        "evidence": "percentage = MULTIPLY(DIVIDE(SUM(genre_name = 'sport'), COUNT(game_name)), 100.0); sports refers to genre_name = 'sport';",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T1.genre_name = 'Sports' THEN T2.id ELSE NULL END) AS REAL) * 100 / COUNT(T2.id) FROM genre AS T1 INNER JOIN game AS T2 ON T1.id = T2.genre_id",
        "difficulty": "challenging"
    },
    {
        "question_id": 231,
        "prev_question_id": 3433,
        "db_id": "video_games",
        "question": "Indicate the name of all adventure games.",
        "evidence": "name of games refers to game_name; adventure games refers to game_name WHERE genre_name = 'Adventure';",
        "SQL": "SELECT T2.game_name FROM genre AS T1 INNER JOIN game AS T2 ON T1.id = T2.genre_id WHERE T1.genre_name = 'Adventure'",
        "difficulty": "simple"
    },
    {
        "question_id": 232,
        "prev_question_id": 3446,
        "db_id": "video_games",
        "question": "Calculate the percentage of games published by 'Brash Entertainment'?",
        "evidence": "percentage = MULTIPLY(DIVIDE(SUM(publisher_name = 'Brash Entertainment'), COUNT(game_id)), 100.0); 'Brash Entertainment' refers to publisher_name = 'Brash Entertainment';",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T1.publisher_name = 'Brash Entertainment' THEN T2.game_id ELSE NULL END) AS REAL) * 100 / COUNT(T2.game_id) FROM publisher AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.publisher_id",
        "difficulty": "challenging"
    },
    {
        "question_id": 233,
        "prev_question_id": 3463,
        "db_id": "video_games",
        "question": "List down the game platform IDs of games with a region ID of 1.",
        "evidence": "",
        "SQL": "SELECT T.game_platform_id FROM region_sales AS T WHERE T.region_id = 1",
        "difficulty": "simple"
    },
    {
        "question_id": 234,
        "prev_question_id": 3498,
        "db_id": "video_games",
        "question": "Give the genre of the following game titled 'Airlock' , 'Airline Tycoon' , and 'Airblade', respectively.",
        "evidence": "genre refers to genre_name; 'Airlock', 'Airline Tycoon' , and 'Airblade' refers to game_name IN ('Airlock', 'Airline Tycoon', 'Airblade');",
        "SQL": "SELECT T2.genre_name FROM game AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.id WHERE T1.game_name IN ('Airlock', 'Airline Tycoon', 'Airblade')",
        "difficulty": "moderate"
    },
    {
        "question_id": 235,
        "prev_question_id": 3508,
        "db_id": "authors",
        "question": "How many authors are affiliated with University of California Berkeley?",
        "evidence": "affiliated refers to Affiliation; 'University of California Berkeley' is the Affiliation",
        "SQL": "SELECT COUNT(Id) FROM Author WHERE Affiliation = 'University of California Berkeley'",
        "difficulty": "simple"
    },
    {
        "question_id": 236,
        "prev_question_id": 3529,
        "db_id": "authors",
        "question": "What is the title and journal homepage of the latest published paper?",
        "evidence": "latest published paper refers to Max(Year)",
        "SQL": "SELECT T1.Title, T2.HomePage FROM Paper AS T1 INNER JOIN Journal AS T2 ON T1.JournalId = T2.Id ORDER BY T1.Year DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 237,
        "prev_question_id": 3531,
        "db_id": "authors",
        "question": "What is the total number and conference's homepage of papers held in a conference with an ID of 187 during 1990 to 2000?",
        "evidence": "Id of 187 refers to ConferenceId = 187; during 1990 to 2000 refers to Year BETWEEN 1990 and 2000; total number of conference refers to Count(ConferenceId = 187)",
        "SQL": "SELECT COUNT(T2.ConferenceId), T1.HomePage FROM Conference AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.ConferenceId WHERE T2.Year BETWEEN 1990 AND 2000 AND T2.ConferenceId = 187",
        "difficulty": "moderate"
    },
    {
        "question_id": 238,
        "prev_question_id": 3534,
        "db_id": "authors",
        "question": "Among the papers with conference ID of 0, list down the authors of papers with a journal ID less than 100.",
        "evidence": "Conference ID of 0 refers to ConferenceId = 0; journal ID of less than 100 refers to JournalId < 100",
        "SQL": "SELECT DISTINCT T2.Name FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.ConferenceId = 0 AND T1.JournalId < 100",
        "difficulty": "simple"
    },
    {
        "question_id": 239,
        "prev_question_id": 3545,
        "db_id": "authors",
        "question": "Write down the title and affiliation of the preprinted paper written by \"Roger J.Marshal\".",
        "evidence": "\"Roger J. Marshall\" is the name of author; preprinted paper refers to ConferenceId = 0 AND JournalId = 0",
        "SQL": "SELECT T1.Title, T2.Affiliation FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T2.Name = 'Roger J. Marshall' AND T1.ConferenceID = 0 AND T1.JournalID = 0",
        "difficulty": "simple"
    },
    {
        "question_id": 240,
        "prev_question_id": 3587,
        "db_id": "authors",
        "question": "Please list the names of the authors of the paper \"Hypermethylation of the <I>TPEF/HPP1</I> Gene in Primary and Metastatic Colorectal Cancers\".",
        "evidence": "paper \"Hypermethylation of the <I>TPEF/HPP1</I> Gene in Primary and Metastatic Colorectal Cancers\" refers to Title = 'Hypermethylation of the <I>TPEF/HPP1</I> Gene in Primary and Metastatic Colorectal Cancers'",
        "SQL": "SELECT T2.Name FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.Title = 'Hypermethylation of the <I>TPEF/HPP1</I> Gene in Primary and Metastatic Colorectal Cancers'",
        "difficulty": "moderate"
    },
    {
        "question_id": 241,
        "prev_question_id": 3611,
        "db_id": "authors",
        "question": "Who is the author of the paper titled \"Open Sourcing Social Solutions (Building Communities of Change)\"?",
        "evidence": "'Open Sourcing Social Solutions (Building Communities of Change)' is a title of the paper; author refers to PaperAuthor.Name",
        "SQL": "SELECT T2.Name FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.Title = 'Open Sourcing Social Solutions (Building Communities of Change)'",
        "difficulty": "moderate"
    },
    {
        "question_id": 242,
        "prev_question_id": 3627,
        "db_id": "authors",
        "question": "For the paper which was presented by \"Zvezdan Proti\u0107\", was it preprinted?",
        "evidence": "Year = 0 means this paper is preprint, or not published",
        "SQL": "SELECT CASE WHEN T1.Year = 0 THEN 'TRUE' ELSE 'FALSE' END FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T2.Name = 'Zvezdan Proti\u0107' AND T1.ConferenceId = 0 AND T1.JournalId = 0",
        "difficulty": "moderate"
    },
    {
        "question_id": 243,
        "prev_question_id": 3644,
        "db_id": "authors",
        "question": "List all of the papers written by the author \"Karin Rengefors.\"",
        "evidence": "all the papers refers to Title; Karin Rengefors is the Name of the author",
        "SQL": "SELECT T2.Title FROM PaperAuthor AS T1 INNER JOIN Paper AS T2 ON T1.PaperId = T2.Id WHERE T1.Name = 'Karin Rengefors'",
        "difficulty": "simple"
    },
    {
        "question_id": 244,
        "prev_question_id": 3657,
        "db_id": "authors",
        "question": "List the name of the author that affiliated with University of Illinois Chicago?",
        "evidence": "'University of Illinois Chicago' is an affiliation",
        "SQL": "SELECT Name FROM Author WHERE Affiliation = 'University of Illinois Chicago'",
        "difficulty": "simple"
    },
    {
        "question_id": 245,
        "prev_question_id": 3683,
        "db_id": "college_completion",
        "question": "State the name and website of the institutes from the state with 209 graduate cohort in 2011.",
        "evidence": "name of the institutes refers to chronname; website refers to site; graduate cohort refers to grad_cohort; in 2011 refers to year = '2011';",
        "SQL": "SELECT T1.chronname, T1.site FROM institution_details AS T1 INNER JOIN state_sector_grads AS T2 ON T1.state = T2.state WHERE T2.year = 2011 AND T2.grad_cohort = 209",
        "difficulty": "moderate"
    },
    {
        "question_id": 246,
        "prev_question_id": 3684,
        "db_id": "college_completion",
        "question": "What is the number of female graduates between 2011 to 2013 from the state where 'Gateway Community College' is located?",
        "evidence": "female refers to gender = 'F'; graduates refers to grad_cohort; between 2011 to 2013 refers to year BETWEEN 2011 AND 2013; Gateway Community College refers to chronname = 'Gateway Community College';",
        "SQL": "SELECT COUNT(T2.grad_cohort) FROM institution_details AS T1 INNER JOIN state_sector_grads AS T2 ON T1.state = T2.state WHERE T2.year BETWEEN 2011 AND 2013 AND T1.chronname = 'Gateway Community College' AND T2.gender = 'F'",
        "difficulty": "challenging"
    },
    {
        "question_id": 247,
        "prev_question_id": 3695,
        "db_id": "college_completion",
        "question": "What is the ratio of Asian male graduates to Asian female graduates from Harvard University in 2013?",
        "evidence": "ratio = MULTIPLY(DIVIDE(SUM(grad_cohort WHERE Gender = 'M'), SUM( grad_cohort WHERE Gender = 'F')), 1.0); Asian refers to race = 'A'; female refers to gender = 'F'; graduates refers to grad_cohort; male refers to gender = 'M'; Harvard University refers to chronname = 'Harvard University'; in 2013 refers to year = 2013;",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.Gender = 'M' THEN T2.grad_cohort ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.Gender = 'F' THEN T2.grad_cohort ELSE 0 END) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T1.unitid = T2.unitid WHERE T1.chronname = 'Harvard University' AND T2.year = 2013 AND T2.race = 'A'",
        "difficulty": "challenging"
    },
    {
        "question_id": 248,
        "prev_question_id": 3708,
        "db_id": "college_completion",
        "question": "Among the public institutes in the state of Alabama, how many of them have over 30 students who graduated within 100 percent of normal/expected time in 2011?",
        "evidence": "public refers to control = 'Public'; over 30 students who graduated within 100 percent of normal/expected time refers to grad_100 > 30; in 2011 refers to year = 2011;",
        "SQL": "SELECT COUNT(T1.chronname) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T1.state = 'Alabama' AND T1.control = 'Public' AND T2.year = 2011 AND T2.grad_100 > 30",
        "difficulty": "challenging"
    },
    {
        "question_id": 249,
        "prev_question_id": 3709,
        "db_id": "college_completion",
        "question": "Please list the names of the institutes in the state of Alabama whose all graduates in total exceeded 500 in 2011?",
        "evidence": "names of the institutes refers to chronname; graduates refers to grad_cohort; grad_cohort > 500; in 2011 refers to year = 2011; all students refer to race = 'X'.",
        "SQL": "SELECT DISTINCT T1.chronname FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T1.state = 'Alabama' AND T2.year = 2011 AND T2.race = 'X' AND T2.grad_cohort > 500",
        "difficulty": "challenging"
    },
    {
        "question_id": 250,
        "prev_question_id": 3722,
        "db_id": "college_completion",
        "question": "Give the name of the 4-year public school in \"ID\" with the lowest graduation 100 value.",
        "evidence": "name of the school refers to chronname; 4-year refers to level = '4-year'; public refers to control = 'Public'; ID refers to state_abbr = 'ID'; lowest graduation 100 value refers to MIN(grad_100_value);",
        "SQL": "SELECT T1.chronname FROM institution_details AS T1 INNER JOIN state_sector_grads AS T2 ON T2.state = T1.state WHERE T2.state_abbr = 'ID' AND T1.level = '4-year' AND T1.control = 'Public' GROUP BY T1.chronname ORDER BY SUM(T1.grad_100_value) ASC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 251,
        "prev_question_id": 3741,
        "db_id": "college_completion",
        "question": "In female students in year 2012, how many of them from a state with number of schools ranges from 10 to 20?",
        "evidence": "female refers to gender = 'F'; number of schools refers to schools_count; schools_count BETWEEN 10 AND 20;",
        "SQL": "SELECT COUNT(T2.race) FROM state_sector_details AS T1 INNER JOIN state_sector_grads AS T2 ON T2.stateid = T1.stateid WHERE T2.gender = 'F' AND schools_count BETWEEN 10 AND 20 AND T2.year = 2012",
        "difficulty": "moderate"
    },
    {
        "question_id": 252,
        "prev_question_id": 3746,
        "db_id": "college_completion",
        "question": "In Harvard University, which year recorded the highest number of first-time, full-time, degree-seeking students in the cohort being tracked, minus any exclusions?",
        "evidence": "Harvard University refers to chronname = 'Harvard University'; highest number of first-time, full-time, degree-seeking students in the cohort being tracked, minus any exclusions refers to MAX(grad_cohort);",
        "SQL": "SELECT T2.year FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T1.chronname = 'Harvard University' GROUP BY T2.year ORDER BY SUM(T2.grad_cohort) DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 253,
        "prev_question_id": 3825,
        "db_id": "public_review_platform",
        "question": "How long was the review for business number 2 that user number 612 wrote?",
        "evidence": "how long was the review refers to review_length; business number refers to business_id; user number refers to user_id;",
        "SQL": "SELECT review_length FROM Reviews WHERE user_id = 612 AND review_stars = 5 AND business_id = 2",
        "difficulty": "simple"
    },
    {
        "question_id": 254,
        "prev_question_id": 3830,
        "db_id": "public_review_platform",
        "question": "How many \"cool\" compliments did user number 33 receive?",
        "evidence": "cool compliments refers to compliment_type = 'cool'; user number refers to user_id;",
        "SQL": "SELECT COUNT(T2.compliment_type) FROM Users_Compliments AS T1 INNER JOIN Compliments AS T2 ON T1.compliment_id = T2.compliment_id WHERE T1.user_id = 33 AND T2.compliment_type LIKE 'cool'",
        "difficulty": "simple"
    },
    {
        "question_id": 255,
        "prev_question_id": 3846,
        "db_id": "public_review_platform",
        "question": "How many reviews have the user whose ID is 3 posted?",
        "evidence": "",
        "SQL": "SELECT COUNT(review_length) FROM Reviews WHERE user_id = 3",
        "difficulty": "simple"
    },
    {
        "question_id": 256,
        "prev_question_id": 3888,
        "db_id": "public_review_platform",
        "question": "What is the category of the business with medium review length and highest review stars within business ID from 6 t0 9?",
        "evidence": "category refers to category_name; highest review stars refers to max(review_stars); business ID from 6 to 9 refers to business_id between 6 and 9",
        "SQL": "SELECT T4.category_name FROM Reviews AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id INNER JOIN Business_Categories AS T3 ON T2.business_id = T3.business_id INNER JOIN Categories AS T4 ON T3.category_id = T4.category_id WHERE T1.review_length LIKE 'Medium' AND T2.business_id BETWEEN 6 AND 9 ORDER BY T1.review_stars DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 257,
        "prev_question_id": 3901,
        "db_id": "public_review_platform",
        "question": "How many attributes ID owned by business ID 2?",
        "evidence": "",
        "SQL": "SELECT COUNT(attribute_id) FROM Business_Attributes WHERE business_id = 2",
        "difficulty": "simple"
    },
    {
        "question_id": 258,
        "prev_question_id": 3911,
        "db_id": "public_review_platform",
        "question": "What is the average number of review received by each business given that the user is an elite?",
        "evidence": "average review = Divide(Count(user_id), Count(business_id))",
        "SQL": "SELECT CAST(COUNT(T1.user_id) AS REAL) / COUNT(DISTINCT T1.business_id) FROM Reviews AS T1 INNER JOIN Elite AS T2 ON T1.user_id = T2.user_id",
        "difficulty": "moderate"
    },
    {
        "question_id": 259,
        "prev_question_id": 3915,
        "db_id": "public_review_platform",
        "question": "How many of the businesses are active?",
        "evidence": "active refers to active = 'true'",
        "SQL": "SELECT COUNT(business_id) FROM Business WHERE active LIKE 'True'",
        "difficulty": "simple"
    },
    {
        "question_id": 260,
        "prev_question_id": 3920,
        "db_id": "public_review_platform",
        "question": "What is the review length of user 60776 to business with business ID 1?",
        "evidence": "\"60776\" is the user_id",
        "SQL": "SELECT review_length FROM Reviews WHERE user_id = 60776 AND business_id = 1",
        "difficulty": "simple"
    },
    {
        "question_id": 261,
        "prev_question_id": 3924,
        "db_id": "public_review_platform",
        "question": "What is the attribute of the business with highest star rating?",
        "evidence": "highest star rating Max(stars); attribute of business refers to attribute_name",
        "SQL": "SELECT T3.attribute_name FROM Business AS T1 INNER JOIN Business_Attributes AS T2 ON T1.business_id = T2.business_id INNER JOIN Attributes AS T3 ON T2.attribute_id = T3.attribute_id ORDER BY T1.stars DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 262,
        "prev_question_id": 3947,
        "db_id": "public_review_platform",
        "question": "What city does the business came from where they received a high volume of check-ins from 12 am to 1 am on Saturday.",
        "evidence": "12 am refers to opening_time = '12AM'; 1 am refers to closing_time = '1AM'; on Saturday refers to day_of_week = 'Saturday'",
        "SQL": "SELECT T1.city FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T2.closing_time = '1AM' AND T2.opening_time = '12AM' AND T3.day_of_week = 'Saturday'",
        "difficulty": "challenging"
    },
    {
        "question_id": 263,
        "prev_question_id": 3964,
        "db_id": "public_review_platform",
        "question": "How many \"cool\" type compliments does user No. 41717 get?",
        "evidence": "\"cool\" type compliments refers to compliment_type = 'cool'; user No. 41717 refers to user_id = 41717",
        "SQL": "SELECT COUNT(T2.number_of_compliments) FROM Compliments AS T1 INNER JOIN Users_Compliments AS T2 ON T1.compliment_id = T2.compliment_id WHERE T1.compliment_type = 'cool' AND T2.user_id = 41717",
        "difficulty": "simple"
    },
    {
        "question_id": 264,
        "prev_question_id": 4016,
        "db_id": "public_review_platform",
        "question": "Among all the users who received the high number of compliments, what percent received the 'cute' type of compliment.",
        "evidence": "high number of compliments refers to number_of_compliments = 'High'; percentage = divide(count(user_id where compliment_type = 'cute'), count(user_id))*100%",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.compliment_type = 'cute' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.user_id) FROM Compliments AS T1 INNER JOIN Users_Compliments AS T2 ON T1.compliment_id = T2.compliment_id WHERE T2.number_of_compliments = 'High'",
        "difficulty": "challenging"
    },
    {
        "question_id": 265,
        "prev_question_id": 4030,
        "db_id": "public_review_platform",
        "question": "Calculate the percentage of businesses who located in Mesa. What is attribute value of these businesses.",
        "evidence": "percentage = divide(count(business where city = 'Mesa'), count(business)) * 100%",
        "SQL": "SELECT CAST(COUNT(T1.city) AS REAL) * 100 / ( SELECT COUNT(business_id) FROM Business ), T2.attribute_value FROM Business AS T1 INNER JOIN Business_Attributes AS T2 ON T1.business_id = T2.business_id WHERE T1.city = 'Mesa'",
        "difficulty": "challenging"
    },
    {
        "question_id": 266,
        "prev_question_id": 4043,
        "db_id": "public_review_platform",
        "question": "List out 10 business ID that are being reviewed the most by users and list out what are top 3 business categories.",
        "evidence": "being reviewed the most refers to MAX(user_id); business categories refer to category_name;",
        "SQL": "SELECT T2.business_id, T3.category_name FROM Reviews AS T1 INNER JOIN Business_categories AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T2.category_id = T3.category_id GROUP BY T2.business_id ORDER BY COUNT(T1.user_id) DESC LIMIT 10",
        "difficulty": "moderate"
    },
    {
        "question_id": 267,
        "prev_question_id": 4120,
        "db_id": "public_review_platform",
        "question": "List down the business ID with a high review count in Tempe.",
        "evidence": "Tempe is a city; high review count refers to review_count = 'High'",
        "SQL": "SELECT business_id FROM Business WHERE review_count = 'High' AND city = 'Tempe'",
        "difficulty": "simple"
    },
    {
        "question_id": 268,
        "prev_question_id": 4124,
        "db_id": "public_review_platform",
        "question": "What is the review length of user 11021 to business with business ID 3?",
        "evidence": "review length refers to review_length; user 11021 refers to user_id = 11021; business ID 3 refers to business_id = 3",
        "SQL": "SELECT review_length FROM Reviews WHERE user_id = 11021 AND business_id = 3",
        "difficulty": "simple"
    },
    {
        "question_id": 269,
        "prev_question_id": 4128,
        "db_id": "public_review_platform",
        "question": "What is the category and attributes of businesses with highest star rating?",
        "evidence": "category of the business refers to category_name; attributes of the business refers to attribute_name; the highest star rating refers to MAX(stars)",
        "SQL": "SELECT DISTINCT T3.category_name, T5.attribute_name FROM Business AS T1 INNER JOIN Business_Categories AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T2.category_id = T3.category_id INNER JOIN Business_Attributes AS T4 ON T2.business_id = T4.business_id INNER JOIN Attributes AS T5 ON T4.attribute_id = T5.attribute_id WHERE T1.stars = ( SELECT MAX(stars) FROM Business )",
        "difficulty": "challenging"
    },
    {
        "question_id": 270,
        "prev_question_id": 4133,
        "db_id": "public_review_platform",
        "question": "List the categories of active businesses in Glendale, AZ.",
        "evidence": "active business ID refers to active = 'true'; categories refers to category_name; Glendale is a city; AZ is a state",
        "SQL": "SELECT DISTINCT T3.category_name FROM Business_Categories AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T1.category_id = T3.category_id WHERE T2.active = 'true' AND T2.state = 'AZ' AND T2.city = 'Glendale'",
        "difficulty": "moderate"
    },
    {
        "question_id": 271,
        "prev_question_id": 4142,
        "db_id": "citeseer",
        "question": "For all words cited in paper ID 315017, state the other paper ID and class label which also cited those words.",
        "evidence": "",
        "SQL": "SELECT T1.class_label, T2.word_cited_id FROM paper AS T1 INNER JOIN content AS T2 ON T1.paper_id = T2.paper_id WHERE T1.paper_id = 315017",
        "difficulty": "simple"
    },
    {
        "question_id": 272,
        "prev_question_id": 4166,
        "db_id": "simpson_episodes",
        "question": "How many keywords does the episode that was aired on 2008/10/19 have?",
        "evidence": "aired on 2008/10/19 refers to air_date = '2008-10-19'",
        "SQL": "SELECT COUNT(T2.keyword) FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.air_date = '2008-10-19';",
        "difficulty": "simple"
    },
    {
        "question_id": 273,
        "prev_question_id": 4179,
        "db_id": "simpson_episodes",
        "question": "Write the title and all the keywords of the episode that was aired on 3/22/2009.",
        "evidence": "aired on 3/22/2009 refers to air_date = '2009-03-22'",
        "SQL": "SELECT T1.title, T2.keyword FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE T1.air_date = '2009-03-22';",
        "difficulty": "moderate"
    },
    {
        "question_id": 274,
        "prev_question_id": 4273,
        "db_id": "simpson_episodes",
        "question": "What are the top five most popular episodes?",
        "evidence": "most popular episodes refers to MAX(votes)",
        "SQL": "SELECT episode_id FROM Episode ORDER BY votes DESC LIMIT 5;",
        "difficulty": "simple"
    },
    {
        "question_id": 275,
        "prev_question_id": 4276,
        "db_id": "simpson_episodes",
        "question": "Please list all of the episodes that aired in 2008 that have the highest number of votes for the maximum star rating.",
        "evidence": "aired in 2008 refers to air_date like '2008%'; highest number of votes refers to MAX(votes); maximum star rating refers to stars = 10",
        "SQL": "SELECT T1.episode_id FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE SUBSTR(T1.air_date, 1, 4) = '2008' ORDER BY T2.votes DESC LIMIT 1;",
        "difficulty": "challenging"
    },
    {
        "question_id": 276,
        "prev_question_id": 4285,
        "db_id": "simpson_episodes",
        "question": "Which episode has the largest number of votes?",
        "evidence": "largest number of votes refers to MAX(votes)",
        "SQL": "SELECT episode FROM Episode WHERE votes = ( SELECT MAX(votes) FROM Episode );",
        "difficulty": "simple"
    },
    {
        "question_id": 277,
        "prev_question_id": 4307,
        "db_id": "simpson_episodes",
        "question": "List down the title of episode S20-E1, S20-E2 & S20-E3.",
        "evidence": "episode S20-E1, S20-E2 & S20-E3 refers to episode_id = 'S20-E1' and episode_id = 'S20-E2' and episode_id = 'S20-E3'",
        "SQL": "SELECT title FROM Episode WHERE episode_id IN ('S20-E1', 'S20-E2', 'S20-E3');",
        "difficulty": "simple"
    },
    {
        "question_id": 278,
        "prev_question_id": 4327,
        "db_id": "simpson_episodes",
        "question": "Calculate the total rating of winners in OFTA Television Award and WGA Award (TV).",
        "evidence": "winners refers to result = 'Winner'; in OFTA Television Award and WGA Award (TV) refers to award = 'OFTA Television Award' and award = 'WGA Award (TV)'",
        "SQL": "SELECT SUM(T2.rating) FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T1.award_category IN ('Jupiter Award ', 'WGA Award (TV)');",
        "difficulty": "moderate"
    },
    {
        "question_id": 279,
        "prev_question_id": 4339,
        "db_id": "simpson_episodes",
        "question": "List out the star scores of episode which has title of \"How the Test Was Won\".",
        "evidence": "star scores refers to stars",
        "SQL": "SELECT T2.stars FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T1.title = 'How the Test Was Won';",
        "difficulty": "simple"
    },
    {
        "question_id": 280,
        "prev_question_id": 4340,
        "db_id": "simpson_episodes",
        "question": "Among the episodes which have star score greater than 5, how many episodes have air date in 2008?",
        "evidence": "star score greater than 5 refers to stars > 5; have air date in 2008 refers to air_date LIKE '2008%'",
        "SQL": "SELECT COUNT(DISTINCT T2.episode_id) FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE strftime('%Y', T1.air_date) = '2008' AND T2.stars > 5;",
        "difficulty": "moderate"
    },
    {
        "question_id": 281,
        "prev_question_id": 4346,
        "db_id": "simpson_episodes",
        "question": "What are the keywords of the episodes which have the air date in 2008?",
        "evidence": "have air date in 2008 refers to air_date LIKE '2008%'",
        "SQL": "SELECT T2.keyword FROM Episode AS T1 INNER JOIN Keyword AS T2 ON T1.episode_id = T2.episode_id WHERE SUBSTR(T1.air_date, 1, 4) = '2008';",
        "difficulty": "simple"
    },
    {
        "question_id": 282,
        "prev_question_id": 4347,
        "db_id": "simpson_episodes",
        "question": "Among the episodes which have star score less than 8, how many episodes were aired in 2009?",
        "evidence": "star score less than 8 refers to stars < 8; aired in 2009 refers to air_date LIKE '2009%'",
        "SQL": "SELECT COUNT(DISTINCT T2.episode_id) FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE strftime('%Y', T1.air_date) = '2009' AND T2.stars < 8;",
        "difficulty": "moderate"
    },
    {
        "question_id": 283,
        "prev_question_id": 4353,
        "db_id": "simpson_episodes",
        "question": "What is the episode ID that received 2 stars and 9 votes?",
        "evidence": "2 stars refers to stars = 2; 9 votes refers to votes = 9",
        "SQL": "SELECT episode_id FROM Vote WHERE stars = 2 AND votes = 9;",
        "difficulty": "simple"
    },
    {
        "question_id": 284,
        "prev_question_id": 4355,
        "db_id": "simpson_episodes",
        "question": "List down the episode ID of episodes aired in 2008 with 5 stars and below.",
        "evidence": "aired in 2008 refers to air_date LIKE '2008%'; 5 stars and below refers to stars < 5",
        "SQL": "SELECT DISTINCT T1.episode_id FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE SUBSTR(T1.air_date, 1, 4) = '2008' AND T2.stars < 5;",
        "difficulty": "moderate"
    },
    {
        "question_id": 285,
        "prev_question_id": 4356,
        "db_id": "simpson_episodes",
        "question": "Among the episode with highest votes, what is the category credited to Carlton Batten?",
        "evidence": "highest votes refers to max(votes); to Carlton Batten refers to person = 'Carlton Batten'",
        "SQL": "SELECT T2.category FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id WHERE T2.person = 'Carlton Batten' AND T2.credited = 'true' ORDER BY T1.votes DESC LIMIT 1;",
        "difficulty": "moderate"
    },
    {
        "question_id": 286,
        "prev_question_id": 4362,
        "db_id": "simpson_episodes",
        "question": "List the stars of episodes aired in November 2008.",
        "evidence": "in November 2008 refers to air_date LIKE '2008-11%'",
        "SQL": "SELECT T2.stars FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE SUBSTR(T1.air_date, 1, 7) = '2008-11';",
        "difficulty": "simple"
    },
    {
        "question_id": 287,
        "prev_question_id": 4364,
        "db_id": "simpson_episodes",
        "question": "In episode with the highest votes, list the category of awards it is nominated for.",
        "evidence": "highest votes refers to max(votes); nominated refers to result = 'Nominee'",
        "SQL": "SELECT T1.award_category FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T1.result = 'Nominee' ORDER BY T2.votes DESC LIMIT 1;",
        "difficulty": "simple"
    },
    {
        "question_id": 288,
        "prev_question_id": 4422,
        "db_id": "student_loan",
        "question": "Which organization does student 313 belong to?",
        "evidence": "organization refers to organ",
        "SQL": "SELECT organ FROM enlist WHERE name = 'studenT113'",
        "difficulty": "simple"
    },
    {
        "question_id": 289,
        "prev_question_id": 4464,
        "db_id": "student_loan",
        "question": "How many of the students joined two organization?",
        "evidence": "joined two organization refers to COUNT(organ) > = 2",
        "SQL": "SELECT COUNT(name) FROM enlist WHERE organ >= 2",
        "difficulty": "simple"
    },
    {
        "question_id": 290,
        "prev_question_id": 4496,
        "db_id": "student_loan",
        "question": "Provide the enlisted organizations of student160 and status of his/her payment due.",
        "evidence": "enlisted organizations refers to organ; student160 is a name of student; status of his or her payment due is mentioned in no_payment_due; bool = 'pos' means the student has payment due; bool = 'neg' means the student has no payment due;",
        "SQL": "SELECT T1.organ, T2.bool FROM enlist AS T1 INNER JOIN no_payment_due AS T2 ON T2.name = T1.name WHERE T1.name = 'student160'",
        "difficulty": "moderate"
    },
    {
        "question_id": 291,
        "prev_question_id": 4538,
        "db_id": "student_loan",
        "question": "Provide the names of the students enlisted in the fire department.",
        "evidence": "department refers to organ; organ = 'fire_department';",
        "SQL": "SELECT name FROM enlist WHERE organ = 'fire_department'",
        "difficulty": "simple"
    },
    {
        "question_id": 292,
        "prev_question_id": 4597,
        "db_id": "mental_health_survey",
        "question": "How many questions did user No.5 answer?",
        "evidence": "user No.5 refers to userID = 5",
        "SQL": "SELECT COUNT(QuestionID) FROM Answer WHERE UserID = 5",
        "difficulty": "simple"
    },
    {
        "question_id": 293,
        "prev_question_id": 4650,
        "db_id": "disney",
        "question": "Who is the most productive director?",
        "evidence": "Most productive director refers to director where MAX(COUNT(name));",
        "SQL": "SELECT director FROM director GROUP BY director ORDER BY COUNT(name) DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 294,
        "prev_question_id": 4675,
        "db_id": "disney",
        "question": "List the directors of movies that feature a song.",
        "evidence": "movies that feature a song refer to movie_title where song is not NULL;",
        "SQL": "SELECT T2.director FROM characters AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name WHERE T1.song IS NOT NULL GROUP BY T2.director",
        "difficulty": "challenging"
    },
    {
        "question_id": 295,
        "prev_question_id": 4705,
        "db_id": "disney",
        "question": "Provide the name of the song from the movie directed by Ben Sharpsteen.",
        "evidence": "Ben Sharpsteen refers to director = 'Ben Sharpsteen';",
        "SQL": "SELECT T1.song FROM characters AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name WHERE T2.director = 'Ben Sharpsteen'",
        "difficulty": "moderate"
    },
    {
        "question_id": 296,
        "prev_question_id": 4736,
        "db_id": "legislator",
        "question": "How many current legislators do not have an account on ballotpedia.org ?",
        "evidence": "do not have an account on ballotpedia.org refers to ballotpedia_id IS NULL OR ballotpedia_id = ''",
        "SQL": "SELECT COUNT(*) FROM current WHERE ballotpedia_id = '' OR ballotpedia_id IS NULL",
        "difficulty": "simple"
    },
    {
        "question_id": 297,
        "prev_question_id": 4809,
        "db_id": "legislator",
        "question": "What is the middle name of the legislator whose birthday was on 8/24/1956?",
        "evidence": "birthday was on 8/24/1956 refers to birthday_bio = '1956-08-24'",
        "SQL": "SELECT middle_name FROM current WHERE birthday_bio = '1956-08-24'",
        "difficulty": "simple"
    },
    {
        "question_id": 298,
        "prev_question_id": 4845,
        "db_id": "legislator",
        "question": "What is the name of the legislator with the ID of W000059?",
        "evidence": "name of the legislator = first_name, last_name; ID of W000059 refers to bioguide_id = 'W000059';",
        "SQL": "SELECT first_name, last_name FROM historical WHERE bioguide_id = 'W000059'",
        "difficulty": "simple"
    },
    {
        "question_id": 299,
        "prev_question_id": 4937,
        "db_id": "olympics",
        "question": "Show the name of the competitor id 90991.",
        "evidence": "name of the competitor refers to full_name;",
        "SQL": "SELECT T1.full_name FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id WHERE T2.id = 90991",
        "difficulty": "simple"
    },
    {
        "question_id": 300,
        "prev_question_id": 4940,
        "db_id": "olympics",
        "question": "What is the percentage of male athletes from Estonia?",
        "evidence": "DIVIDE(COUNT(id where gender = 'M'), COUNT(id)) as percentage where region_name = 'Estonia';",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T3.gender = 'M' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T2.person_id) FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.region_name = 'Estonia'",
        "difficulty": "moderate"
    },
    {
        "question_id": 301,
        "prev_question_id": 4974,
        "db_id": "olympics",
        "question": "How many athletes from region 151 have won a medal?",
        "evidence": "athletes refer to person_id; region 151 refers to region_id = 151; won a medal refers to medal_id <> 4;",
        "SQL": "SELECT COUNT(T3.person_id) FROM competitor_event AS T1 INNER JOIN games_competitor AS T2 ON T1.competitor_id = T2.id INNER JOIN person_region AS T3 ON T2.person_id = T3.person_id WHERE T3.region_id = 151 AND T1.medal_id != 4",
        "difficulty": "challenging"
    },
    {
        "question_id": 302,
        "prev_question_id": 4999,
        "db_id": "olympics",
        "question": "Which region does the NOC code \"COL\" stand for?",
        "evidence": "region refers to region_name; NOC code \"COL\" refers to noc = 'COL';",
        "SQL": "SELECT region_name FROM noc_region WHERE noc = 'COL'",
        "difficulty": "simple"
    },
    {
        "question_id": 303,
        "prev_question_id": 5037,
        "db_id": "olympics",
        "question": "State the name of the city that held game id 3.",
        "evidence": "name of city refers to city_name",
        "SQL": "SELECT T2.city_name FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id WHERE T1.games_id = 3",
        "difficulty": "simple"
    },
    {
        "question_id": 304,
        "prev_question_id": 5044,
        "db_id": "olympics",
        "question": "What is the name of medal that competitor id 9 obtained?",
        "evidence": "name of medal refers to medal_name;",
        "SQL": "SELECT DISTINCT T1.medal_name FROM medal AS T1 INNER JOIN competitor_event AS T2 ON T1.id = T2.medal_id WHERE T2.competitor_id = 9",
        "difficulty": "simple"
    },
    {
        "question_id": 305,
        "prev_question_id": 5049,
        "db_id": "olympics",
        "question": "What is the name of the oldest competitor?",
        "evidence": "name refers to full_name; the oldest refers to MAX(age);",
        "SQL": "SELECT T1.full_name FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id ORDER BY T2.age DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 306,
        "prev_question_id": 5080,
        "db_id": "olympics",
        "question": "In the 2014 Winter game, what is the percentage of competitors who age 28 years old?",
        "evidence": "DIVIDE(COUNT(age = 28), COUNT(id)) as percentage where games_name = '2014 Winter';",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T2.age = 28 THEN 1 END) AS REAL) * 100 / COUNT(T2.person_id) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id WHERE T1.games_name = '2014 Winter'",
        "difficulty": "challenging"
    },
    {
        "question_id": 307,
        "prev_question_id": 5103,
        "db_id": "address",
        "question": "What are the names of the states whose postal point is not affiliated with any organization?",
        "evidence": "postal point is not affiliated with any organization refers to division is null",
        "SQL": "SELECT DISTINCT T2.name FROM zip_data AS T1 INNER JOIN state AS T2 ON T1.state = T2.abbreviation WHERE T1.division IS NULL",
        "difficulty": "simple"
    },
    {
        "question_id": 308,
        "prev_question_id": 5115,
        "db_id": "address",
        "question": "Give the location coordinates of the city with area code 636.",
        "evidence": "location coordinate refers to (latitude, longitude)",
        "SQL": "SELECT T2.latitude, T2.longitude FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.area_code = 636",
        "difficulty": "simple"
    },
    {
        "question_id": 309,
        "prev_question_id": 5118,
        "db_id": "address",
        "question": "How many counties are there in Virginia State?",
        "evidence": "\"Virginia\" is the state",
        "SQL": "SELECT COUNT(T2.county) FROM state AS T1 INNER JOIN country AS T2 ON T1.abbreviation = T2.state WHERE T1.name = 'Virginia'",
        "difficulty": "simple"
    },
    {
        "question_id": 310,
        "prev_question_id": 5150,
        "db_id": "address",
        "question": "Among the cities with an area code 939, which city has the highest Asian population?",
        "evidence": "highest asian population refers to Max(asian_population)",
        "SQL": "SELECT T2.city FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.area_code = 939 ORDER BY T2.asian_population DESC LIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question_id": 311,
        "prev_question_id": 5153,
        "db_id": "address",
        "question": "What is the area code of the city with the largest land area?",
        "evidence": "largest land area refers to Max(land_area)",
        "SQL": "SELECT T1.area_code FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.land_area = ( SELECT MAX(land_area) FROM zip_data )",
        "difficulty": "simple"
    },
    {
        "question_id": 312,
        "prev_question_id": 5166,
        "db_id": "address",
        "question": "Provide the city where zip code 19019 is located and the alias of that city.",
        "evidence": "",
        "SQL": "SELECT T2.city, T1.alias FROM alias AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.zip_code = 19019",
        "difficulty": "simple"
    },
    {
        "question_id": 313,
        "prev_question_id": 5197,
        "db_id": "address",
        "question": "What is the difference in the number of bad alias between Aguada city and Aguadilla city?",
        "evidence": "SUBTRACT(COUNT(bad_alias where city = 'Aguada'), COUNT(bad_alias where city = 'Aguadilla'));",
        "SQL": "SELECT COUNT(CASE WHEN T2.city = 'Aguada' THEN T1.bad_alias ELSE NULL END) - COUNT(CASE WHEN T2.city = 'Aguadilla' THEN T1.bad_alias ELSE NULL END) AS DIFFERENCE FROM avoid AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code",
        "difficulty": "challenging"
    },
    {
        "question_id": 314,
        "prev_question_id": 5202,
        "db_id": "address",
        "question": "Calculate the percentage of households in residential areas of countries over 10000.",
        "evidence": "DIVIDE(SUM(households > 10000), SUM(households)) as percentage;",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T2.households > 10000 THEN T1.zip_code ELSE NULL END) AS REAL) * 100 / COUNT(T1.zip_code) FROM country AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code",
        "difficulty": "moderate"
    },
    {
        "question_id": 315,
        "prev_question_id": 5213,
        "db_id": "address",
        "question": "List the area code of the city with the highest Hispanic population.",
        "evidence": "the highest Hispanic population refers to MAX(hispanic_population);",
        "SQL": "SELECT T1.area_code FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.hispanic_population = ( SELECT MAX(hispanic_population) FROM zip_data )",
        "difficulty": "simple"
    },
    {
        "question_id": 316,
        "prev_question_id": 5216,
        "db_id": "address",
        "question": "Among the cities with alias Ponce, what is the percentage of cities with a country level FIPS code of less than 20?",
        "evidence": "DIVIDE(COUNT(county_fips < 20), COUNT(county_fips)) as percentage where alias = 'Ponce';",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T2.county_fips < 20 THEN T2.zip_code ELSE NULL END) AS REAL) * 100 / COUNT(T2.zip_code) FROM alias AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.alias = 'Ponce'",
        "difficulty": "challenging"
    },
    {
        "question_id": 317,
        "prev_question_id": 5231,
        "db_id": "address",
        "question": "Calculate the percentage of congress representatives from the Democrat party. Among them, how many postal points are in the Hawaii state?",
        "evidence": "DIVIDE(COUNT(party = 'Democrat'), COUNT(congress_rep_id)) as percentage; postal points refer to zip_code; state = 'Hawaii';",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.party = 'Democrat' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*), SUM(CASE WHEN T1.state = 'Hawaii' THEN 1 ELSE 0 END) FROM congress AS T1 INNER JOIN zip_congress AS T2 ON T1.cognress_rep_id = T2.district",
        "difficulty": "challenging"
    },
    {
        "question_id": 318,
        "prev_question_id": 5239,
        "db_id": "beer_factory",
        "question": "Among the transactions made in July, 2014, how many of them were made by a male customer?",
        "evidence": "in July, 2014 refers to SUBSTR(TransactionDate, 1, 4) = '2014' AND SUBSTR(TransactionDate, 6, 2) = '07'; male customer refers to Gender = 'M';",
        "SQL": "SELECT COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN `transaction` AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Gender = 'M' AND STRFTIME('%Y-%m', T2.TransactionDate) = '2014-07'",
        "difficulty": "challenging"
    },
    {
        "question_id": 319,
        "prev_question_id": 5257,
        "db_id": "beer_factory",
        "question": "What is the phone number of the customer who owns the credit card of number 6011179359005380?",
        "evidence": "FALSE;",
        "SQL": "SELECT DISTINCT T1.PhoneNumber FROM customers AS T1 INNER JOIN `transaction` AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.CreditCardNumber = 6011179359005382",
        "difficulty": "simple"
    },
    {
        "question_id": 320,
        "prev_question_id": 5274,
        "db_id": "beer_factory",
        "question": "Which brewery does the most purchased root beer in 2016 belong to?",
        "evidence": "most purchased root beer refers to MAX(COUNT(BrandID)); in 2016 refers to PurchaseDate > = '2016-01-01' AND PurchaseDate < = '2016-12-31';",
        "SQL": "SELECT T2.BreweryName FROM rootbeer AS T1 INNER JOIN rootbeerbrand AS T2 ON T1.BrandID = T2.BrandID WHERE T1.PurchaseDate BETWEEN '2016-01-01' AND '2016-12-31' GROUP BY T2.BrandID ORDER BY COUNT(T1.BrandID) DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 321,
        "prev_question_id": 5291,
        "db_id": "beer_factory",
        "question": "How many brands of root beers are available in cans and contain corn syrup and artificial sweeteners?",
        "evidence": "available in cans refers to AvailableInCans = 'TRUE'; contain corn syrup refers to CornSyrup = 'TRUE'; contain artificial sweeteners refers to ArtificialSweetener = 'TRUE';",
        "SQL": "SELECT COUNT(BrandID) FROM rootbeerbrand WHERE CornSyrup = 'TRUE' AND ArtificialSweetener = 'TRUE' AND AvailableInCans = 'TRUE'",
        "difficulty": "moderate"
    },
    {
        "question_id": 322,
        "prev_question_id": 5320,
        "db_id": "beer_factory",
        "question": "How many brands of bottle root beer were purchased between 4/3/2015 and 10/26/2015?",
        "evidence": "bottle root beer refers to ContainerType = 'Bottle'; purchased between 4/3/2015 and 10/26/2015 refers to PurchaseDate BETWEEN '2015-04-23' AND '2015-10-26';",
        "SQL": "SELECT COUNT(BrandID) FROM rootbeer WHERE ContainerType = 'Bottle' AND PurchaseDate BETWEEN '2015-04-03' AND '2015-10-26'",
        "difficulty": "simple"
    },
    {
        "question_id": 323,
        "prev_question_id": 5346,
        "db_id": "beer_factory",
        "question": "Which of the root beer brand have the lowest purchase?",
        "evidence": "root beer brand refers to BrandName; lowest purchase refers to MIN(COUNT(BrandID));",
        "SQL": "SELECT T2.BrandName FROM rootbeer AS T1 INNER JOIN rootbeerbrand AS T2 ON T1.BrandID = T2.BrandID GROUP BY T2.BrandID ORDER BY COUNT(T1.BrandID) LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 324,
        "prev_question_id": 5366,
        "db_id": "sales",
        "question": "List down the product id for products with the highest quantity.",
        "evidence": "highest quantity refers to MAX(Quantity);",
        "SQL": "SELECT DISTINCT ProductID FROM Sales WHERE Quantity = ( SELECT MAX(Quantity) FROM Sales )",
        "difficulty": "simple"
    },
    {
        "question_id": 325,
        "prev_question_id": 5370,
        "db_id": "sales",
        "question": "What is the name of the product with the lowest quantity?",
        "evidence": "lowest quantity refers to MIN(Quantity);",
        "SQL": "SELECT T2.Name FROM Sales AS T1 INNER JOIN Products AS T2 ON T1.ProductID = T2.ProductID ORDER BY T1.Quantity LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 326,
        "prev_question_id": 5405,
        "db_id": "sales",
        "question": "How many sales transactions were given by the customer named Joe L. Lopez?",
        "evidence": "sales transactions refers to SalesID;",
        "SQL": "SELECT COUNT(T1.SalesID) FROM Sales AS T1 INNER JOIN Customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.FirstName = 'Joe' AND T2.MiddleInitial = 'L' AND T2.LastName = 'Lopez'",
        "difficulty": "simple"
    },
    {
        "question_id": 327,
        "prev_question_id": 5420,
        "db_id": "sales",
        "question": "List the full names of customers who have purchased products in quantity over 600.",
        "evidence": "full names of customers = FirstName, LastName; quantity over 600 refers to quantity > 600;",
        "SQL": "SELECT T1.FirstName, T1.LastName FROM Customers AS T1 INNER JOIN Sales AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Quantity > 600",
        "difficulty": "moderate"
    },
    {
        "question_id": 328,
        "prev_question_id": 5430,
        "db_id": "sales",
        "question": "Give the product ID and name of the product with the highest prices among the quantity ranges from 400 to 500.",
        "evidence": "highest prices refers to MAX(Price); quantity ranges from 400 to 500 refers to Quantity BETWEEN 400 AND 500;",
        "SQL": "SELECT T1.ProductID, T1.Name FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T2.quantity BETWEEN 400 AND 500 ORDER BY T1.Price DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 329,
        "prev_question_id": 5443,
        "db_id": "sales",
        "question": "What is the name of the most expensive product?",
        "evidence": "most expensive product refers to MAX(Price);",
        "SQL": "SELECT Name FROM Products WHERE Price = ( SELECT MAX(Price) FROM Products )",
        "difficulty": "simple"
    },
    {
        "question_id": 330,
        "prev_question_id": 5473,
        "db_id": "menu",
        "question": "How many menus with the name \"Waldorf Astoria\" have 4 pages?",
        "evidence": "4 pages refers to page_count = 4;",
        "SQL": "SELECT COUNT(*) FROM Menu WHERE name = 'Waldorf Astoria' AND page_count = 4",
        "difficulty": "simple"
    },
    {
        "question_id": 331,
        "prev_question_id": 5509,
        "db_id": "menu",
        "question": "List down the locations of menu sponsored by Norddeutscher Lloyd Bremen.",
        "evidence": "sponsored by Norddeutscher Lloyd Bremen refers to sponsor = 'Norddeutscher Lloyd Bremen';",
        "SQL": "SELECT location FROM Menu WHERE sponsor = 'Norddeutscher Lloyd Bremen'",
        "difficulty": "moderate"
    },
    {
        "question_id": 332,
        "prev_question_id": 5513,
        "db_id": "menu",
        "question": "Is \"c02c9a3b-6881-7080-e040-e00a180631aa\" the uuid for menu called \"The Biltmore\"?",
        "evidence": "if 'c02c9a3b-6881-7080-e040-e00a180631aa' can be found in uuid, it means the 'c02c9a3b-6881-7080-e040-e00a180631aa' is the uuid for the menu called The Biltmore; if 'c02c9a3b-6881-7080-e040-e00a180631aa' can not be found in uuid, it means the 'c02c9a3b-6881-7080-e040-e00a180631aa' is not the uuid for the menu called The Biltmore; The Biltmore is a name of menu;",
        "SQL": "SELECT CASE WHEN T2.uuid = 'c02c9a3b-6881-7080-e040-e00a180631aa' THEN 'yes' ELSE 'no' END AS yn FROM Menu AS T1 INNER JOIN MenuPage AS T2 ON T1.id = T2.menu_id WHERE T1.name = 'The Biltmore' AND T2.uuid = 'c02c9a3b-6881-7080-e040-e00a180631aa'",
        "difficulty": "moderate"
    },
    {
        "question_id": 333,
        "prev_question_id": 5523,
        "db_id": "menu",
        "question": "Calculate the total price of items for menu with ID 12882.",
        "evidence": "total price = SUM(price);",
        "SQL": "SELECT SUM(T2.price) FROM MenuPage AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.menu_page_id WHERE T1.menu_id = 12882",
        "difficulty": "simple"
    },
    {
        "question_id": 334,
        "prev_question_id": 5526,
        "db_id": "menu",
        "question": "What dishes made their first and last appearances in 1855 and 1900, respectively?",
        "evidence": "first appearance in 1855 refers to first_appeared = 1855; last appearance in 1900 refers to last_appeared = 1900;",
        "SQL": "SELECT name FROM Dish WHERE first_appeared = 1855 AND last_appeared = 1900",
        "difficulty": "simple"
    },
    {
        "question_id": 335,
        "prev_question_id": 5544,
        "db_id": "menu",
        "question": "On 1887-07-21, what was the event that lead to the creation of menu id 21380?",
        "evidence": "On 1887-07-21 refers to date = '1887-07-21';",
        "SQL": "SELECT event FROM Menu WHERE date = '1887-07-21' AND id = 21380",
        "difficulty": "simple"
    },
    {
        "question_id": 336,
        "prev_question_id": 5565,
        "db_id": "menu",
        "question": "To which menu does the menu page image ID5189412 belong? Please give its name.",
        "evidence": "FALSE;",
        "SQL": "SELECT T1.name FROM Menu AS T1 INNER JOIN MenuPage AS T2 ON T1.id = T2.menu_id WHERE T2.image_id = 5189412",
        "difficulty": "simple"
    },
    {
        "question_id": 337,
        "prev_question_id": 5570,
        "db_id": "menu",
        "question": "Please list the names of all the dishes on page 1 of menu ID12882.",
        "evidence": "page 1 refers to page_number = 1;",
        "SQL": "SELECT T3.name FROM MenuPage AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.menu_page_id INNER JOIN Dish AS T3 ON T2.dish_id = T3.id WHERE T1.menu_id = 12882 AND T1.page_number = 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 338,
        "prev_question_id": 5594,
        "db_id": "shipping",
        "question": "Who was the customer of shipment no.1275? Give the customer's name.",
        "evidence": "shipment no. 1275 refers to ship_id = 1275; customer name refers to cust_name",
        "SQL": "SELECT T1.cust_name FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id WHERE T2.ship_id = '1275'",
        "difficulty": "simple"
    },
    {
        "question_id": 339,
        "prev_question_id": 5596,
        "db_id": "shipping",
        "question": "Give the name of the driver of shipment no.1021.",
        "evidence": "shipment no. 1021 refers to ship_id = 1021; name refers to first_name, last_name",
        "SQL": "SELECT T2.first_name, T2.last_name FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE T1.ship_id = '1021'",
        "difficulty": "simple"
    },
    {
        "question_id": 340,
        "prev_question_id": 5597,
        "db_id": "shipping",
        "question": "Tell the name of the driver who received the shipment on 2017/11/5.",
        "evidence": "shipment on 2017/11/5 refers to ship_date = '2017-11/05'; name refers to first_name, last_name",
        "SQL": "SELECT T2.first_name, T2.last_name FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE T1.ship_date = '2017-11-05'",
        "difficulty": "moderate"
    },
    {
        "question_id": 341,
        "prev_question_id": 5600,
        "db_id": "shipping",
        "question": "For the shipment received by Leszek Kieltyka on 2017/9/25, what was its weight?",
        "evidence": "on 2017/9/25 refers to ship_date = '2017-09-25'",
        "SQL": "SELECT T1.weight FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE T2.first_name = 'Leszek' AND T2.last_name = 'Kieltyka' AND T1.ship_date = '2017-09-25'",
        "difficulty": "simple"
    },
    {
        "question_id": 342,
        "prev_question_id": 5605,
        "db_id": "shipping",
        "question": "What is the average number of shipments done by the Kenworth trucks?",
        "evidence": "\"Kenworth\" is the make of truck; average = Divide (Count(ship_id where make = 'Kenworth'), Count(truck_id where make = 'Kenworth))",
        "SQL": "SELECT CAST(COUNT(T2.ship_id) AS REAL) / COUNT(DISTINCT T1.truck_id) FROM truck AS T1 INNER JOIN shipment AS T2 ON T1.truck_id = T2.truck_id WHERE T1.make = 'Kenworth'",
        "difficulty": "moderate"
    },
    {
        "question_id": 343,
        "prev_question_id": 5661,
        "db_id": "shipping",
        "question": "Calculate the average number of shipments that Zachery Hicks shipped in year 2017.",
        "evidence": "in year 2017 refers to CAST(ship_date AS DATE) = 2017; percentage = Divide (Count(ship_id where first_name = 'Zachery' AND last_name = 'Hicks'), Count(ship_id)) * 100",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.first_name = 'Zachery' AND T2.last_name = 'Hicks' THEN T1.ship_id ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE STRFTIME('%Y', T1.ship_date) = '2017'",
        "difficulty": "challenging"
    },
    {
        "question_id": 344,
        "prev_question_id": 5664,
        "db_id": "shipping",
        "question": "What is the ship ID of shipments shipped to the city with the largest area?",
        "evidence": "city with largest area refers to Max(area)",
        "SQL": "SELECT T1.ship_id FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id ORDER BY T2.area DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 345,
        "prev_question_id": 5668,
        "db_id": "shipping",
        "question": "What is the address of the driver that delivers the shipment for the customer lives at 7052 Carroll Road, San Diego, California?",
        "evidence": "\"7052 Carroll Road\" is the address of customer; 'San Diego' is the city; 'California' is the state",
        "SQL": "SELECT T3.address FROM shipment AS T1 INNER JOIN customer AS T2 ON T1.cust_id = T2.cust_id INNER JOIN driver AS T3 ON T3.driver_id = T1.driver_id WHERE T2.address = '7052 Carroll Road' AND T2.city = 'San Diego' AND T2.state = 'CA'",
        "difficulty": "simple"
    },
    {
        "question_id": 346,
        "prev_question_id": 5670,
        "db_id": "shipping",
        "question": "What is the truck's model year used to ship the ship ID 1245?",
        "evidence": "",
        "SQL": "SELECT T1.model_year FROM truck AS T1 INNER JOIN shipment AS T2 ON T1.truck_id = T2.truck_id WHERE T2.ship_id = '1245'",
        "difficulty": "simple"
    },
    {
        "question_id": 347,
        "prev_question_id": 5681,
        "db_id": "shipping",
        "question": "Among the shipments to a customer from Texas, what percentage of the shipments shipped in 2017?",
        "evidence": "\"Texas\" refers to state = 'TX'; shipped in 2017 refers to CAST(ship_date AS DATE) = 2017; percentage = Divide (Count (ship_id where CAST(ship_date AS DATE) = 2017), Count (ship_id)) * 100",
        "SQL": "SELECT CAST(SUM(CASE WHEN STRFTIME('%Y', T1.ship_date) = '2017' THEN 1 ELSE 0 END) AS REAL ) * 100 / COUNT(*) FROM shipment AS T1 INNER JOIN customer AS T2 ON T1.cust_id = T2.cust_id WHERE T2.state = 'TX'",
        "difficulty": "challenging"
    },
    {
        "question_id": 348,
        "prev_question_id": 5682,
        "db_id": "shipping",
        "question": "Calculate the difference between the number of shipments shipped by the truck with the model year 2005 and model year 2006.",
        "evidence": "\"2005\" and \"2006\" are both model_year of truck; difference = Subtract (Count (ship_id where model_year = 2005), Count(ship_id where model_year = 2006))",
        "SQL": "SELECT SUM(CASE WHEN T1.model_year = '2005' THEN 1 ELSE 0 END) - SUM(CASE WHEN T1.model_year = '2006' THEN 1 ELSE 0 END) FROM truck AS T1 INNER JOIN shipment AS T2 ON T1.truck_id = T2.truck_id",
        "difficulty": "challenging"
    },
    {
        "question_id": 349,
        "prev_question_id": 5683,
        "db_id": "shipping",
        "question": "List the driver's name of the shipment with a weight greater than 95% of the average weight of all shipments.",
        "evidence": "weight greater than 95% of average weight refers to weight > Multiply (AVG(weight), 0.95); driver name refers to first_name, last_name",
        "SQL": "SELECT T2.first_name, T2.last_name FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id WHERE T1.weight * 100 > ( SELECT 95 * AVG(weight) FROM shipment )",
        "difficulty": "challenging"
    },
    {
        "question_id": 350,
        "prev_question_id": 5699,
        "db_id": "language_corpus",
        "question": "What is the wikipedia page id of Arqueozoologia?",
        "evidence": "page id refers to pid; Arqueozoologia refers to title = 'Arqueozoologia'",
        "SQL": "SELECT page FROM pages WHERE title = 'Arqueozoologia'",
        "difficulty": "simple"
    },
    {
        "question_id": 351,
        "prev_question_id": 5727,
        "db_id": "language_corpus",
        "question": "Calculate the average number of repetitions in the pairs of words in which the first word id is number 34.",
        "evidence": "Pair is a relationship of two words: w1st and w2nd, where w1st is word id of the first word and w2nd is a word id of the second word; the first word id number 34 refers to w1st = 34; repetition refers to occurrences or times this pair appears; DIVIDE(SUM(occurrences where w1st = 34), COUNT(occurrences where w1st = 34));",
        "SQL": "SELECT CAST(SUM(CASE WHEN w1st = 34 THEN 1 ELSE 0 END) AS REAL) / COUNT(w1st) FROM biwords",
        "difficulty": "moderate"
    },
    {
        "question_id": 352,
        "prev_question_id": 5740,
        "db_id": "language_corpus",
        "question": "What number of words are there on revision page 27457362?",
        "evidence": "This is not;",
        "SQL": "SELECT words FROM pages WHERE revision = 27457362",
        "difficulty": "simple"
    },
    {
        "question_id": 353,
        "prev_question_id": 5761,
        "db_id": "language_corpus",
        "question": "What is the locale of the language of the page titled \"Anys 90\"?",
        "evidence": "page titled \"Anys 90\" refers to title = 'Anys 90';",
        "SQL": "SELECT T1.locale FROM langs AS T1 INNER JOIN pages AS T2 ON T1.lid = T2.lid WHERE T2.title = 'Anys 90'",
        "difficulty": "simple"
    },
    {
        "question_id": 354,
        "prev_question_id": 5763,
        "db_id": "language_corpus",
        "question": "What is the locale of the language of the page titled \"Abril\"?",
        "evidence": "the page titled \"Abril\" refers to title = 'Abril';",
        "SQL": "SELECT T1.locale FROM langs AS T1 INNER JOIN pages AS T2 ON T1.lid = T2.lid WHERE T2.title = 'Abril'",
        "difficulty": "simple"
    },
    {
        "question_id": 355,
        "prev_question_id": 5766,
        "db_id": "language_corpus",
        "question": "List out the title of the word have id less than 20.",
        "evidence": "word have id less than 20 refers to wid < 20;",
        "SQL": "SELECT DISTINCT T1.title FROM pages AS T1 INNER JOIN pages_words AS T2 ON T1.pid = T2.pid WHERE T2.wid < 20",
        "difficulty": "simple"
    },
    {
        "question_id": 356,
        "prev_question_id": 5778,
        "db_id": "language_corpus",
        "question": "What is the locale of the language of the page titled \"Asclepi\"?",
        "evidence": "page titled \"Asclepi\" refers to title = 'Asclepi' ;",
        "SQL": "SELECT T2.locale FROM pages AS T1 INNER JOIN langs AS T2 ON T1.lid = T2.lid WHERE T1.title = 'Asclepi'",
        "difficulty": "simple"
    },
    {
        "question_id": 357,
        "prev_question_id": 5794,
        "db_id": "language_corpus",
        "question": "State the word ID for \"periodograma\".",
        "evidence": "word ID refers to wid; periodograma refers to word = 'periodograma'",
        "SQL": "SELECT wid FROM words WHERE word = 'periodograma'",
        "difficulty": "simple"
    },
    {
        "question_id": 358,
        "prev_question_id": 5801,
        "db_id": "language_corpus",
        "question": "Which word has the most appearances in the Wikipedia page revision ID No. 28278070? Give the word ID.",
        "evidence": "the most appearances refers to MAX(occurrences); revision ID No. 28278070 refers to revision = 28278070; word ID refers to wid",
        "SQL": "SELECT pid FROM pages_words WHERE pid = ( SELECT pid FROM pages WHERE revision = 28278070 ) ORDER BY occurrences DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 359,
        "prev_question_id": 5818,
        "db_id": "language_corpus",
        "question": "Among the biwords pairs with \"\u00e0bac\" as its first word, how many of them have an occurrence of over 10?",
        "evidence": "\u00e0bac refers to word = '\u00e0bac'; as first word refers to w1st; occurrence of over 10 refers to occurrences > 10",
        "SQL": "SELECT COUNT(T2.w2nd) FROM words AS T1 INNER JOIN biwords AS T2 ON T1.wid = T2.w1st WHERE T1.word = '\u00e0bac' AND T2.occurrences > 10",
        "difficulty": "simple"
    },
    {
        "question_id": 360,
        "prev_question_id": 5858,
        "db_id": "airline",
        "question": "What is the origin airport id that recorded the longest delay due to a late aircraft?",
        "evidence": "origin airport id refers to ORIGIN_AIRPORT_ID; longest delay due to a late aircraft refers to MAX(LATE_AIRCRAFT_DELAY);",
        "SQL": "SELECT ORIGIN_AIRPORT_ID FROM Airlines ORDER BY LATE_AIRCRAFT_DELAY DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 361,
        "prev_question_id": 5889,
        "db_id": "airline",
        "question": "List the tail number of flights that flew on August 17, 2018.",
        "evidence": "tail number refers to TAIL_NUM; on August 17, 2018 refers to FL_DATE = '2018/8/17';",
        "SQL": "SELECT TAIL_NUM FROM Airlines WHERE FL_DATE = '2018/8/17' GROUP BY TAIL_NUM",
        "difficulty": "simple"
    },
    {
        "question_id": 362,
        "prev_question_id": 5914,
        "db_id": "books",
        "question": "What is the name of the publisher of the book \"The Illuminati\"?",
        "evidence": "\"The Illuminati\" is the title of the book; name of publisher refers to publisher_name",
        "SQL": "SELECT T2.publisher_name FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T1.title = 'The Illuminati'",
        "difficulty": "simple"
    },
    {
        "question_id": 363,
        "prev_question_id": 5934,
        "db_id": "books",
        "question": "Which customer has made the most orders? Show his/her full name.",
        "evidence": "most order refers to Max(Count(order_id)); customer refers to first_name, last_name",
        "SQL": "SELECT T1.first_name, T1.last_name FROM customer AS T1 INNER JOIN cust_order AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.first_name, T1.last_name ORDER BY COUNT(*) DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 364,
        "prev_question_id": 5953,
        "db_id": "books",
        "question": "How many books did A.R. Braunmuller write?",
        "evidence": "\"A.R. Braunmuller\" is the author_name",
        "SQL": "SELECT COUNT(*) FROM author AS T1 INNER JOIN book_author AS T2 ON T1.author_id = T2.author_id WHERE T1.author_name = 'A.R. Braunmuller'",
        "difficulty": "simple"
    },
    {
        "question_id": 365,
        "prev_question_id": 5958,
        "db_id": "books",
        "question": "What is the total shipping cost of all the orders made by Page Holsey? Indicate how many of the said orders were ordered in 2022.",
        "evidence": "shipping cost refers to cost; ordered in 2022 refers to order_date LIKE '2022%'",
        "SQL": "SELECT SUM(T3.cost) FROM customer AS T1 INNER JOIN cust_order AS T2 ON T1.customer_id = T2.customer_id INNER JOIN shipping_method AS T3 ON T3.method_id = T2.shipping_method_id WHERE T1.first_name = 'Page' AND T1.last_name = 'Holsey' AND STRFTIME('%Y', T2.order_date) = '2022'",
        "difficulty": "moderate"
    },
    {
        "question_id": 366,
        "prev_question_id": 5959,
        "db_id": "books",
        "question": "What is the name of the publisher with publisher ID 22?",
        "evidence": "name of publisher refers to publisher_name",
        "SQL": "SELECT publisher_name FROM publisher WHERE publisher_id = 22",
        "difficulty": "simple"
    },
    {
        "question_id": 367,
        "prev_question_id": 5963,
        "db_id": "books",
        "question": "What is the title of the most expensive book?",
        "evidence": "most expensive book refers to Max(price)",
        "SQL": "SELECT T1.title FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id ORDER BY T2.price DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 368,
        "prev_question_id": 5983,
        "db_id": "books",
        "question": "Sum the total price of the orders for The Prophet book.",
        "evidence": "\"The Prophet\" is the title of the book: total price refers to Sum(price)",
        "SQL": "SELECT SUM(T1.price) FROM order_line AS T1 INNER JOIN book AS T2 ON T1.book_id = T2.book_id WHERE T2.title = 'The Prophet'",
        "difficulty": "simple"
    },
    {
        "question_id": 369,
        "prev_question_id": 5991,
        "db_id": "books",
        "question": "What is the average price for the order line?",
        "evidence": "average price refers to AVG(price)",
        "SQL": "SELECT AVG(price) FROM order_line",
        "difficulty": "simple"
    },
    {
        "question_id": 370,
        "prev_question_id": 6003,
        "db_id": "books",
        "question": "What is the book with the most orders?",
        "evidence": "books refers to title; the most orders refers to Max(Count(order_id))",
        "SQL": "SELECT T2.title FROM order_line AS T1 INNER JOIN book AS T2 ON T1.book_id = T2.book_id GROUP BY T2.title ORDER BY COUNT(T1.book_id) DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 371,
        "prev_question_id": 6052,
        "db_id": "books",
        "question": "Name the publisher of the oldest book.",
        "evidence": "publisher refers to publisher_name;\u00a0 oldest book refers to Min(publication_date)",
        "SQL": "SELECT T2.publisher_name FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id ORDER BY T1.publication_date ASC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 372,
        "prev_question_id": 6098,
        "db_id": "books",
        "question": "How many books were published by Brava in 2006?",
        "evidence": "\"Brava\" is the publisher_name; in 2006 refers to SUBSTR(publication_date, 1, 4) = '2006'",
        "SQL": "SELECT COUNT(*) FROM book AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.publisher_id WHERE T2.publisher_name = 'Brava' AND STRFTIME('%Y', T1.publication_date) = '2006'",
        "difficulty": "moderate"
    },
    {
        "question_id": 373,
        "prev_question_id": 6106,
        "db_id": "books",
        "question": "Write down the author's name of the book most recently published.",
        "evidence": "author's name refers to author_name; book most recently published refers to Max(publication_date)",
        "SQL": "SELECT T3.author_name FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id ORDER BY T1.publication_date DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 374,
        "prev_question_id": 6108,
        "db_id": "books",
        "question": "Among the books purchased by less than 1 dollar, what is the difference between the number of books with less than 500 pages and books with greater than 500 pages?",
        "evidence": "book purchased by less than 1 dollar refers to price < 1; books with less than 500 pages refers to num_pages < 500; greater than 500 pages refers to num_pages > 500; Difference = Subtract (Count(book_id where num_pages < 500), Count(book_id where num_pages > 500))",
        "SQL": "SELECT SUM(CASE WHEN T1.num_pages < 500 THEN 1 ELSE 0 END) - SUM(CASE WHEN T1.num_pages > 500 THEN 1 ELSE 0 END) AS dif FROM book AS T1 INNER JOIN order_line AS T2 ON T1.book_id = T2.book_id WHERE T2.price < 1",
        "difficulty": "challenging"
    },
    {
        "question_id": 375,
        "prev_question_id": 6116,
        "db_id": "food_inspection_2",
        "question": "Among the facilities that have undergone at least one inspection in 2010, how many of them are in ward no.42?",
        "evidence": "in 2010 refers to inspection_date like '2010%'; in ward no.42 refers to ward = 42",
        "SQL": "SELECT COUNT(DISTINCT T1.license_no) FROM inspection AS T1 INNER JOIN establishment AS T2 ON T1.license_no = T2.license_no WHERE strftime('%Y', T1.inspection_date) = '2010' AND T2.ward = 42",
        "difficulty": "simple"
    },
    {
        "question_id": 376,
        "prev_question_id": 6136,
        "db_id": "food_inspection_2",
        "question": "State the salary of the employee who did the most inspections.",
        "evidence": "the most inspections refers to max(count(employee_id))",
        "SQL": "SELECT T1.salary FROM employee AS T1 INNER JOIN ( SELECT T.employee_id, COUNT(T.inspection_id) FROM inspection AS T GROUP BY T.employee_id ORDER BY COUNT(T.inspection_id) DESC LIMIT 1 ) AS T2 ON T1.employee_id = T2.employee_id",
        "difficulty": "moderate"
    },
    {
        "question_id": 377,
        "prev_question_id": 6147,
        "db_id": "food_inspection_2",
        "question": "What are the names of the businesses that passed with conditions in May 2012?",
        "evidence": "name of business refers to dba_name; passed with conditions refers to results = 'Pass w/ Conditions'; in May 2012 refers to inspection_date like '2012-05%'",
        "SQL": "SELECT DISTINCT T2.dba_name FROM inspection AS T1 INNER JOIN establishment AS T2 ON T1.license_no = T2.license_no WHERE strftime('%Y-%m', T1.inspection_date) = '2012-05' AND T1.results = 'Pass w/ Conditions'",
        "difficulty": "challenging"
    },
    {
        "question_id": 378,
        "prev_question_id": 6150,
        "db_id": "food_inspection_2",
        "question": "How much is the salary of the employee who has the highest number of inspections done of all time?",
        "evidence": "the highest number of inspections done refers to max(count(employee_id))",
        "SQL": "SELECT T1.salary FROM employee AS T1 INNER JOIN ( SELECT employee_id, COUNT(inspection_id) FROM inspection GROUP BY employee_id ORDER BY COUNT(inspection_id) DESC LIMIT 1 ) AS T2 ON T1.employee_id = T2.employee_id",
        "difficulty": "moderate"
    },
    {
        "question_id": 379,
        "prev_question_id": 6170,
        "db_id": "food_inspection_2",
        "question": "What are the inspection description and inspector's comments in the inspection ID 164795?",
        "evidence": "inspection description refers to Description; inspector's comment refers to inspector_comment",
        "SQL": "SELECT T1.Description, T2.inspector_comment FROM inspection_point AS T1 INNER JOIN violation AS T2 ON T1.point_id = T2.point_id WHERE T2.inspection_id = 44247",
        "difficulty": "simple"
    },
    {
        "question_id": 380,
        "prev_question_id": 6174,
        "db_id": "food_inspection_2",
        "question": "How many inspections were done in January 2011?",
        "evidence": "in January 2011 refers to inspection_date like '2011-01%'",
        "SQL": "SELECT COUNT(inspection_id) FROM inspection WHERE strftime('%Y-%m', inspection_date) = '2011-01'",
        "difficulty": "simple"
    },
    {
        "question_id": 381,
        "prev_question_id": 6194,
        "db_id": "food_inspection_2",
        "question": "What is the inspection result for inspection done by Thomas Langley?",
        "evidence": "inspection result refers to results",
        "SQL": "SELECT DISTINCT T2.results FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T1.first_name = 'Thomas' AND T1.last_name = 'Langley'",
        "difficulty": "simple"
    },
    {
        "question_id": 382,
        "prev_question_id": 6205,
        "db_id": "food_inspection_2",
        "question": "Did license number 1222441 pass the inspection and what is the zip code number of it?",
        "evidence": "license number 1222441 refers to license_no = 1222441; result of the inspection refers to results; zip code number refers to zip",
        "SQL": "SELECT DISTINCT T2.results, T1.zip FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T1.license_no = 1222441",
        "difficulty": "moderate"
    },
    {
        "question_id": 383,
        "prev_question_id": 6209,
        "db_id": "food_inspection_2",
        "question": "How many employees have salary greater than 70000 but fail the inspection?",
        "evidence": "salary greater than 70000 refers to salary > 70000; fail the inspection refers to results = 'Fail'",
        "SQL": "SELECT COUNT(DISTINCT T1.employee_id) FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T2.results = 'Fail' AND T1.salary > 70000",
        "difficulty": "moderate"
    },
    {
        "question_id": 384,
        "prev_question_id": 6215,
        "db_id": "food_inspection_2",
        "question": "What is the title of the employee that inspected the establishment with license number 1576687?",
        "evidence": "license number 1576687 refers to license_no = 1576687",
        "SQL": "SELECT DISTINCT T1.title FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T2.license_no = 1576687",
        "difficulty": "challenging"
    },
    {
        "question_id": 385,
        "prev_question_id": 6216,
        "db_id": "food_inspection_2",
        "question": "How many inspection points with serious point level that have no fine?",
        "evidence": "serious point level refers to point_level = 'Serious '; have no fine refers to fine = 0",
        "SQL": "SELECT COUNT(DISTINCT T2.point_id) FROM inspection_point AS T1 INNER JOIN violation AS T2 ON T1.point_id = T2.point_id WHERE T1.point_level = 'Serious ' AND T2.fine = 0",
        "difficulty": "simple"
    },
    {
        "question_id": 386,
        "prev_question_id": 6218,
        "db_id": "food_inspection_2",
        "question": "What is the percentage of establishments with a risk level of 1 among all of the establishments that passed the inspection?",
        "evidence": "a risk level of 1 refers to risk_level = 1; pass the inspection refers to results = 'Pass'; percentage = divide(sum(license_no where risk_level = 1), count(license_no)) * 100% where results = 'Pass'",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T1.risk_level = 1 THEN T1.license_no END) AS REAL) * 100 / COUNT(T1.license_no) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T2.results = 'Pass'",
        "difficulty": "challenging"
    },
    {
        "question_id": 387,
        "prev_question_id": 6223,
        "db_id": "food_inspection_2",
        "question": "Among the list of employees, what is the total number of supervisors?",
        "evidence": "supervisor refers to title = 'Supervisor'",
        "SQL": "SELECT COUNT(employee_id) FROM employee WHERE title = 'Supervisor'",
        "difficulty": "simple"
    },
    {
        "question_id": 388,
        "prev_question_id": 6227,
        "db_id": "food_inspection_2",
        "question": "Who is the employee that receives 82700 as their salary?",
        "evidence": "employee name refers to first_name, last_name; receives 82700 as salary refers to salary = 82700",
        "SQL": "SELECT first_name, last_name FROM employee WHERE salary = 82700",
        "difficulty": "simple"
    },
    {
        "question_id": 389,
        "prev_question_id": 6230,
        "db_id": "food_inspection_2",
        "question": "List point level of inspections with no fine.",
        "evidence": "no fine refers to fine = 0",
        "SQL": "SELECT DISTINCT T1.point_level FROM inspection_point AS T1 INNER JOIN violation AS T2 ON T1.point_id = T2.point_id WHERE T2.fine = 0",
        "difficulty": "simple"
    },
    {
        "question_id": 390,
        "prev_question_id": 6248,
        "db_id": "food_inspection_2",
        "question": "Among the establishments that paid a 500 fine, what is the percentage of restaurants?",
        "evidence": "a 500 fine refers to fine = 500; restaurant refers to facility_type = 'Restaurant'; percentage = divide(count(license_no where facility_type = 'Restaurant'), count(license_no)) * 100% where fine = 500",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T1.facility_type = 'Restaurant' THEN T1.license_no END) AS REAL) * 100 / COUNT(T1.facility_type) FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no INNER JOIN violation AS T3 ON T2.inspection_id = T3.inspection_id WHERE T3.fine = 500",
        "difficulty": "challenging"
    },
    {
        "question_id": 391,
        "prev_question_id": 6283,
        "db_id": "coinmarketcap",
        "question": "What is the name of the coin with the highest price?",
        "evidence": "the highest price refers to max(price)",
        "SQL": "SELECT T1.name FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T2.price = ( SELECT MAX(price) FROM historical )",
        "difficulty": "simple"
    },
    {
        "question_id": 392,
        "prev_question_id": 6506,
        "db_id": "retail_world",
        "question": "In 1996, how many orders were from customers in the UK?",
        "evidence": "in 1996 refers to YEAR (OrderDate) = 1996; 'UK' is the Country;",
        "SQL": "SELECT COUNT(T1.CustomerID) FROM Customers AS T1 INNER JOIN Orders AS T2 ON T1.CustomerID = T2.CustomerID WHERE STRFTIME('%Y', T2.OrderDate) = '1996' AND T1.Country = 'UK'",
        "difficulty": "simple"
    },
    {
        "question_id": 393,
        "prev_question_id": 6677,
        "db_id": "retails",
        "question": "Please list the order comments of all the orders made by customers in the household segment.",
        "evidence": "orders in household segment refer to o_orderkey where c_mktsegment = 'HOUSEHOLD'; order comments refer to o_comment;",
        "SQL": "SELECT T1.o_comment FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T2.c_mktsegment = 'HOUSEHOLD'",
        "difficulty": "simple"
    },
    {
        "question_id": 394,
        "prev_question_id": 6683,
        "db_id": "retails",
        "question": "Among all the customers in Germany, how many of them have an account balance of over 1000?",
        "evidence": "Germany is the name of the nation which refers to n_name = 'GERMANY'; account balance of over 1000 refers to c_acctbal > 1000;",
        "SQL": "SELECT COUNT(T1.c_custkey) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T2.n_name = 'GERMANY' AND T1.c_acctbal > 1000",
        "difficulty": "challenging"
    },
    {
        "question_id": 395,
        "prev_question_id": 6691,
        "db_id": "retails",
        "question": "Which region does \"Supplier#000000129\" belong to?",
        "evidence": "\"Supplier#000000129\" is the name of the supplier which refers to s_name; Which region refers to r_name;",
        "SQL": "SELECT T3.r_name FROM nation AS T1 INNER JOIN supplier AS T2 ON T1.n_nationkey = T2.s_nationkey INNER JOIN region AS T3 ON T1.n_regionkey = T3.r_regionkey WHERE T2.s_name = 'Supplier#000000129'",
        "difficulty": "moderate"
    },
    {
        "question_id": 396,
        "prev_question_id": 6795,
        "db_id": "retails",
        "question": "How many suppliers from Germany have left a comment with 'carefully regular packages'?",
        "evidence": "Germany is nation name which refers to n_name = 'GERMANY'; comment with 'carefully regular packages' refers to s_comment LIKE 'carefully regular packages%'",
        "SQL": "SELECT COUNT(T1.s_suppkey) FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey WHERE T2.n_name = 'GERMANY' AND T1.s_comment LIKE '%carefully regular packages%'",
        "difficulty": "simple"
    },
    {
        "question_id": 397,
        "prev_question_id": 6807,
        "db_id": "retails",
        "question": "What is the difference between the number of returned items and not returned items with the full price of under 16947.7?",
        "evidence": "full price of under 16947.7 refers to l_extendedprice < 16947.7; returned item refers to l_returnflag = 'R'; not returned item refers to l_returnflag = 'A' OR l_returnflag = 'N'; difference = subtract(count(l_linenumber where l_returnflag = 'A' OR l_returnflag = 'N'), count(l_linenumber where l_returnflag = 'R')) where l_extendedprice < 16947.7",
        "SQL": "SELECT SUM(IIF(l_returnflag = 'A', 1, 0)) - SUM(IIF(l_returnflag = 'N', 1, 0)) AS diff FROM lineitem WHERE l_extendedprice < 16947.7",
        "difficulty": "challenging"
    },
    {
        "question_id": 398,
        "prev_question_id": 6816,
        "db_id": "retails",
        "question": "Which nation and region does the Customer#000000008 come from?",
        "evidence": "nation refers to n_name; region refers to r_name; Customer#000000008 refers to c_name = 'Customer#000000008'",
        "SQL": "SELECT T1.n_name, T3.r_name FROM nation AS T1 INNER JOIN customer AS T2 ON T1.n_nationkey = T2.c_nationkey INNER JOIN region AS T3 ON T1.n_regionkey = T3.r_regionkey WHERE T2.c_name = 'Customer#000000008'",
        "difficulty": "moderate"
    },
    {
        "question_id": 399,
        "prev_question_id": 6849,
        "db_id": "retails",
        "question": "Please indicate the names of the customers whose order with a total price over $300000.",
        "evidence": "customer name refers to c_name; a total price over $300000 refers to o_totalprice > 300000",
        "SQL": "SELECT T2.c_name FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T1.o_totalprice > 300000",
        "difficulty": "simple"
    },
    {
        "question_id": 400,
        "prev_question_id": 6869,
        "db_id": "retails",
        "question": "Please list the names of all the suppliers for the part \"hot spring dodger dim light\".",
        "evidence": "supplier name refers to s_name; part \"hot spring dodger dim light\" refers to p_name = 'hot spring dodger dim light'",
        "SQL": "SELECT T2.s_name FROM partsupp AS T1 INNER JOIN supplier AS T2 ON T1.ps_suppkey = T2.s_suppkey INNER JOIN part AS T3 ON T1.ps_partkey = T3.p_partkey WHERE T3.p_name = 'hot spring dodger dim light'",
        "difficulty": "moderate"
    },
    {
        "question_id": 401,
        "prev_question_id": 6880,
        "db_id": "retails",
        "question": "What is the total quantity of the part \"hot spring dodger dim light\" ordered in all orders?",
        "evidence": "total quantity refers to sum(l_quantity); part \"hot spring dodger dim light\" refers to p_name = 'hot spring dodger dim light'",
        "SQL": "SELECT SUM(T1.p_partkey) FROM part AS T1 INNER JOIN lineitem AS T2 ON T1.p_partkey = T2.l_partkey WHERE T1.p_name = 'hot spring dodger dim light'",
        "difficulty": "simple"
    },
    {
        "question_id": 402,
        "prev_question_id": 6918,
        "db_id": "ice_hockey_draft",
        "question": "What is the name of the tallest player?",
        "evidence": "tallest player refers to MAX(height_in_cm);",
        "SQL": "SELECT T1.PlayerName FROM PlayerInfo AS T1 INNER JOIN height_info AS T2 ON T1.height = T2.height_id ORDER BY T2.height_in_cm DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 403,
        "prev_question_id": 6969,
        "db_id": "ice_hockey_draft",
        "question": "What is the percentage of Russian players who have a height of under 200 inch?",
        "evidence": "percentage = MULTIPLY(DIVIDE(SUM(nation = 'Russia' WHERE height_in_cm < 200), COUNT(ELITEID)), 100); Russian refers to nation = 'Russia'; players refers to PlayerName; height of under 200 inch refers to height_in_cm < 200;",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T1.height_in_cm < 200 AND T2.nation = 'Russia' THEN T2.ELITEID ELSE NULL END) AS REAL) * 100 / COUNT(T2.ELITEID) FROM height_info AS T1 INNER JOIN PlayerInfo AS T2 ON T1.height_id = T2.height",
        "difficulty": "moderate"
    },
    {
        "question_id": 404,
        "prev_question_id": 6983,
        "db_id": "ice_hockey_draft",
        "question": "Calculate the average weight in pounds of all players drafted by Arizona Coyotes.",
        "evidence": "average weight in pounds = AVG(weight_in_lbs); weight in pounds refers to weight_in_lbs; players refers to PlayerName; drafted by Arizona Coyotes refers to overallby = 'Arizona Coyotes';",
        "SQL": "SELECT CAST(SUM(T1.weight_in_lbs) AS REAL) / COUNT(T2.ELITEID) FROM weight_info AS T1 INNER JOIN PlayerInfo AS T2 ON T1.weight_id = T2.weight WHERE T2.overallby = 'Arizona Coyotes'",
        "difficulty": "challenging"
    },
    {
        "question_id": 405,
        "prev_question_id": 7041,
        "db_id": "works_cycles",
        "question": "Which job title has the lowest pay?",
        "evidence": "lowest pay refers to min(Rate);",
        "SQL": "SELECT T1.JobTitle FROM Employee AS T1 INNER JOIN EmployeePayHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID ORDER BY T2.Rate ASC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 406,
        "prev_question_id": 7052,
        "db_id": "works_cycles",
        "question": "Please list the job titles of the employees who has a document that has been approved.",
        "evidence": "document has been approved refers to Status = 2",
        "SQL": "SELECT DISTINCT T2.BusinessEntityID, T2.JobTitle FROM Document AS T1 INNER JOIN Employee AS T2 ON T1.Owner = T2.BusinessEntityID WHERE T1.Status = 2",
        "difficulty": "simple"
    },
    {
        "question_id": 407,
        "prev_question_id": 7054,
        "db_id": "works_cycles",
        "question": "Among the employees whose pay frequencies are the highest, how many of them are married?",
        "evidence": "married refers to MaritalStatus = M; highest pay frequency refers to PayFrequency = 2",
        "SQL": "SELECT COUNT(T1.BusinessEntityID) FROM EmployeePayHistory AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.MaritalStatus = 'M' AND T1.PayFrequency = ( SELECT PayFrequency FROM EmployeePayHistory ORDER BY PayFrequency DESC LIMIT 1 )",
        "difficulty": "moderate"
    },
    {
        "question_id": 408,
        "prev_question_id": 7059,
        "db_id": "works_cycles",
        "question": "What is the pay rate of the employee who has the longest vacation hours?",
        "evidence": "longest vacation hour refers to max(VacationHours)",
        "SQL": "SELECT T1.Rate FROM EmployeePayHistory AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID ORDER BY T2.VacationHours DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 409,
        "prev_question_id": 7060,
        "db_id": "works_cycles",
        "question": "How many employees with a pay rate of over 35 have more than 10 sick leave hours?",
        "evidence": "more than 10 sick leave hours refers to SickLeaveHours>10; pay rate over 35 refers to Rate>35;",
        "SQL": "SELECT COUNT(T1.BusinessEntityID) FROM EmployeePayHistory AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.SickLeaveHours > 10 AND T1.Rate > 35",
        "difficulty": "simple"
    },
    {
        "question_id": 410,
        "prev_question_id": 7062,
        "db_id": "works_cycles",
        "question": "How many male employees have the job position of sales person?",
        "evidence": "Sales person refers to PersonType = 'SP'; Male refers to Gender = 'M';",
        "SQL": "SELECT COUNT(T1.BusinessEntityID) FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.Gender = 'M' AND T2.PersonType = 'SP'",
        "difficulty": "simple"
    },
    {
        "question_id": 411,
        "prev_question_id": 7063,
        "db_id": "works_cycles",
        "question": "What is the job position of the oldest employee?",
        "evidence": "Oldest employee refers to Max ( Subtract((now())-BirthDate));",
        "SQL": "SELECT T2.PersonType FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID ORDER BY T1.BirthDate ASC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 412,
        "prev_question_id": 7064,
        "db_id": "works_cycles",
        "question": "What is the name style of the employee with the lowest pay rate?",
        "evidence": "lowest pay rate refers to Min(Rate);",
        "SQL": "SELECT T2.NameStyle FROM EmployeePayHistory AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.Rate IS NOT NULL ORDER BY T1.Rate ASC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 413,
        "prev_question_id": 7091,
        "db_id": "works_cycles",
        "question": "What is the credit rating of the company whose average lead time is 16 days for a standard price of 18.9900 and whose last receipt date is August 27, 2011?",
        "evidence": "last receipt date is August 17, 2011 refers to LastReceiptDate> = '2011-08-17 00:00:00' and LastReceiptDate < '2011-08-18 00:00:00';",
        "SQL": "SELECT T2.CreditRating FROM ProductVendor AS T1 INNER JOIN Vendor AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.StandardPrice = 18.9900 AND T1.AverageLeadTime = 16 AND STRFTIME('%Y-%m-%d', T1.LastReceiptDate) = '2011-08-27'",
        "difficulty": "challenging"
    },
    {
        "question_id": 414,
        "prev_question_id": 7098,
        "db_id": "works_cycles",
        "question": "If we discount the products that do not have any type of offer, how many different products have been sold in an amount greater than 2 units per order?",
        "evidence": "do not have any type of offer refers to Description = 'No Discount'; sold in an amount greater than 2 refers to OrderQty>2",
        "SQL": "SELECT COUNT(DISTINCT T1.ProductID) FROM SalesOrderDetail AS T1 INNER JOIN SpecialOfferProduct AS T2 ON T1.SpecialOfferID = T2.SpecialOfferID INNER JOIN SpecialOffer AS T3 ON T2.SpecialOfferID = T3.SpecialOfferID WHERE T1.OrderQty > 2 AND T1.UnitPriceDiscount = 0",
        "difficulty": "moderate"
    },
    {
        "question_id": 415,
        "prev_question_id": 7101,
        "db_id": "works_cycles",
        "question": "What is the product cost end date with the highest weight in grams?",
        "evidence": "in grams refers to WeightUnitMeasureCode = 'G'",
        "SQL": "SELECT T2.EndDate FROM Product AS T1 INNER JOIN ProductCostHistory AS T2 ON T1.ProductID = T2.ProductID WHERE T1.WeightUnitMeasureCode = 'G' ORDER BY T1.Weight DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 416,
        "prev_question_id": 7141,
        "db_id": "works_cycles",
        "question": "Which year is credit card No.9648's Expiration Year?",
        "evidence": "Expiration year refers to ExpYear",
        "SQL": "SELECT ExpYear FROM CreditCard WHERE CreditCardID = 9648",
        "difficulty": "simple"
    },
    {
        "question_id": 417,
        "prev_question_id": 7146,
        "db_id": "works_cycles",
        "question": "What is the Shift start time for Shift ID No.2?",
        "evidence": "",
        "SQL": "SELECT StartTime FROM Shift WHERE ShiftID = '2'",
        "difficulty": "simple"
    },
    {
        "question_id": 418,
        "prev_question_id": 7157,
        "db_id": "works_cycles",
        "question": "For the document Control Assistant who was born on 1975/12/25, how many private documents did he/she have?",
        "evidence": "Document Control Assistant refers\u00a0to the\u00a0JobTitle = 'Document Control Assistant'; born on 1975/12/25 refers to BirthDate = '1975-12-25'; private documents indicate that DocumentSummary is null",
        "SQL": "SELECT COUNT(T2.BusinessEntityID) FROM Document AS T1 INNER JOIN Employee AS T2 ON T1.Owner = T2.BusinessEntityID WHERE T2.JobTitle = 'Document Control Assistant' AND T2.BirthDate = '1975-12-25' AND T1.DocumentSummary IS NULL",
        "difficulty": "simple"
    },
    {
        "question_id": 419,
        "prev_question_id": 7165,
        "db_id": "works_cycles",
        "question": "What's Kevin A Wright's email address?",
        "evidence": "",
        "SQL": "SELECT T2.EmailAddress FROM Person AS T1 INNER JOIN EmailAddress AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.FirstName = 'Kevin' AND T1.MiddleName = 'A' AND T1.LastName = 'Wright'",
        "difficulty": "simple"
    },
    {
        "question_id": 420,
        "prev_question_id": 7167,
        "db_id": "works_cycles",
        "question": "What kind of transaction type for the \"HL Road Frame - Black, 48\" order happened in 2012/12/13?",
        "evidence": "Transactiontype = 'w' means 'WorkOrder'; transactiontype = 's' means 'SalesOrder'; transactiontype = 'P' means 'PurchaseOrder'; happened in refers to TransactionDate",
        "SQL": "SELECT T1.TransactionType FROM TransactionHistory AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T2.Name = 'HL Road Frame - Black, 48' AND STRFTIME('%Y-%m-%d',T1.TransactionDate) = '2013-07-31'",
        "difficulty": "challenging"
    },
    {
        "question_id": 421,
        "prev_question_id": 7169,
        "db_id": "works_cycles",
        "question": "How is the Credit Rating for company whose rowguid is \"33671A4E-DF2B-4879-807B-E3F930DD5C0C\"?",
        "evidence": "CreditRating = 1 means 'Superior'; CreditRating = 2 means 'Excellent'; CreditRating = 3 means 'Above average'; CreditRating = 4 means 'Superior'; CreditRating = 5 means 'Below average'",
        "SQL": "SELECT T1.CreditRating FROM Vendor AS T1 INNER JOIN BusinessEntity AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.rowguid = '33671A4E-DF2B-4879-807B-E3F930DD5C0C'",
        "difficulty": "simple"
    },
    {
        "question_id": 422,
        "prev_question_id": 7215,
        "db_id": "works_cycles",
        "question": "What is the full name of the Vice President of Production?",
        "evidence": "full name = FirstName+MiddleName+LastName; Vice President of Production is a JobTitle;",
        "SQL": "SELECT T2.FirstName, T2.MiddleName, T2.LastName FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.JobTitle = 'Vice President of Production'",
        "difficulty": "moderate"
    },
    {
        "question_id": 423,
        "prev_question_id": 7243,
        "db_id": "works_cycles",
        "question": "Who is the sales person in charge of the territory with the id \"9\"? Provide their full name.",
        "evidence": "full name = FirstName+MiddleName+LastName;",
        "SQL": "SELECT T2.FirstName, T2.MiddleName, T2.LastName FROM SalesPerson AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.TerritoryID = 9",
        "difficulty": "challenging"
    },
    {
        "question_id": 424,
        "prev_question_id": 7253,
        "db_id": "works_cycles",
        "question": "What is the average age of the sales agents in the company by 12/31/2009?",
        "evidence": "average age as of 12/31/2009 = AVG(SUBTRACT(2009, year(BirthDate));",
        "SQL": "SELECT AVG(2009 - STRFTIME('%Y', T2.BirthDate)) FROM Person AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.PersonType = 'SP'",
        "difficulty": "challenging"
    },
    {
        "question_id": 425,
        "prev_question_id": 7283,
        "db_id": "works_cycles",
        "question": "Among the products that are purchased, how many of them have never received the highest rating?",
        "evidence": "product that are purchased refers to MakeFlag = 0; never received highest rating refers to Rating! = 5\n\n",
        "SQL": "SELECT COUNT(T1.ProductID) FROM ProductReview AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID WHERE T2.MakeFlag = 0 AND T1.Rating != 5",
        "difficulty": "moderate"
    },
    {
        "question_id": 426,
        "prev_question_id": 7341,
        "db_id": "works_cycles",
        "question": "What categories of offers qualify for group discounts for resellers?",
        "evidence": "resellers refers to Category = 'Reseller';",
        "SQL": "SELECT Type FROM SpecialOffer WHERE Category = 'Reseller'",
        "difficulty": "simple"
    },
    {
        "question_id": 427,
        "prev_question_id": 7353,
        "db_id": "works_cycles",
        "question": "What are the sales reasons for order 43718?",
        "evidence": "order refers to SalesOrderID",
        "SQL": "SELECT T2.Name FROM SalesOrderHeaderSalesReason AS T1 INNER JOIN SalesReason AS T2 ON T1.SalesReasonID = T2.SalesReasonID WHERE T1.SalesOrderID = 43718",
        "difficulty": "simple"
    },
    {
        "question_id": 428,
        "prev_question_id": 7380,
        "db_id": "works_cycles",
        "question": "Which product allows the company to make the highest profit on a single item among those that are the fastest to manufacture? Indicate the rating of the product if there any.",
        "evidence": "profit on a single item = SUBTRACT(ListPrice, StandardCost); length of time to manufacture refers to DaysToManufacture; fastest to manucature refers to MIN(DaysToManufacture);",
        "SQL": "SELECT T1.Name, T2.Rating FROM Product AS T1 INNER JOIN ProductReview AS T2 ON T1.ProductID = T2.ProductID WHERE T1.DaysToManufacture = ( SELECT DaysToManufacture FROM Product ORDER BY DaysToManufacture LIMIT 1 ) ORDER BY T1.ListPrice - T1.StandardCost DESC LIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question_id": 429,
        "prev_question_id": 7445,
        "db_id": "works_cycles",
        "question": "What are locations of the work order \"35493\"?",
        "evidence": "",
        "SQL": "SELECT T2.Name FROM WorkOrderRouting AS T1 INNER JOIN Location AS T2 ON T1.LocationID = T2.LocationID WHERE T1.WorkOrderID = 35493",
        "difficulty": "simple"
    },
    {
        "question_id": 430,
        "prev_question_id": 7510,
        "db_id": "image_and_language",
        "question": "What are the id of all the objects belonging to the transportation class?",
        "evidence": "id of all the objects belonging to the transportation class refers to OBJ_CLASS_ID and OBJ_CLASS IN ('bus', 'train', 'aeroplane', 'car', 'etc.')",
        "SQL": "SELECT OBJ_CLASS_ID FROM OBJ_CLASSES WHERE OBJ_CLASS IN ('bus', 'train', 'aeroplane', 'car', 'etc')",
        "difficulty": "simple"
    },
    {
        "question_id": 431,
        "prev_question_id": 7519,
        "db_id": "image_and_language",
        "question": "How many prediction classes with \"has\" captions are there for image id 3050?",
        "evidence": "prediction classes with \"has\" captions refers to PRED_CLASS = 'has'; image id 3050 refers to IMG_ID = 3050",
        "SQL": "SELECT COUNT(T2.PRED_CLASS_ID) FROM IMG_REL AS T1 INNER JOIN PRED_CLASSES AS T2 ON T1.PRED_CLASS_ID = T2.PRED_CLASS_ID WHERE T1.IMG_ID = 3050 AND T2.PRED_CLASS = 'has'",
        "difficulty": "moderate"
    },
    {
        "question_id": 432,
        "prev_question_id": 7524,
        "db_id": "image_and_language",
        "question": "What is the object class of the image with a bounding box of 0, 0, 135, 212?",
        "evidence": "object class of the image refers to OBJ_CLASS; bounding box of 0, 0, 135, 212 refers to X = 0 AND Y = 0 AND W = 135 AND H = 212",
        "SQL": "SELECT T1.OBJ_CLASS FROM OBJ_CLASSES AS T1 INNER JOIN IMG_OBJ AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.X = 0 AND T2.Y = 0 AND T2.W = 135 AND T2.H = 212",
        "difficulty": "moderate"
    },
    {
        "question_id": 433,
        "prev_question_id": 7529,
        "db_id": "image_and_language",
        "question": "On image no. 5, name the attributes that are composed of multiple objects.",
        "evidence": "image no. 5 refers to IMG_ID = 5; name the attributes refers to ATT_CLASS; multiple objects refers to count(ATT_CLASS) > = 2",
        "SQL": "SELECT T2.ATT_CLASS FROM IMG_OBJ_ATT AS T1 INNER JOIN ATT_CLASSES AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID WHERE T1.IMG_ID = 5 GROUP BY T2.ATT_CLASS HAVING COUNT(T2.ATT_CLASS) > 2",
        "difficulty": "simple"
    },
    {
        "question_id": 434,
        "prev_question_id": 7537,
        "db_id": "image_and_language",
        "question": "How many attributes are related to the object sample no. 7 on image no. 4?",
        "evidence": "How many attributes refers to ATT_CLASS_ID; object sample no. 7 on image no. 4 refers to IMG_ID = 4 and OBJ_SAMPLE_ID = 7",
        "SQL": "SELECT COUNT(ATT_CLASS_ID) FROM IMG_OBJ_ATT WHERE IMG_ID = 4 AND OBJ_SAMPLE_ID = 7",
        "difficulty": "simple"
    },
    {
        "question_id": 435,
        "prev_question_id": 7543,
        "db_id": "image_and_language",
        "question": "State the explanation about object class 10.",
        "evidence": "explanation about object class 10 refers to OBJ_CLASS where OBJ_CLASS_ID = 10;",
        "SQL": "SELECT OBJ_CLASS FROM OBJ_CLASSES WHERE OBJ_CLASS_ID = 10",
        "difficulty": "simple"
    },
    {
        "question_id": 436,
        "prev_question_id": 7544,
        "db_id": "image_and_language",
        "question": "Name the object class of the image with a bounding (422, 63, 77, 363).",
        "evidence": "image with a bounding (422, 63, 77, 363) refers to OBJ_CLASS_ID where X = 422 and Y = 63 and W = 77 and H = 363;",
        "SQL": "SELECT T2.OBJ_CLASS FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.X = 422 AND T1.Y = 63 AND T1.W = 77 AND T1.H = 363",
        "difficulty": "challenging"
    },
    {
        "question_id": 437,
        "prev_question_id": 7563,
        "db_id": "image_and_language",
        "question": "Find the object in image 5 where the object with the coordinate of (634, 468).",
        "evidence": "object in image 5 refers to OBJ_SAMPLE_ID where IMG_ID = 5; coordinates of (634, 468) refer to X and Y coordinates of the bounding box in which X = 634 and Y = 468;",
        "SQL": "SELECT OBJ_SAMPLE_ID FROM IMG_OBJ WHERE IMG_ID = 5 AND X = 634 AND Y = 468",
        "difficulty": "simple"
    },
    {
        "question_id": 438,
        "prev_question_id": 7568,
        "db_id": "image_and_language",
        "question": "List all the object classes in image 10.",
        "evidence": "object classes refer to OBJ_CLASS; image 10 refers to IMG_ID = 10;",
        "SQL": "SELECT DISTINCT T2.OBJ_CLASS FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.IMG_ID = 10",
        "difficulty": "simple"
    },
    {
        "question_id": 439,
        "prev_question_id": 7571,
        "db_id": "image_and_language",
        "question": "How many images have objects with the attributes of polka dot?",
        "evidence": "attributes of polka dot refer to ATT_CLASS = 'polka dot'; images refer to IMG_ID;",
        "SQL": "SELECT COUNT(T2.OBJ_SAMPLE_ID) FROM ATT_CLASSES AS T1 INNER JOIN IMG_OBJ_ATT AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID WHERE T1.ATT_CLASS = 'polka dot'",
        "difficulty": "simple"
    },
    {
        "question_id": 440,
        "prev_question_id": 7587,
        "db_id": "image_and_language",
        "question": "List all the ID of the images that have an attribute class of \"horse\".",
        "evidence": "ID of all images refer to IMG_ID; attribute class of \"horse\" refers to ATT_CLASS = 'horse';",
        "SQL": "SELECT T2.IMG_ID FROM ATT_CLASSES AS T1 INNER JOIN IMG_OBJ_ATT AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID WHERE T1.ATT_CLASS = 'horse'",
        "difficulty": "simple"
    },
    {
        "question_id": 441,
        "prev_question_id": 7602,
        "db_id": "image_and_language",
        "question": "What object class is in the X and Y coordinates of 126 and 363?",
        "evidence": "object class refers to OBJ_CLASS; X and Y coordinates of 126 and 363 refer to coordinates of the bounding box where X = 126 and Y = 363;",
        "SQL": "SELECT T1.IMG_ID, T2.OBJ_CLASS FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T1.X = 126 AND T1.Y = 363",
        "difficulty": "moderate"
    },
    {
        "question_id": 442,
        "prev_question_id": 7610,
        "db_id": "image_and_language",
        "question": "How many 'blue' attribute classes are there on image ID 2355735?",
        "evidence": "blue' attribute classes on image ID 2355735 refer to ATT_CLASS = 'blue' where IMG_ID = 2355735;",
        "SQL": "SELECT COUNT(T1.ATT_CLASS) FROM ATT_CLASSES AS T1 INNER JOIN IMG_OBJ_ATT AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID WHERE T2.IMG_ID = 2355735 AND T1.ATT_CLASS = 'blue'",
        "difficulty": "simple"
    },
    {
        "question_id": 443,
        "prev_question_id": 7671,
        "db_id": "hockey",
        "question": "Among the players who died in Massachussets, how many of them have won an award?",
        "evidence": "died in Massachussets refers to deathState = 'Massachussets'",
        "SQL": "SELECT COUNT(DISTINCT T1.playerID) FROM Master AS T1 INNER JOIN AwardsPlayers AS T2 ON T1.playerID = T2.playerID WHERE T1.deathState = 'MA'",
        "difficulty": "moderate"
    },
    {
        "question_id": 444,
        "prev_question_id": 7738,
        "db_id": "hockey",
        "question": "What is the name of the losing team during an exhibition game in 1912?",
        "evidence": "exhibition game refers to note = 'EX'; team of losing team refers to tmIDLoser",
        "SQL": "SELECT T2.name FROM SeriesPost AS T1 INNER JOIN Teams AS T2 ON T1.year = T2.year AND tmIDLoser = tmID WHERE T1.note = 'EX' AND T2.year = '1912'",
        "difficulty": "moderate"
    },
    {
        "question_id": 445,
        "prev_question_id": 7748,
        "db_id": "hockey",
        "question": "What is the name of the coach whose team placed 4th in the 1969 game? Indicate their coachID.",
        "evidence": "name of coach refers to coachID; placed 4th refers to rank = 4; 1969 game refers to year = 1969",
        "SQL": "SELECT T1.coachID FROM Coaches AS T1 INNER JOIN Teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.year = 1969 AND T2.rank = 4",
        "difficulty": "challenging"
    },
    {
        "question_id": 446,
        "prev_question_id": 7822,
        "db_id": "world",
        "question": "List the languages used in the USA.",
        "evidence": "USA refers to CountryCode = 'USA';",
        "SQL": "SELECT Language FROM CountryLanguage WHERE CountryCode = 'USA'",
        "difficulty": "simple"
    },
    {
        "question_id": 447,
        "prev_question_id": 7853,
        "db_id": "world",
        "question": "What country declared its independence in 1994?",
        "evidence": "declared independence in 1994 refers to IndepYear = 1994;",
        "SQL": "SELECT Name FROM Country WHERE IndepYear = 1994",
        "difficulty": "simple"
    },
    {
        "question_id": 448,
        "prev_question_id": 7854,
        "db_id": "world",
        "question": "List all the countries in Asia.",
        "evidence": "Asia refers to Continent = 'Asia';",
        "SQL": "SELECT Name FROM Country WHERE Continent = 'Asia'",
        "difficulty": "simple"
    },
    {
        "question_id": 449,
        "prev_question_id": 7861,
        "db_id": "world",
        "question": "What is the form of government that the city of Manila has?",
        "evidence": "form of government refers to GovernmentForm;",
        "SQL": "SELECT T1.GovernmentForm FROM Country AS T1 INNER JOIN City AS T2 ON T1.Code = T2.CountryCode WHERE T2.Name = 'Manila'",
        "difficulty": "moderate"
    },
    {
        "question_id": 450,
        "prev_question_id": 7869,
        "db_id": "world",
        "question": "What is the capital city of the country with largest population?",
        "evidence": "capital city refers to Capital; largest population refers to MAX(Population);",
        "SQL": "SELECT T1.Capital FROM Country AS T1 INNER JOIN City AS T2 ON T1.Code = T2.CountryCode ORDER BY T1.Population DESC LIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question_id": 451,
        "prev_question_id": 7875,
        "db_id": "world",
        "question": "What is the language of the smallest population country?",
        "evidence": "smallest population refers to MIN(Population);",
        "SQL": "SELECT T2.Language FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode ORDER BY T1.Population ASC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 452,
        "prev_question_id": 7885,
        "db_id": "world",
        "question": "List down all cities of China.",
        "evidence": "China is a name of country;",
        "SQL": "SELECT T1.Name FROM City AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Name = 'China'",
        "difficulty": "moderate"
    },
    {
        "question_id": 453,
        "prev_question_id": 7890,
        "db_id": "world",
        "question": "What city has the highest population?",
        "evidence": "highest population refers to MAX(Population);",
        "SQL": "SELECT Name FROM City ORDER BY Population DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 454,
        "prev_question_id": 7891,
        "db_id": "world",
        "question": "Provide the district of the city with a population of 201843.",
        "evidence": "",
        "SQL": "SELECT District FROM City WHERE population = 201843",
        "difficulty": "simple"
    },
    {
        "question_id": 455,
        "prev_question_id": 7931,
        "db_id": "music_platform_2",
        "question": "Name the podcast title, rating and review content created by '76A4C24B6038145'.",
        "evidence": "\"76A4C24B6038145\" is author_id; review content refers to content",
        "SQL": "SELECT T2.title, T2.rating, T2.content FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T2.author_id = '76A4C24B6038145'",
        "difficulty": "simple"
    },
    {
        "question_id": 456,
        "prev_question_id": 7933,
        "db_id": "music_platform_2",
        "question": "List all reviews created in May 2019. State the title of podcast and review rating.",
        "evidence": "created in May 2019 refers to created_at like '2019-05%'",
        "SQL": "SELECT DISTINCT T1.title, T2.rating FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T2.created_at LIKE '2019-05-%'",
        "difficulty": "moderate"
    },
    {
        "question_id": 457,
        "prev_question_id": 7937,
        "db_id": "music_platform_2",
        "question": "List all the names of podcasts under the 'true crime' category.",
        "evidence": "name of the podcast refers to title of the podcast",
        "SQL": "SELECT T2.title FROM categories AS T1 INNER JOIN podcasts AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.category = 'true-crime'",
        "difficulty": "simple"
    },
    {
        "question_id": 458,
        "prev_question_id": 7963,
        "db_id": "music_platform_2",
        "question": "What is the average rating of podcasts in comedy category?",
        "evidence": "comedy category refers to category = 'comedy'; average rating = Divide (Sum(rating), Count(podcast_id))",
        "SQL": "SELECT AVG(T2.rating) FROM categories AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.category = 'comedy'",
        "difficulty": "moderate"
    },
    {
        "question_id": 459,
        "prev_question_id": 7975,
        "db_id": "music_platform_2",
        "question": "What is the content of the earliest review for the \"Stuff You Should Know\" podcast?",
        "evidence": "\"Stuff You Should Know\" is the title of podcast; earliest refers to Min(created_at)",
        "SQL": "SELECT T2.content FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.title = 'Stuff You Should Know' ORDER BY T2.created_at ASC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 460,
        "prev_question_id": 7979,
        "db_id": "music_platform_2",
        "question": "What is the content of the review under the title \"really interesting!\" and is created on 2018-04-24 at 12:05:16?",
        "evidence": "\"really interesting\" is the title of review;\u00a0 created on 2018-04-24 at 12:05:16 refers to created_at = '2018-04-24T12:05:16-07:00'",
        "SQL": "SELECT content FROM reviews WHERE title = 'really interesting!' AND created_at = '2018-04-24T12:05:16-07:00'",
        "difficulty": "simple"
    },
    {
        "question_id": 461,
        "prev_question_id": 7983,
        "db_id": "music_platform_2",
        "question": "Among the reviews for the podcast \"Please Excuse My Dead Aunt Sally\", how many of them are made in the year 2019?",
        "evidence": "\"Please Excuse My Dead Aunt Sally\" is the title of podcast; made in the year 2019 refers to created_at like '2019%'",
        "SQL": "SELECT COUNT(T2.created_at) FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.title = 'Please Excuse My Dead Aunt Sally' AND T2.created_at LIKE '2019-%'",
        "difficulty": "moderate"
    },
    {
        "question_id": 462,
        "prev_question_id": 7984,
        "db_id": "music_platform_2",
        "question": "Please list the titles of the podcasts for which the author whose ID is F7E5A318989779D has written a review.",
        "evidence": "author whose ID is F7E5A318989779D refers to author_id = 'F7E5A318989779D'",
        "SQL": "SELECT T2.title FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T2.author_id = 'F7E5A318989779D'",
        "difficulty": "challenging"
    },
    {
        "question_id": 463,
        "prev_question_id": 7993,
        "db_id": "university",
        "question": "Give the name of the country that has the most universities.",
        "evidence": "has the most universities refers to MAX(COUNT(id)); name of the country refers to country_name",
        "SQL": "SELECT T2.country_name FROM university AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id GROUP BY T2.country_name ORDER BY COUNT(T1.university_name) DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 464,
        "prev_question_id": 7994,
        "db_id": "university",
        "question": "What is the name of the university that had the highest number of international students for 6 consecutive years?",
        "evidence": "had the highest number of international students refers to max(pct_international_students); for 6 consecutive years refers to count(SUBTRACT(year, rm)) > = 6; name of university refers to university_name;",
        "SQL": "SELECT T2.university_name FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id ORDER BY T1.pct_international_students DESC LIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question_id": 465,
        "prev_question_id": 8047,
        "db_id": "university",
        "question": "How many universities had over 30000 students in 2011?",
        "evidence": "in 2011 refers to year 2011; had over 30000 students refers to num_students > 30000;",
        "SQL": "SELECT COUNT(*) FROM university_year WHERE year = 2011 AND num_students > 30000",
        "difficulty": "simple"
    },
    {
        "question_id": 466,
        "prev_question_id": 8056,
        "db_id": "university",
        "question": "Which country has the University of S\u00c3\u00a3o Paulo?",
        "evidence": "the University of S\u00c3\u00a3o Paulo refers to university_name = 'University of S\u00e3o Paulo'; which country refers to country_name;",
        "SQL": "SELECT T2.country_name FROM university AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id WHERE T1.university_name = 'University of S\u00e3o Paulo'",
        "difficulty": "simple"
    },
    {
        "question_id": 467,
        "prev_question_id": 8065,
        "db_id": "university",
        "question": "Calculate the average score per university under Alumni criteria in 2008.",
        "evidence": "under Alumni criteria refers to criteria_name = 'Alumni'; in 2008 refers to year = 2008; average score refers to DIVIDE(SUM(score), COUNT(university_id))",
        "SQL": "SELECT AVG(T2.score) FROM ranking_criteria AS T1 INNER JOIN university_ranking_year AS T2 ON T1.id = T2.ranking_criteria_id WHERE T1.criteria_name = 'Alumni' AND T2.year = 2008",
        "difficulty": "simple"
    },
    {
        "question_id": 468,
        "prev_question_id": 8069,
        "db_id": "university",
        "question": "Please list the IDs of the universities with a student staff ratio of over 15 in 2011.",
        "evidence": "in 2011 refers to year 2011; student staff ratio of over 15 refers to student_staff_ratio > 15; ID of the university refers to university_id",
        "SQL": "SELECT university_id FROM university_year WHERE year = 2011 AND student_staff_ratio > 15",
        "difficulty": "moderate"
    },
    {
        "question_id": 469,
        "prev_question_id": 8077,
        "db_id": "university",
        "question": "Which country is Harvard University in?",
        "evidence": "Harvard University refers to university_name = 'Harvard University'; which country refers to country_name",
        "SQL": "SELECT T2.country_name FROM university AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id WHERE T1.university_name = 'Harvard University'",
        "difficulty": "moderate"
    },
    {
        "question_id": 470,
        "prev_question_id": 8095,
        "db_id": "university",
        "question": "Which university had the most students in 2011? Show its name.",
        "evidence": "in 2011 refers to year 2011; the most students refers to MAX(num_students); which university refers to university_name;",
        "SQL": "SELECT T2.university_name FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.year = 2011 ORDER BY T1.num_students DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 471,
        "prev_question_id": 8107,
        "db_id": "university",
        "question": "Calculate the average number of students of all universities in 2012.",
        "evidence": "average number of students refers to avg(num_students); in 2012 refers to year = 2012",
        "SQL": "SELECT AVG(num_students) FROM university_year WHERE year = 2012",
        "difficulty": "challenging"
    },
    {
        "question_id": 472,
        "prev_question_id": 8112,
        "db_id": "university",
        "question": "What is the average score of all universities in 2012?",
        "evidence": "average score refers to avg(score); in 2012 refers to year = 2012",
        "SQL": "SELECT AVG(score) FROM university_ranking_year WHERE year = 2012",
        "difficulty": "challenging"
    },
    {
        "question_id": 473,
        "prev_question_id": 8120,
        "db_id": "university",
        "question": "Give the name and score of the university ID 124.",
        "evidence": "name of university refers to university_name;",
        "SQL": "SELECT T2.university_name, T1.score FROM university_ranking_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T2.id = 124",
        "difficulty": "simple"
    },
    {
        "question_id": 474,
        "prev_question_id": 8122,
        "db_id": "university",
        "question": "List down all universities that scored below 50.",
        "evidence": "scored below 50 refers to score < 50; all universities refers to university_name;",
        "SQL": "SELECT DISTINCT T2.university_name FROM university_ranking_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.score < 50",
        "difficulty": "simple"
    },
    {
        "question_id": 475,
        "prev_question_id": 8128,
        "db_id": "university",
        "question": "Give the names of universities with number of students ranges from 400 to 1000.",
        "evidence": "number of students ranges from 400 to 1000 refers to num_students BETWEEN 400 AND 1000; name of university refers to university_name",
        "SQL": "SELECT DISTINCT T2.university_name FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.num_students BETWEEN 400 AND 1000",
        "difficulty": "moderate"
    },
    {
        "question_id": 476,
        "prev_question_id": 8129,
        "db_id": "university",
        "question": "In what year does the Brown University score the highest?",
        "evidence": "Brown University refers to university_name = 'Brown University'; score the highest refers to MAX(score)",
        "SQL": "SELECT T1.year FROM university_ranking_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T2.university_name = 'Brown University' ORDER BY T1.score DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 477,
        "prev_question_id": 8137,
        "db_id": "sales_in_weather",
        "question": "How many units of item no.9 were sold in store no.1 on 2012/1/1?",
        "evidence": "store no. 1 refers to store_nbr = 1; item no. 9 refers to item_nbr = 9; on 2012/1/1 refers to date = '2012-01-01'",
        "SQL": "SELECT units FROM sales_in_weather WHERE `date` = '2012-01-01' AND store_nbr = 1 AND item_nbr = 9",
        "difficulty": "simple"
    },
    {
        "question_id": 478,
        "prev_question_id": 8159,
        "db_id": "sales_in_weather",
        "question": "Give the average temperature of station no.20 on 2014/10/17.",
        "evidence": "station no.20 refers to station_nbr = 20; on 2014/10/17 refers to date = '2014-10-17'; average temperature refers to tavg",
        "SQL": "SELECT tavg FROM weather WHERE `date` = '2014-10-17' AND station_nbr = 20",
        "difficulty": "simple"
    },
    {
        "question_id": 479,
        "prev_question_id": 8162,
        "db_id": "sales_in_weather",
        "question": "Which weather station does store no.20 belong to?",
        "evidence": "store no.20 refers to store_nbr = 20; weather station refers to station_nbr",
        "SQL": "SELECT station_nbr FROM relation WHERE store_nbr = 20",
        "difficulty": "simple"
    },
    {
        "question_id": 480,
        "prev_question_id": 8163,
        "db_id": "sales_in_weather",
        "question": "Tell the temperature range of the home weather station of store no.7 on 2014/4/28.",
        "evidence": "store no.7 refers to tore_nbr = 7; on 2014/4/28 refers to date = '2014-04-28'; temperature range refers to Subtract (tmax, tmin)",
        "SQL": "SELECT T1.tmax - T1.tmin AS temprange FROM weather AS T1 INNER JOIN relation AS T2 ON T1.station_nbr = T2.station_nbr WHERE T2.store_nbr = 7 AND T1.`date` = '2014-04-28'",
        "difficulty": "moderate"
    },
    {
        "question_id": 481,
        "prev_question_id": 8165,
        "db_id": "sales_in_weather",
        "question": "For the home weather station of store no.15, what was the dew point on 2012/2/18?",
        "evidence": "store no. 15 refers to store_nbr = 15; on 2012/2/18 refers to date = '2012-02-18'",
        "SQL": "SELECT T1.dewpoint FROM weather AS T1 INNER JOIN relation AS T2 ON T1.station_nbr = T2.station_nbr WHERE T2.store_nbr = 15 AND T1.`date` = '2012-02-18'",
        "difficulty": "moderate"
    },
    {
        "question_id": 482,
        "prev_question_id": 8171,
        "db_id": "sales_in_weather",
        "question": "Provide the code summarization for the weather recorded by the weather station which contained the no.2 store on 2013/2/12.",
        "evidence": "no.2 store refers to store_nbr = 2; on 2013/2/12 refers to date = '2013-02-12'; code summarization refers to codesum",
        "SQL": "SELECT T1.codesum FROM weather AS T1 INNER JOIN relation AS T2 ON T1.station_nbr = T2.station_nbr WHERE T1.`date` = '2013-02-12' AND T2.store_nbr = 2",
        "difficulty": "challenging"
    },
    {
        "question_id": 483,
        "prev_question_id": 8176,
        "db_id": "sales_in_weather",
        "question": "For the weather station has store no.9, what was the increased percentage of the average temperature from 2012/2/2 to 2012/2/3?",
        "evidence": "store no.9 refers to store_nbr = 9; 2012/2/2 refers to date = '2012-02-02'; 2012/2/3 refers to date = '2012-02-03'; average temperature refers to tavg; increase percentage = Divide (Subtract (tavg where date = '2012-02-03', tavg where date = '2012-02-02'), tavg where date = '2012-02-02') * 100",
        "SQL": "SELECT CAST((SUM(CASE WHEN T1.`date` = '2012-02-03' THEN T1.tavg * 1 ELSE 0 END) - SUM(CASE WHEN T1.`date` = '2012-02-02' THEN T1.tavg * 1 ELSE 0 END)) AS REAL) * 100 / SUM(CASE WHEN T1.`date` = '2012-02-02' THEN T1.tavg * 1 ELSE 0 END) FROM weather AS T1 INNER JOIN relation AS T2 ON T1.station_nbr = T2.station_nbr WHERE T2.store_nbr = 9",
        "difficulty": "challenging"
    },
    {
        "question_id": 484,
        "prev_question_id": 8185,
        "db_id": "sales_in_weather",
        "question": "Among the stores in weather station 14 in February 2014, which store had sold no less than 300 quantities for item number 44 in a single day?",
        "evidence": "weather station 14 refers to station_nbr = 14; February 2014 refers to substring (date, 1, 7) = '2014-02' ; sold no less than 300 quantities refers to units > = 300; item no.44 refers to item_nbr = 44; store refers to store_nbr",
        "SQL": "SELECT T1.store_nbr FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr WHERE T2.station_nbr = 14 AND T1.`date` LIKE '%2014-02%' AND T1.item_nbr = 44 AND units >= 300",
        "difficulty": "moderate"
    },
    {
        "question_id": 485,
        "prev_question_id": 191,
        "db_id": "book_publishing_company",
        "question": "Among all employees, who have job level greater than 200. State the employee name and job description.",
        "evidence": "job level greater than 200 refers to job_lvl>200; job description refers to job_desc",
        "SQL": "SELECT T1.fname, T1.lname, T2.job_desc FROM employee AS T1 INNER JOIN jobs AS T2 ON T1.job_id = T2.job_id WHERE T1.job_lvl > 200",
        "difficulty": "simple"
    },
    {
        "question_id": 486,
        "prev_question_id": 2000,
        "db_id": "soccer_2016",
        "question": "How many players have the bowling skill greater than 2?",
        "evidence": "bowling skill greater than 2 refers to Bowling_skill > 2",
        "SQL": "SELECT COUNT(Player_Name) FROM Player WHERE Bowling_skill > 2",
        "difficulty": "simple"
    },
    {
        "question_id": 487,
        "prev_question_id": 7944,
        "db_id": "music_platform_2",
        "question": "How many podcast reviews with a rating of 3 were created during the first quarter of 2015?",
        "evidence": "rating of 3 refers to rating = 3; created during the first quarter of 2015 refers to created_at BETWEEN'2015-01-01T00:00:00-07:00' and '2015-03-31T23:59:59-07:00'",
        "SQL": "SELECT COUNT(podcast_id) FROM reviews WHERE rating = 3 AND created_at BETWEEN '2015-01-01T00:00:00-07:00' AND '2015-03-31T23:59:59-07:00'",
        "difficulty": "simple"
    },
    {
        "question_id": 488,
        "prev_question_id": 5492,
        "db_id": "menu",
        "question": "How many menus were created for steamship?",
        "evidence": "steamship refers to venue = 'STEAMSHIP';",
        "SQL": "SELECT COUNT(*) FROM Menu WHERE venue = 'STEAMSHIP'",
        "difficulty": "simple"
    },
    {
        "question_id": 489,
        "prev_question_id": 3164,
        "db_id": "donor",
        "question": "How many donations from teachers were done in the state of Colorado?",
        "evidence": "from teachers refers to is_teacher_acct = 't'; the state of Colorado refers to donor_state = 'CO-Colorado'",
        "SQL": "SELECT COUNT(donationid) FROM donations WHERE is_teacher_acct = 't' AND donor_state = 'CO'",
        "difficulty": "simple"
    },
    {
        "question_id": 490,
        "prev_question_id": 3568,
        "db_id": "authors",
        "question": "List the names of all authors affiliated with Birkbeck University of London.",
        "evidence": "affiliated with Birkbeck University of London refers to Affiliation = 'Birkbeck University of London'",
        "SQL": "SELECT Name FROM Author WHERE Affiliation = 'Birkbeck University of London'",
        "difficulty": "simple"
    },
    {
        "question_id": 491,
        "prev_question_id": 7175,
        "db_id": "works_cycles",
        "question": "What is the number of the sub categories for bikes?",
        "evidence": "Bike refers to the name of the product category, therefore ProductCategoryID = 1",
        "SQL": "SELECT COUNT(*) FROM ProductCategory AS T1 INNER JOIN ProductSubcategory AS T2 ON T1.ProductCategoryID = T2.ProductCategoryID WHERE T1.Name = 'Bikes'",
        "difficulty": "simple"
    },
    {
        "question_id": 492,
        "prev_question_id": 3114,
        "db_id": "cars",
        "question": "What are the names of the cars worth 20000?",
        "evidence": "name of the car refers to car_name; worth 20000 refers to price = 20000",
        "SQL": "SELECT T1.car_name FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID WHERE T2.price = 20000",
        "difficulty": "simple"
    },
    {
        "question_id": 493,
        "prev_question_id": 7449,
        "db_id": "works_cycles",
        "question": "What is the scrap reason for work order \"57788\"?",
        "evidence": "",
        "SQL": "SELECT T2.Name FROM WorkOrder AS T1 INNER JOIN ScrapReason AS T2 ON T1.ScrapReasonID = T2.ScrapReasonID WHERE T1.WorkOrderID = 57788",
        "difficulty": "simple"
    },
    {
        "question_id": 494,
        "prev_question_id": 9074,
        "db_id": "bike_share_1",
        "question": "List out all end stations for a bicycle that were making a trip starting from 2nd at South Park station? Only retain the unique value.",
        "evidence": "end station refers to end_station_name; starting from refers to start_station_name; start_station_name = '2nd at South Park';",
        "SQL": "SELECT DISTINCT end_station_name FROM trip WHERE start_station_name = '2nd at South Park'",
        "difficulty": "simple"
    },
    {
        "question_id": 495,
        "prev_question_id": 5200,
        "db_id": "address",
        "question": "Indicate the name of the country with a population greater than 10000 in 2010.",
        "evidence": "population greater than 10000 in 2010 refers to population_2010 > 10000;",
        "SQL": "SELECT DISTINCT T1.county FROM country AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T2.population_2010 > 10000",
        "difficulty": "simple"
    },
    {
        "question_id": 496,
        "prev_question_id": 6013,
        "db_id": "books",
        "question": "What are the city addresses of the customers located in the United States of America?",
        "evidence": "\"United States of America\" is the country_name",
        "SQL": "SELECT DISTINCT T2.city FROM country AS T1 INNER JOIN address AS T2 ON T1.country_id = T2.country_id WHERE T1.country_name = 'United States of America'",
        "difficulty": "simple"
    },
    {
        "question_id": 497,
        "prev_question_id": 2918,
        "db_id": "professional_basketball",
        "question": "Which player from Wake Forest college did the most offensive rebounds than defensive rebounds in the all-star? Please mention the full name of the player including the middle name if have any.",
        "evidence": "Wake Forest college refers to highSchool = 'Wake Forest college'; did the most offensive rebounds than defensive rebounds refers to max(subtract(sum(oRebounds), sum(dRebounds))); full name refers to first_name, middle_name, last_name",
        "SQL": "SELECT T1.firstName, T1.middleName, T1.lastName FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T1.college = 'Wake Forest' AND T2.o_rebounds > T2.d_rebounds",
        "difficulty": "simple"
    },
    {
        "question_id": 498,
        "prev_question_id": 4452,
        "db_id": "student_loan",
        "question": "Which school has the highest number of disabled students?",
        "evidence": "highest number of disabled students refers to MAX(COUNT(disabled.name))",
        "SQL": "SELECT T.school FROM ( SELECT T2.school, COUNT(T2.name) AS num FROM disabled AS T1 INNER JOIN enrolled AS T2 ON T1.name = T2.name GROUP BY T2.school ) T ORDER BY T.num DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 499,
        "prev_question_id": 7859,
        "db_id": "world",
        "question": "What is the official language of China?",
        "evidence": "official language refers to IsOfficial = 'T'; China is a name of country;",
        "SQL": "SELECT T2.Language FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = 'China' AND T2.IsOfficial = 'T'",
        "difficulty": "simple"
    },
    {
        "question_id": 500,
        "prev_question_id": 5746,
        "db_id": "language_corpus",
        "question": "What is the language of the pair of words numbered 1 and 616?",
        "evidence": "Pair is a relationship of two words: w1st and w2nd, where w1st is word id of the first word and w2nd is a word id of the second word; w1st = 1; w2nd = 616;",
        "SQL": "SELECT T2.lang FROM biwords AS T1 INNER JOIN langs AS T2 ON T1.lid = T2.lid WHERE T1.w1st = 1 AND T1.w2nd = 616",
        "difficulty": "simple"
    },
    {
        "question_id": 501,
        "prev_question_id": 5378,
        "db_id": "sales",
        "question": "What is the last name of sales person for sales id 100?",
        "evidence": "",
        "SQL": "SELECT T1.LastName FROM Employees AS T1 INNER JOIN Sales AS T2 ON T1.EmployeeID = T2.SalesPersonID WHERE T2.SalesID = 100",
        "difficulty": "simple"
    },
    {
        "question_id": 502,
        "prev_question_id": 8801,
        "db_id": "food_inspection",
        "question": "For the business whose business certificate number is 304977, how many violations did it have on 2013/10/7?",
        "evidence": "date = '2013-10-07';",
        "SQL": "SELECT COUNT(T1.business_id) FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T2.business_certificate = '304977' AND T1.`date` = '2013-10-07'",
        "difficulty": "simple"
    },
    {
        "question_id": 503,
        "prev_question_id": 5940,
        "db_id": "books",
        "question": "Which country does \u017dirovnica city belong to?",
        "evidence": "\"\u017dirovnica\" is the city; country refers to country_name",
        "SQL": "SELECT T1.country_name FROM country AS T1 INNER JOIN address AS T2 ON T1.country_id = T2.country_id WHERE T2.city = '\u017dirovnica'",
        "difficulty": "simple"
    },
    {
        "question_id": 504,
        "prev_question_id": 3211,
        "db_id": "donor",
        "question": "Is teacher \"42d43fa6f37314365d08692e08680973\" a New York teacher?",
        "evidence": "teacher \"42d43fa6f37314365d08692e08680973\"refers to teacher_acctid = '42d43fa6f37314365d08692e08680973';",
        "SQL": "SELECT teacher_ny_teaching_fellow end FROM projects WHERE teacher_acctid = '42d43fa6f37314365d08692e08680973'",
        "difficulty": "simple"
    },
    {
        "question_id": 505,
        "prev_question_id": 4182,
        "db_id": "simpson_episodes",
        "question": "How many episodes have more than 1000 votes?",
        "evidence": "more than 1000 votes refers to votes > 1000",
        "SQL": "SELECT COUNT(episode_id) FROM Episode WHERE votes > 1000;",
        "difficulty": "simple"
    },
    {
        "question_id": 506,
        "prev_question_id": 7513,
        "db_id": "image_and_language",
        "question": "List all the corresponding classes for attributes of image id 8.",
        "evidence": "classes for attributes refers to ATT_CLASS; image id 8 refers to IMG_ID = 8",
        "SQL": "SELECT T2.ATT_CLASS FROM IMG_OBJ_att AS T1 INNER JOIN ATT_CLASSES AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID WHERE T1.IMG_ID = 8",
        "difficulty": "simple"
    },
    {
        "question_id": 507,
        "prev_question_id": 4419,
        "db_id": "student_loan",
        "question": "What is the average absence period of a student?",
        "evidence": "average refers to DIVIDE(SUM(month), COUNT(name))",
        "SQL": "SELECT AVG(month) FROM longest_absense_from_school",
        "difficulty": "simple"
    },
    {
        "question_id": 508,
        "prev_question_id": 7652,
        "db_id": "hockey",
        "question": "How many teams have the same total number of postseason wins and postseason loses?",
        "evidence": "same total number of postseason wins and postseason loses refers to PostW = PostL",
        "SQL": "SELECT DISTINCT COUNT(tmID) FROM Goalies WHERE PostW = PostL",
        "difficulty": "simple"
    },
    {
        "question_id": 509,
        "prev_question_id": 5659,
        "db_id": "shipping",
        "question": "In which city did the heaviest shipment transported?",
        "evidence": "heaviest shipment refers to Max(weight); city refers to city_name",
        "SQL": "SELECT T2.city_name FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id ORDER BY T1.weight DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 510,
        "prev_question_id": 9147,
        "db_id": "movie_3",
        "question": "What is the phone number of address No.72?",
        "evidence": "address no. 72 refers to address_id = 72; phone number refers to phone",
        "SQL": "SELECT phone FROM address WHERE address_id = '72'",
        "difficulty": "simple"
    },
    {
        "question_id": 511,
        "prev_question_id": 4135,
        "db_id": "public_review_platform",
        "question": "What is the attribute value of an active business with a low review count and 3 stars which is located at Goodyear, AZ?",
        "evidence": "active business ID refers to active = 'true'; low review count refers to review_count = 'Low'; 3 stars refers to stars = 3; Goodyear is a city; AZ is a state",
        "SQL": "SELECT DISTINCT T2.attribute_value FROM Business AS T1 INNER JOIN Business_Attributes AS T2 ON T1.business_id = T2.business_id INNER JOIN Attributes AS T3 ON T2.attribute_id = T3.attribute_id WHERE T1.state = 'AZ' AND T1.city = 'Goodyear' AND T1.active = 'true' AND T1.stars = 3 AND T1.review_count = 'Low'",
        "difficulty": "simple"
    },
    {
        "question_id": 512,
        "prev_question_id": 1262,
        "db_id": "law_episode",
        "question": "Describe what happened in the episode of award no.296.",
        "evidence": "description of what happened refers to summary; award no.296 refers to award_id = '296'",
        "SQL": "SELECT T1.summary FROM Episode AS T1 INNER JOIN Award AS T2 ON T1.episode_id = T2.episode_id WHERE T2.award_id = 296",
        "difficulty": "simple"
    },
    {
        "question_id": 513,
        "prev_question_id": 1033,
        "db_id": "computer_student",
        "question": "What is the total of professional courses available at the university? List out all the course id.",
        "evidence": "professional courses refers to courseLevel = 'Level_500'; course id refers to course.course_id",
        "SQL": "SELECT COUNT(course_id) FROM course WHERE courseLevel = 'Level_500'",
        "difficulty": "simple"
    },
    {
        "question_id": 514,
        "prev_question_id": 7358,
        "db_id": "works_cycles",
        "question": "Where are the shelves where the down tube product was stored?",
        "evidence": "shelves refer to shelf; down tube is a product",
        "SQL": "SELECT T2.Shelf FROM Product AS T1 INNER JOIN ProductInventory AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Name = 'Down Tube'",
        "difficulty": "simple"
    },
    {
        "question_id": 515,
        "prev_question_id": 6867,
        "db_id": "retails",
        "question": "Please list the names of the top 3 suppliers with the most amount of money in their accounts.",
        "evidence": "supplier name refers to s_name; the most amount of money refers to max(s_acctbal)",
        "SQL": "SELECT s_name FROM supplier ORDER BY s_acctbal DESC LIMIT 3",
        "difficulty": "simple"
    },
    {
        "question_id": 516,
        "prev_question_id": 1128,
        "db_id": "talkingdata",
        "question": "For the event which happened at 23:33:34 on 2016/5/6, how many installed apps were involved?",
        "evidence": "at 23:33:34 on 2016/5/6 refers to timestamp = '2016/5/6 23:33:34'; installed refers to is_installed = '1';",
        "SQL": "SELECT COUNT(T1.event_id) FROM app_events AS T1 INNER JOIN events AS T2 ON T1.event_id = T2.event_id WHERE SUBSTR(T2.`timestamp`, 1, 10) = '2016-05-06' AND T1.is_installed = '1'",
        "difficulty": "simple"
    },
    {
        "question_id": 517,
        "prev_question_id": 6972,
        "db_id": "ice_hockey_draft",
        "question": "List the names of all players in team Avangard Omsk in season 2000-2001.",
        "evidence": "names of the players refers to PlayerName; team Avangard Omsk refers to TEAM = 'Avangard Omsk'; 2000-2001 season refers to SEASON = '2000-2001';",
        "SQL": "SELECT DISTINCT T2.PlayerName FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.SEASON = '2000-2001' AND T1.TEAM = 'Avangard Omsk'",
        "difficulty": "simple"
    },
    {
        "question_id": 518,
        "prev_question_id": 1183,
        "db_id": "talkingdata",
        "question": "How many active users are there in the event?",
        "evidence": "active refers to is_active = 1;",
        "SQL": "SELECT COUNT(app_id) FROM app_events WHERE is_active = 1",
        "difficulty": "simple"
    },
    {
        "question_id": 519,
        "prev_question_id": 780,
        "db_id": "social_media",
        "question": "What is the text of the tweet that got the most `likes`?",
        "evidence": "got the most like refers to Max(Likes)",
        "SQL": "SELECT text FROM twitter WHERE Likes = ( SELECT MAX( Likes) FROM twitter )",
        "difficulty": "simple"
    },
    {
        "question_id": 520,
        "prev_question_id": 2924,
        "db_id": "professional_basketball",
        "question": "How many first round draft player in 1996 NBA draft became an All-Star?",
        "evidence": "first round refers to round = 1; in 1996 refers to year = 1996; NBA refers to lgID = 'NBA'",
        "SQL": "SELECT COUNT(T2.playerID) FROM draft AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T1.draftYear = 1996 AND T1.draftRound = 1",
        "difficulty": "simple"
    },
    {
        "question_id": 521,
        "prev_question_id": 843,
        "db_id": "social_media",
        "question": "How many tweets in French were posted from Australia?",
        "evidence": "\"French\" is the language and refers to Lang = 'fr'; 'Australia' is the Country",
        "SQL": "SELECT COUNT(DISTINCT T1.TweetID) FROM twitter AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T1.Lang = 'fr' AND T2.Country = 'Australia'",
        "difficulty": "simple"
    },
    {
        "question_id": 522,
        "prev_question_id": 1727,
        "db_id": "restaurant",
        "question": "What is the address of the Peking Duck restaurant?",
        "evidence": "address refers to street_num, street_name; Peking Duck restaurant refers to label = 'peking duck restaurant'",
        "SQL": "SELECT T2.street_name FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.label = 'peking duck restaurant'",
        "difficulty": "simple"
    },
    {
        "question_id": 523,
        "prev_question_id": 1733,
        "db_id": "restaurant",
        "question": "Which street in San Francisco has the most burger restaurants?",
        "evidence": "street refers to street_name; San Francisco refers to city = 'san francisco'; burger restaurant refers to food_type = 'burgers'; the most burger restaurants refers to max(count(street_name where food_type = 'burgers' and city = 'san francisco'))",
        "SQL": "SELECT T2.street_name FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.city = 'san francisco' AND T1.food_type = 'burgers' GROUP BY T2.street_name ORDER BY COUNT(T2.id_restaurant) DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 524,
        "prev_question_id": 5456,
        "db_id": "sales",
        "question": "How many employees sold \"ML Road Frame-W - Yellow, 40\"?",
        "evidence": "ML Road Frame-W - Yellow, 40' is name of product;",
        "SQL": "SELECT COUNT(T2.SalesPersonID) FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Name = 'ML Road Frame-W - Yellow, 40'",
        "difficulty": "simple"
    },
    {
        "question_id": 525,
        "prev_question_id": 5710,
        "db_id": "language_corpus",
        "question": "List down the page id of titles start with alphabet \"b\".",
        "evidence": "start with alphabet \"b\" refers to title LIKE 'b%'",
        "SQL": "SELECT pid FROM pages WHERE title LIKE 'b%'",
        "difficulty": "simple"
    },
    {
        "question_id": 526,
        "prev_question_id": 1809,
        "db_id": "soccer_2016",
        "question": "For the game on 2008/5/12, who was the man of the match?",
        "evidence": "on 2008/5/12 refers to Match_Date = '2008-05-12'; name refers to Player_Name;",
        "SQL": "SELECT T1.Player_Name FROM Player AS T1 INNER JOIN Match AS T2 ON T1.Player_Id = T2.Man_of_the_Match WHERE T2.Match_Date = '2008-05-12'",
        "difficulty": "simple"
    },
    {
        "question_id": 527,
        "prev_question_id": 5091,
        "db_id": "address",
        "question": "Among the residential areas with the bad alias \"Internal Revenue Service\", how many of them are in the Eastern time zone?",
        "evidence": "\"Internal Revenue Service\" is the bad_alias; in Eastern time zone refers to time_zone = 'Eastern'",
        "SQL": "SELECT COUNT(T1.zip_code) FROM zip_data AS T1 INNER JOIN avoid AS T2 ON T1.zip_code = T2.zip_code WHERE T2.bad_alias = 'Internal Revenue Service' AND T1.time_zone = 'Eastern'",
        "difficulty": "simple"
    },
    {
        "question_id": 528,
        "prev_question_id": 7505,
        "db_id": "image_and_language",
        "question": "State the object class of sample no.10 of image no.2320341.",
        "evidence": "object class refers to OBJ_CLASS; sample no.10 refers to OBJ_SAMPLE_ID = 10; image no.2320341 refers to IMG_ID = 2320341",
        "SQL": "SELECT T1.OBJ_CLASS FROM OBJ_CLASSES AS T1 INNER JOIN IMG_OBJ AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.IMG_ID = 2320341 AND T2.OBJ_SAMPLE_ID = 10",
        "difficulty": "simple"
    },
    {
        "question_id": 529,
        "prev_question_id": 438,
        "db_id": "movies_4",
        "question": "How many movies have made at least 1 Billion at the box office?",
        "evidence": "have made at least 1 Billion at the box office refers to revenue > 1000000000",
        "SQL": "SELECT COUNT(movie_id) FROM movie WHERE revenue > 1000000000",
        "difficulty": "simple"
    },
    {
        "question_id": 530,
        "prev_question_id": 7273,
        "db_id": "works_cycles",
        "question": "What is the highest amount of difference between the ordered quantity and actual quantity received in a single purchase order and to which vendor was the purchase order made?",
        "evidence": "highest amount of difference between the ordered quantity and actual quantity received in a single purchase order refers to MAX(SUBTRACT(OrderQty, ReceivedQty));",
        "SQL": "SELECT T2.OrderQty - T2.ReceivedQty, VendorID FROM PurchaseOrderHeader AS T1 INNER JOIN PurchaseOrderDetail AS T2 ON T1.PurchaseOrderID = T2.PurchaseOrderID ORDER BY T2.OrderQty - T2.ReceivedQty DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 531,
        "prev_question_id": 9305,
        "db_id": "movie_3",
        "question": "What is the most common first name among the customers?",
        "evidence": "the most common first name refers to MAX(COUNT(first_name))",
        "SQL": "SELECT first_name FROM customer GROUP BY first_name ORDER BY COUNT(first_name) DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 532,
        "prev_question_id": 1301,
        "db_id": "law_episode",
        "question": "What is the full place of birth of Rene Chenevert Balcer?",
        "evidence": "full place of birth refers to birth_place, birth_region; Rene Chenevert Balcer refers to birth_name = 'Rene Chenevert Balcer'",
        "SQL": "SELECT birth_place, birth_region FROM Person WHERE birth_name = 'Rene Chenevert Balcer'",
        "difficulty": "simple"
    },
    {
        "question_id": 533,
        "prev_question_id": 4145,
        "db_id": "citeseer",
        "question": "Which paper ID cited the most word? In which class label does it belongs to?",
        "evidence": "most cited word refers to max(word_cited_id);",
        "SQL": "SELECT T1.paper_id, T1.class_label FROM paper AS T1 INNER JOIN content AS T2 ON T1.paper_id = T2.paper_id GROUP BY T1.paper_id, T1.class_label ORDER BY COUNT(T2.word_cited_id) DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 534,
        "prev_question_id": 9383,
        "db_id": "movie_3",
        "question": "Identify the full name of the customer, who has the following email address: SHEILA.WELLS@sakilacustomer.org.",
        "evidence": "full name refers to first_name, last_name",
        "SQL": "SELECT first_name, last_name FROM customer WHERE email = 'SHEILA.WELLS@sakilacustomer.org'",
        "difficulty": "simple"
    },
    {
        "question_id": 535,
        "prev_question_id": 2210,
        "db_id": "world_development_indicators",
        "question": "What is the series code for Germany and what is its description?",
        "evidence": "Germany refers to shortname = 'Germany'",
        "SQL": "SELECT T1.Seriescode, T1.Description FROM CountryNotes AS T1 INNER JOIN Country AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.ShortName = 'Germany'",
        "difficulty": "simple"
    },
    {
        "question_id": 536,
        "prev_question_id": 2328,
        "db_id": "movielens",
        "question": "How many 35-year-old female users gave the movie 1711133 a rating of 3?",
        "evidence": "Female users mean that u_gender = 'F'",
        "SQL": "SELECT COUNT(T1.userid) FROM users AS T1 INNER JOIN u2base AS T2 ON T1.userid = T2.userid WHERE T2.rating = 3 AND T2.movieid = '1711133' AND T1.age = 35 AND T1.u_gender = 'F'",
        "difficulty": "simple"
    },
    {
        "question_id": 537,
        "prev_question_id": 5951,
        "db_id": "books",
        "question": "How many orders were delivered in 2021?",
        "evidence": "delivered refers to status_value = 'Delivered'; in 2021 refers to status_date LIKE '2021%'",
        "SQL": "SELECT COUNT(*) FROM order_status AS T1 INNER JOIN order_history AS T2 ON T1.status_id = T2.status_id WHERE T1.status_value = 'Delivered' AND STRFTIME('%Y', T2.status_date) = '2021'",
        "difficulty": "simple"
    },
    {
        "question_id": 538,
        "prev_question_id": 827,
        "db_id": "social_media",
        "question": "Tweet with ID tw-682723090279841798 was posted from which country?",
        "evidence": "\"tw-682723090279841798\" is the TweetID",
        "SQL": "SELECT T2.Country FROM twitter AS T1 INNER JOIN location AS T2 ON T1.LocationID = T2.LocationID WHERE T1.TweetID = 'tw-682723090279841798'",
        "difficulty": "simple"
    },
    {
        "question_id": 539,
        "prev_question_id": 441,
        "db_id": "movies_4",
        "question": "Provide the title of the movie that is most-liked by a large number of people.",
        "evidence": "most-liked by a large number of people refers to max(popularity)",
        "SQL": "SELECT title FROM movie ORDER BY popularity DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 540,
        "prev_question_id": 501,
        "db_id": "movies_4",
        "question": "Find out the popularity of the movies with the highest vote count.",
        "evidence": "highest vote count refers to max(vote_count)",
        "SQL": "SELECT popularity FROM movie ORDER BY vote_COUNT DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 541,
        "prev_question_id": 5563,
        "db_id": "menu",
        "question": "Among the menus that did not support taking out or booking in advance, how many of them were created before 1950?",
        "evidence": "did not support taking out or booking in advance refers to call_number is null; created before 1950 refers to strftime('%Y', date) < '1950';",
        "SQL": "SELECT COUNT(*) FROM Menu WHERE call_number IS NULL AND strftime('%Y', date) < '1950'",
        "difficulty": "simple"
    },
    {
        "question_id": 542,
        "prev_question_id": 5793,
        "db_id": "language_corpus",
        "question": "Which word has the time of occurrences as 340691?",
        "evidence": "occurrences of 340691 refers to occurrences = 340691",
        "SQL": "SELECT word FROM words WHERE occurrences = 340691",
        "difficulty": "simple"
    },
    {
        "question_id": 543,
        "prev_question_id": 7124,
        "db_id": "works_cycles",
        "question": "How many people work in the finance department?",
        "evidence": "",
        "SQL": "SELECT COUNT(T2.BusinessEntityID) FROM Department AS T1 INNER JOIN EmployeeDepartmentHistory AS T2 ON T1.DepartmentID = T2.DepartmentID WHERE T1.Name = 'Finance'",
        "difficulty": "simple"
    },
    {
        "question_id": 544,
        "prev_question_id": 6644,
        "db_id": "retail_world",
        "question": "How many orders were handled by Michael Suyama. State the order ID.",
        "evidence": "",
        "SQL": "SELECT COUNT(T2.OrderID) FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.FirstName = 'Michael' AND T1.LastName = 'Suyama'",
        "difficulty": "simple"
    },
    {
        "question_id": 545,
        "prev_question_id": 3234,
        "db_id": "donor",
        "question": "Is the donor of the project 'Calculate, Financial Security For Tomorrow Starts Today! ' a teacher?",
        "evidence": "Calculate, Financial Security For Tomorrow Starts Today! ' is title; donor is a teacher refers to is_teacher_acct = 't'",
        "SQL": "SELECT T2.is_teacher_acct FROM essays AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T1.title LIKE 'Calculate, Financial Security For Tomorrow Starts Today! '",
        "difficulty": "simple"
    },
    {
        "question_id": 546,
        "prev_question_id": 5139,
        "db_id": "address",
        "question": "Which CBSAs have more than 10 zip codes?",
        "evidence": "has more than 10 zip codes refers to CBSA where count(CBSA) > 10",
        "SQL": "SELECT T1.CBSA_name FROM CBSA AS T1 INNER JOIN zip_data AS T2 ON T1.CBSA = T2.CBSA GROUP BY T1.CBSA HAVING COUNT(T2.zip_code) > 10",
        "difficulty": "simple"
    },
    {
        "question_id": 547,
        "prev_question_id": 4494,
        "db_id": "student_loan",
        "question": "Among the students who have been absent for four months, provide any five students' names and enlisted organizations.",
        "evidence": "absent for four months refers to month = 4; enlisted organizations refers to organ;",
        "SQL": "SELECT T2.name, T2.organ FROM longest_absense_from_school AS T1 INNER JOIN enlist AS T2 ON T2.name = T1.name WHERE T1.month = 4 LIMIT 5",
        "difficulty": "simple"
    },
    {
        "question_id": 548,
        "prev_question_id": 8878,
        "db_id": "cookbook",
        "question": "Which recipe in the database contains the most total fat? Give its title.",
        "evidence": "the most total fat refers to MAX(total_fat)",
        "SQL": "SELECT T1.title FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id ORDER BY T2.total_fat DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 549,
        "prev_question_id": 115,
        "db_id": "movie_platform",
        "question": "What's the number of the paying subscribers when rating a movie after the year 2014?",
        "evidence": "paying subscribers refers to user_has_payment_method = 1; rating a movie after the year 2014 refers to rating_date_utc>'2014%'",
        "SQL": "SELECT COUNT(user_subscriber) FROM ratings_users WHERE user_has_payment_method = 1 AND rating_date_utc > '2014%'",
        "difficulty": "simple"
    },
    {
        "question_id": 550,
        "prev_question_id": 7551,
        "db_id": "image_and_language",
        "question": "Which object classes belong to the onion category?",
        "evidence": "onion category refers to OBJ_CLASS = 'onion';",
        "SQL": "SELECT OBJ_CLASS_ID FROM OBJ_CLASSES WHERE OBJ_CLASS = 'onion'",
        "difficulty": "simple"
    },
    {
        "question_id": 551,
        "prev_question_id": 3065,
        "db_id": "cars",
        "question": "What is the acceleration of the most expensive car?",
        "evidence": "the most expensive refers to max(price)",
        "SQL": "SELECT T1.acceleration FROM data AS T1 INNER JOIN price AS T2 ON T1.ID = T2.ID ORDER BY T2.price DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 552,
        "prev_question_id": 2502,
        "db_id": "genes",
        "question": "Lists all genes by identifier number located in the cytoplasm and whose function is metabolism.",
        "evidence": "",
        "SQL": "SELECT DISTINCT GeneID FROM Genes WHERE Localization = 'cytoplasm' AND Function = 'METABOLISM'",
        "difficulty": "simple"
    },
    {
        "question_id": 553,
        "prev_question_id": 2102,
        "db_id": "world_development_indicators",
        "question": "How many footnotes did Aruba got on different series code in the year 2002?",
        "evidence": "Aruba is the name of country where ShortName = 'Aruba'",
        "SQL": "SELECT COUNT(T2.SeriesCode) FROM Country AS T1 INNER JOIN FootNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T1.ShortName = 'Aruba' AND T2.Year = 'YR2002'",
        "difficulty": "simple"
    },
    {
        "question_id": 554,
        "prev_question_id": 2216,
        "db_id": "world_development_indicators",
        "question": "What are the full names of the countries in South Asia that belongs to the low income group?",
        "evidence": "full name refers to longname; the countries in South Asia refer to region = 'South Asia'; belongs to the low income group refers to incomegroup = 'Low income'",
        "SQL": "SELECT LongName FROM Country WHERE IncomeGroup = 'Low income' AND Region = 'South Asia'",
        "difficulty": "simple"
    },
    {
        "question_id": 555,
        "prev_question_id": 7179,
        "db_id": "works_cycles",
        "question": "What are the product assembly ID that come with unit measure code EA and BOM level of 2, at the same time have per assembly quantity of more than 10?",
        "evidence": "Per assembly quantity of more than 10 is expresses as PerAssemblyQty>10",
        "SQL": "SELECT ProductAssemblyID FROM BillOfMaterials WHERE UnitMeasureCode = 'EA' AND BOMLevel = 2 AND PerAssemblyQty > 10",
        "difficulty": "simple"
    },
    {
        "question_id": 556,
        "prev_question_id": 1828,
        "db_id": "soccer_2016",
        "question": "In which country do the majority of the players are from?",
        "evidence": "country refers to Country_Name; the majority of the players\u00a0 refers to max(count(Country_Name))",
        "SQL": "SELECT T1.Country_Name FROM Country AS T1 INNER JOIN Player AS T2 ON T1.Country_Id = T2.Country_Name GROUP BY T2.Country_Name ORDER BY COUNT(T2.Country_Name) DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 557,
        "prev_question_id": 5562,
        "db_id": "menu",
        "question": "How many dishes are there on the menu \"Zentral Theater Terrace\"?",
        "evidence": "Zentral Theater Terrace is a name of menu;",
        "SQL": "SELECT COUNT(*) FROM Menu WHERE name = 'Zentral Theater Terrace'",
        "difficulty": "simple"
    },
    {
        "question_id": 558,
        "prev_question_id": 8819,
        "db_id": "food_inspection",
        "question": "What is the name of the establishment with the highest number of low risk violations in 2014?",
        "evidence": "establishment with the highest number of low risk violations refers to business_id where MAX(COUNT(risk_category = 'Low Risk')); year(date) = 2014;",
        "SQL": "SELECT T2.name FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE STRFTIME('%Y', T1.`date`) = '2014' AND T1.risk_category = 'Low Risk' GROUP BY T2.name ORDER BY COUNT(T2.business_id) DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 559,
        "prev_question_id": 6039,
        "db_id": "books",
        "question": "On what dates were books ordered at a price of 16.54?",
        "evidence": "price of 16.54 refers to price = 16.54; dates the book ordered refers to order_date",
        "SQL": "SELECT T1.order_date FROM cust_order AS T1 INNER JOIN order_line AS T2 ON T1.order_id = T2.order_id WHERE T2.price = 16.54",
        "difficulty": "simple"
    },
    {
        "question_id": 560,
        "prev_question_id": 2779,
        "db_id": "european_football_1",
        "question": "Which country did Bradford Team belongs to?",
        "evidence": "Bradford team refers to HomeTeam = 'Bradford' or AwayTeam = 'Bradford';",
        "SQL": "SELECT DISTINCT T2.country FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div = T2.division WHERE T1.HomeTeam = 'Bradford' OR T1.AwayTeam = 'Bradford'",
        "difficulty": "simple"
    },
    {
        "question_id": 561,
        "prev_question_id": 3544,
        "db_id": "authors",
        "question": "Write down the author's name and IDs who are affiliated with Univeristiy of Oulu.",
        "evidence": "\"University of Oulu\" is the Affiliation Organization",
        "SQL": "SELECT Name, id FROM Author WHERE Affiliation = 'University of Oulu'",
        "difficulty": "simple"
    },
    {
        "question_id": 562,
        "prev_question_id": 7085,
        "db_id": "works_cycles",
        "question": "What is the average total due price of products with approved status?",
        "evidence": "approved refers to Status = 2 , average total due price = AVG( DIVIDE(TotalDue, SUM(Status = 2 )))",
        "SQL": "SELECT SUM(TotalDue) / COUNT(TotalDue) FROM PurchaseOrderHeader WHERE Status = 2",
        "difficulty": "simple"
    },
    {
        "question_id": 563,
        "prev_question_id": 1220,
        "db_id": "talkingdata",
        "question": "Please list any three devices that are owned by female users.",
        "evidence": "female refers to gender = 'F';",
        "SQL": "SELECT device_id FROM gender_age WHERE gender = 'F' LIMIT 3",
        "difficulty": "simple"
    },
    {
        "question_id": 564,
        "prev_question_id": 2826,
        "db_id": "professional_basketball",
        "question": "Among the players who went to high school in Chicago, how many of them belongs to the west conference?",
        "evidence": "high school in Chicago refers to hsCity = 'Chicago'; belong to the west conference refers to divID = 'WE'",
        "SQL": "SELECT COUNT(DISTINCT T1.playerID) FROM players AS T1 INNER JOIN player_allstar AS T2 ON T1.playerID = T2.playerID WHERE T1.hsCity = 'Chicago' AND T2.conference = 'West'",
        "difficulty": "simple"
    },
    {
        "question_id": 565,
        "prev_question_id": 8034,
        "db_id": "university",
        "question": "Name the university that had the most students in 2011.",
        "evidence": "in 2011 refers to year = 2011; had the most students refers to MAX(num_students); name of university refers to university_name;",
        "SQL": "SELECT T2.university_name FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.year = 2011 ORDER BY T1.num_students DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 566,
        "prev_question_id": 8018,
        "db_id": "university",
        "question": "List the name of universities located in Spain.",
        "evidence": "name of universities refers to university_name; located in Spain refers to country_name = 'Spain';",
        "SQL": "SELECT T1.university_name FROM university AS T1 INNER JOIN country AS T2 ON T1.country_id = T2.id WHERE T2.country_name = 'Spain'",
        "difficulty": "simple"
    },
    {
        "question_id": 567,
        "prev_question_id": 1358,
        "db_id": "law_episode",
        "question": "Please list any three episodes that were most enjoyed by the viewers.",
        "evidence": "episode refers to title; most enjoyed by the viewers refers to stars = 10",
        "SQL": "SELECT T1.title FROM Episode AS T1 INNER JOIN Vote AS T2 ON T1.episode_id = T2.episode_id WHERE T2.stars = 10 LIMIT 3",
        "difficulty": "simple"
    },
    {
        "question_id": 568,
        "prev_question_id": 586,
        "db_id": "codebase_comments",
        "question": "What is the language of the method used in the solution path \"opendns_diagnosticapp\\windows\\OpenDnsDiagnostic.sln\"?",
        "evidence": "language refers to Lang;",
        "SQL": "SELECT T2.Lang FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T1.Path = 'opendns_diagnosticappwindowsOpenDnsDiagnostic.sln'",
        "difficulty": "simple"
    },
    {
        "question_id": 569,
        "prev_question_id": 3680,
        "db_id": "authors",
        "question": "Mention the name of author for paper id 5 and state the keyword of this page.",
        "evidence": "",
        "SQL": "SELECT T1.Name, T3.Keyword FROM Author AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.AuthorId INNER JOIN Paper AS T3 ON T2.PaperId = T3.Id WHERE T2.PaperId = 5",
        "difficulty": "simple"
    },
    {
        "question_id": 570,
        "prev_question_id": 7601,
        "db_id": "image_and_language",
        "question": "Write 10 coordinates with the object class \"pizza.\"",
        "evidence": "coordinates for the object refer to X, Y, W and H coordinates of the bounding box; object class \"pizza\" refers to OBJ_CLASS = 'pizza';",
        "SQL": "SELECT T1.IMG_ID, T1.X, T1.Y FROM IMG_OBJ AS T1 INNER JOIN OBJ_CLASSES AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID WHERE T2.OBJ_CLASS = 'pizza' LIMIT 10",
        "difficulty": "simple"
    },
    {
        "question_id": 571,
        "prev_question_id": 7958,
        "db_id": "music_platform_2",
        "question": "What is the average rating of all the podcasts in category art?",
        "evidence": "category art refers to category = 'arts'; average rating = Divide (Sum (rating), Count (podcast_id))",
        "SQL": "SELECT AVG(T2.rating) FROM categories AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T1.category = 'arts'",
        "difficulty": "simple"
    },
    {
        "question_id": 572,
        "prev_question_id": 5335,
        "db_id": "beer_factory",
        "question": "What is the credit card type used by Kenneth Walton?",
        "evidence": "FALSE;",
        "SQL": "SELECT DISTINCT T2.CreditCardType FROM customers AS T1 INNER JOIN `transaction` AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.First = 'Kenneth' AND T1.Last = 'Walton'",
        "difficulty": "simple"
    },
    {
        "question_id": 573,
        "prev_question_id": 192,
        "db_id": "book_publishing_company",
        "question": "Name all the authors for all business titles.",
        "evidence": "business title refers to title under business where type = 'business'",
        "SQL": "SELECT T3.au_fname, T3.au_lname FROM titles AS T1 INNER JOIN titleauthor AS T2 ON T1.title_id = T2.title_id INNER JOIN authors AS T3 ON T2.au_id = T3.au_id WHERE T1.type = 'business'",
        "difficulty": "simple"
    },
    {
        "question_id": 574,
        "prev_question_id": 1771,
        "db_id": "restaurant",
        "question": "How many cities are there in Monterey?",
        "evidence": "Monterey refers to region = 'monterey'",
        "SQL": "SELECT COUNT(DISTINCT city) FROM geographic WHERE region = 'monterey'",
        "difficulty": "simple"
    },
    {
        "question_id": 575,
        "prev_question_id": 8072,
        "db_id": "university",
        "question": "In which year did university ID 1 have the most students?",
        "evidence": "have the most students refers to MAX(num_students)",
        "SQL": "SELECT year FROM university_year WHERE university_id = 1 ORDER BY num_students DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 576,
        "prev_question_id": 4153,
        "db_id": "citeseer",
        "question": "Find the words cited in papers that are cited by sima01computational?",
        "evidence": "paper cited by refers to citing_paper_id; citing_paper_id = 'sima01computational';",
        "SQL": "SELECT DISTINCT T2.word_cited_id FROM cites AS T1 INNER JOIN content AS T2 ON T1.cited_paper_id = T2.paper_id WHERE T1.citing_paper_id = 'sima01computational'",
        "difficulty": "simple"
    },
    {
        "question_id": 577,
        "prev_question_id": 7018,
        "db_id": "works_cycles",
        "question": "List all product names and its product line for all purchase order with order quantity of 5000 or more.",
        "evidence": "Purchase order with order quantity of 5000 or more refers to OrderQty> = 5000",
        "SQL": "SELECT T1.Name, T1.ProductLine FROM Product AS T1 INNER JOIN PurchaseOrderDetail AS T2 ON T1.ProductID = T2.ProductID WHERE T2.OrderQty > 4999",
        "difficulty": "simple"
    },
    {
        "question_id": 578,
        "prev_question_id": 5090,
        "db_id": "address",
        "question": "Please list the Asian populations of all the residential areas with the bad alias \"URB San Joaquin\".",
        "evidence": "\"URB San Joaquin\" is the bad_alias",
        "SQL": "SELECT SUM(T1.asian_population) FROM zip_data AS T1 INNER JOIN avoid AS T2 ON T1.zip_code = T2.zip_code WHERE T2.bad_alias = 'URB San Joaquin'",
        "difficulty": "simple"
    },
    {
        "question_id": 579,
        "prev_question_id": 8675,
        "db_id": "chicago_crime",
        "question": "Please list the area name of the communities in the Far north side, which has a population of more than 50000 but less than 70000.",
        "evidence": "area name refers to community_area_name; the Far north side refers to side = 'Far North'; a population of more than 50000 but less than 70000 refers to population BETWEEN '50000' AND '70000'",
        "SQL": "SELECT community_area_name, side FROM Community_Area WHERE side = 'Far North ' AND population BETWEEN 50000 AND 70000",
        "difficulty": "simple"
    },
    {
        "question_id": 580,
        "prev_question_id": 3009,
        "db_id": "shakespeare",
        "question": "When did Shakespeare create his work that has 154 scenes?",
        "evidence": "When refers to Date; has 154 scenes refers to count(Scene) = 154",
        "SQL": "SELECT T1.Date, T1.id FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T2.Scene = 154",
        "difficulty": "simple"
    },
    {
        "question_id": 581,
        "prev_question_id": 8617,
        "db_id": "chicago_crime",
        "question": "Give the FBI code description of case No.JB134191.",
        "evidence": "case No.JB134191 refers to case_number = 'JB134191'",
        "SQL": "SELECT description FROM Crime AS T1 INNER JOIN FBI_Code AS T2 ON T1.fbi_code_no = T2.fbi_code_no WHERE T1.case_number = 'JB134191'",
        "difficulty": "simple"
    },
    {
        "question_id": 582,
        "prev_question_id": 4219,
        "db_id": "simpson_episodes",
        "question": "List down the award name, result, credit category and credited status of the \"Billy Kimball\".",
        "evidence": "\"Billy Kimball\" is the person; award name refers to award; credited category refers to category; credited status refers to credited; credited = 'true' means the person is included in the credit list and vice versa",
        "SQL": "SELECT DISTINCT T1.award, T1.result, T2.category, T2.credited FROM Award AS T1 INNER JOIN Credit AS T2 ON T2.episode_id = T1.episode_id WHERE T2.person = 'Billy Kimball';",
        "difficulty": "simple"
    },
    {
        "question_id": 583,
        "prev_question_id": 3304,
        "db_id": "donor",
        "question": "What is the total number of students impacted by the projects with a donation from a donor with zip code \"22205\"?",
        "evidence": "zip code \"22205\" refers to donor_zip = '22205'; students impacted refers to students_reached",
        "SQL": "SELECT SUM(T2.students_reached) FROM donations AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.donor_zip = 22205",
        "difficulty": "simple"
    },
    {
        "question_id": 584,
        "prev_question_id": 5826,
        "db_id": "airline",
        "question": "For the flight on 2018/8/1 that was delayed for the longest time, which was the destination airport of this flight?",
        "evidence": "on 2018/8/1 refers to FL_DATE = '2018/8/1';\u00a0 delayed for the longest time refers to MAX(DEP_DELAY); destination airport refers to DEST;",
        "SQL": "SELECT T1.Description FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.DEST WHERE T2.FL_DATE = '2018/8/1' ORDER BY T2.DEP_DELAY DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 585,
        "prev_question_id": 3431,
        "db_id": "video_games",
        "question": "What year were the first game released?",
        "evidence": "year the first game was released refers to MIN(release_year);",
        "SQL": "SELECT T.release_year FROM game_platform AS T ORDER BY T.release_year ASC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 586,
        "prev_question_id": 566,
        "db_id": "codebase_comments",
        "question": "How many English language codes whose comments for the method are in the XML format?",
        "evidence": "English language refers to Lang = 'en'; the comments for this method is XML format refers to CommentIsXml = 1;",
        "SQL": "SELECT COUNT(Lang) FROM Method WHERE Lang = 'en' AND CommentIsXml = 1",
        "difficulty": "simple"
    },
    {
        "question_id": 587,
        "prev_question_id": 5152,
        "db_id": "address",
        "question": "Provide the alias and elevation of the city with zip code 1028.",
        "evidence": "",
        "SQL": "SELECT T1.alias, T2.elevation FROM alias AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.zip_code = 1028",
        "difficulty": "simple"
    },
    {
        "question_id": 588,
        "prev_question_id": 1178,
        "db_id": "talkingdata",
        "question": "List the phone brands and models of the users under 10 years of age.",
        "evidence": "models refers to device_model; under 10 years of age refers to age < 10;",
        "SQL": "SELECT T2.phone_brand, T2.device_model FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T1.age < 10",
        "difficulty": "simple"
    },
    {
        "question_id": 589,
        "prev_question_id": 3286,
        "db_id": "donor",
        "question": "How many teachers have made some type of donation for projects in Chicago?",
        "evidence": "in Chicago refers to school_city = 'Chicago'; teachers refers to is_teacher_acct = 't'",
        "SQL": "SELECT COUNT(DISTINCT T2.teacher_acctid) FROM donations AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.is_teacher_acct = 't' AND T2.school_city = 'Chicago'",
        "difficulty": "simple"
    },
    {
        "question_id": 590,
        "prev_question_id": 925,
        "db_id": "cs_semester",
        "question": "What is the name of the most difficult course?",
        "evidence": "difficulty of a course refers to diff; most difficult course refers to MAX(diff);",
        "SQL": "SELECT name FROM course WHERE diff = ( SELECT MAX(diff) FROM course )",
        "difficulty": "simple"
    },
    {
        "question_id": 591,
        "prev_question_id": 5062,
        "db_id": "olympics",
        "question": "Provide the name of competitors from Greece.",
        "evidence": "name refers to full_name; Greece refers to region_name = 'Greece';",
        "SQL": "SELECT T3.full_name FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.region_name = 'Greece'",
        "difficulty": "simple"
    },
    {
        "question_id": 592,
        "prev_question_id": 9317,
        "db_id": "movie_3",
        "question": "What are the addresses for the stores?",
        "evidence": "",
        "SQL": "SELECT T2.address FROM store AS T1 INNER JOIN address AS T2 ON T1.address_id = T2.address_id",
        "difficulty": "simple"
    },
    {
        "question_id": 593,
        "prev_question_id": 6681,
        "db_id": "retails",
        "question": "How many customers are in Brazil?",
        "evidence": "Brazil is the name of the nation which refers to n_name = 'BRAZIL'",
        "SQL": "SELECT COUNT(T1.c_custkey) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T2.n_name = 'BRAZIL'",
        "difficulty": "simple"
    },
    {
        "question_id": 594,
        "prev_question_id": 5759,
        "db_id": "language_corpus",
        "question": "State the Wikipedia page title that has revision page id of 28040864.",
        "evidence": "revision page id of 28040864 refers to revision = 28040864;",
        "SQL": "SELECT title FROM pages WHERE revision = 28040864",
        "difficulty": "simple"
    },
    {
        "question_id": 595,
        "prev_question_id": 1132,
        "db_id": "talkingdata",
        "question": "Which category does the app id No.894384172610331000 belong to?",
        "evidence": "",
        "SQL": "SELECT T1.category FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T1.label_id = T2.label_id WHERE T2.app_id = '894384172610331000'",
        "difficulty": "simple"
    },
    {
        "question_id": 596,
        "prev_question_id": 2804,
        "db_id": "professional_basketball",
        "question": "List all the coaches with more game lost than won from year 2000-2010. List the coach ID, team name and year.",
        "evidence": "from year 2000 to 2010 refers to year between 2000 and 2010; more game lost then won refers to lost > won",
        "SQL": "SELECT DISTINCT T1.coachID, T2.tmID, T1.year FROM coaches AS T1 INNER JOIN teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.year BETWEEN 2000 AND 2010 AND T2.lost > T2.won",
        "difficulty": "simple"
    },
    {
        "question_id": 597,
        "prev_question_id": 6004,
        "db_id": "books",
        "question": "What is the address that received the most orders?",
        "evidence": "address refers to street_name, city; received the most orders refers to Max(count(dest_address_id))",
        "SQL": "SELECT T2.street_name, T2.city FROM cust_order AS T1 INNER JOIN address AS T2 ON T1.dest_address_id = T2.address_id GROUP BY T2.street_number, T2.street_name, T2.city ORDER BY COUNT(T1.dest_address_id) DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 598,
        "prev_question_id": 6727,
        "db_id": "retails",
        "question": "How many part supplies were nearly out of stock?",
        "evidence": "supplies nearly out of stock refer to ps_partkey where ps_availqty < 10;",
        "SQL": "SELECT COUNT(ps_suppkey) FROM partsupp WHERE ps_availqty < 10",
        "difficulty": "simple"
    },
    {
        "question_id": 599,
        "prev_question_id": 2163,
        "db_id": "world_development_indicators",
        "question": "Which countries use Euro as their currency? List down the table name.",
        "evidence": "CurrencyUnit = 'Euro';",
        "SQL": "SELECT TableName FROM Country WHERE CurrencyUnit = 'Euro'",
        "difficulty": "simple"
    },
    {
        "question_id": 600,
        "prev_question_id": 4460,
        "db_id": "student_loan",
        "question": "How many students has the longest absense from school for 5 months?",
        "evidence": "absense from school for 5 month refers to month = 5",
        "SQL": "SELECT COUNT(name) FROM longest_absense_from_school WHERE month = 5",
        "difficulty": "simple"
    },
    {
        "question_id": 601,
        "prev_question_id": 3190,
        "db_id": "donor",
        "question": "Among all the donors from New York, how many of them are teachers?",
        "evidence": "from New York refers to donor_city = 'New York'; donor is a teacher refers to is_teacher_acct = 't';",
        "SQL": "SELECT COUNT(donationid) FROM donations WHERE is_teacher_acct = 't' AND donor_city = 'New York'",
        "difficulty": "simple"
    },
    {
        "question_id": 602,
        "prev_question_id": 6425,
        "db_id": "retail_world",
        "question": "What is the family name of the employee who shipped the order 10521 to CACTU?",
        "evidence": "order 10521 refers to OrderID = 10521; CustomerID = 'CACTU'; family name refers to LastName;",
        "SQL": "SELECT T1.LastName FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T2.OrderID = 10521 AND T2.CustomerID = 'CACTU'",
        "difficulty": "simple"
    },
    {
        "question_id": 603,
        "prev_question_id": 8639,
        "db_id": "chicago_crime",
        "question": "How many domestic violence cases were reported in May 2018?",
        "evidence": "domestic violence refers to domestic = 'TRUE'; in May 2018 refers to date LIKE '5/%/2018%'",
        "SQL": "SELECT COUNT(*) FROM Crime WHERE date LIKE '5/%/2018%' AND domestic = 'TRUE'",
        "difficulty": "simple"
    },
    {
        "question_id": 604,
        "prev_question_id": 5000,
        "db_id": "olympics",
        "question": "State the name of sport id 19.",
        "evidence": "name of sport refers to sport_name",
        "SQL": "SELECT sport_name FROM sport WHERE id = 19",
        "difficulty": "simple"
    },
    {
        "question_id": 605,
        "prev_question_id": 4027,
        "db_id": "public_review_platform",
        "question": "List out the category name of business id 5.",
        "evidence": "",
        "SQL": "SELECT T1.category_name FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id WHERE T2.business_id = 5",
        "difficulty": "simple"
    },
    {
        "question_id": 606,
        "prev_question_id": 4112,
        "db_id": "public_review_platform",
        "question": "How many open businesses in the City of Phoenix have users left a long review?",
        "evidence": "open businesses refers to active = 'true'; long review refers to review_length = 'Long'",
        "SQL": "SELECT COUNT(DISTINCT T2.business_id) FROM Reviews AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id WHERE T1.review_length = 'Long' AND T2.active = 'true' AND T2.city = 'Phoenix'",
        "difficulty": "simple"
    },
    {
        "question_id": 607,
        "prev_question_id": 9109,
        "db_id": "movie_3",
        "question": "How many films with the rental rate of $2.99 have the special feature of \"Deleted Scenes\"?",
        "evidence": "rental rate of $2.99 refers to rental_rate = 2.99; film refers to title",
        "SQL": "SELECT COUNT(film_id) FROM film WHERE rental_rate = 2.99 AND special_features = 'Deleted Scenes'",
        "difficulty": "simple"
    },
    {
        "question_id": 608,
        "prev_question_id": 1611,
        "db_id": "car_retails",
        "question": "Where's Foon Yue Tseng's office located at? Give the detailed address.",
        "evidence": "Detailed address comprises addressLine1 and addressLine2;",
        "SQL": "SELECT T1.addressLine1, T1.addressLine2 FROM offices AS T1 INNER JOIN employees AS T2 ON T1.officeCode = T2.officeCode WHERE T2.firstName = 'Foon Yue' AND T2.lastName = 'Tseng'",
        "difficulty": "simple"
    },
    {
        "question_id": 609,
        "prev_question_id": 6864,
        "db_id": "retails",
        "question": "How many parts have a jumbo case container?",
        "evidence": "jumbo case container refers to p_container = 'JUMBO CASE'",
        "SQL": "SELECT COUNT(p_partkey) FROM part WHERE p_container = 'JUMBO CASE'",
        "difficulty": "simple"
    },
    {
        "question_id": 610,
        "prev_question_id": 8519,
        "db_id": "software_company",
        "question": "How many customers are from the place with the highest average income per month?",
        "evidence": "place with the highest average income per month refers to GEOID where MAX(INCOME_K);",
        "SQL": "SELECT COUNT(T1.ID) FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID ORDER BY T2.INCOME_K DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 611,
        "prev_question_id": 7874,
        "db_id": "world",
        "question": "Write down the name of the largest population country.",
        "evidence": "largest population refers to MAX(Population);",
        "SQL": "SELECT Name FROM Country ORDER BY Population DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 612,
        "prev_question_id": 6121,
        "db_id": "food_inspection_2",
        "question": "After Azha Restaurant Inc. passed the inspection on 2010/1/21, when was the follow-up inspection done?",
        "evidence": "Azha Restaurant Inc. refers to dba_name = 'Azha Restaurant Inc.'; on 2010/1/21 refers to inspection_date = '2010-01-21'; follow-up inspection date refers to followup_to",
        "SQL": "SELECT T1.followup_to FROM inspection AS T1 INNER JOIN establishment AS T2 ON T1.license_no = T2.license_no WHERE T2.dba_name = 'Azha Restaurant Inc.' AND T1.results = 'Pass' AND T1.inspection_date = '2010-01-21'",
        "difficulty": "simple"
    },
    {
        "question_id": 613,
        "prev_question_id": 2898,
        "db_id": "professional_basketball",
        "question": "List all the coatches of the Oklahoma City Thunder",
        "evidence": "coach refers to coachID; Oklahoma City Thunder refers to name = 'Oklahoma City Thunder'",
        "SQL": "SELECT DISTINCT coachID FROM coaches AS T1 INNER JOIN teams AS T2 ON T1.tmID = T2.tmID WHERE name = 'Oklahoma City Thunder'",
        "difficulty": "simple"
    },
    {
        "question_id": 614,
        "prev_question_id": 2905,
        "db_id": "professional_basketball",
        "question": "Please list the players who received the \"Most Valuable Player\" award in the NBA league after the year of 1990, along with their IDs.",
        "evidence": "player refers to playerID; \"Most Valuable Player\" award refers to award = 'Most Valuable Player'; after the year of 1990 refers to year > 1990; ID refers to playerID",
        "SQL": "SELECT playerID FROM awards_players WHERE year > 1990 AND award = 'Most Valuable Player' AND lgID = 'NBA'",
        "difficulty": "simple"
    },
    {
        "question_id": 615,
        "prev_question_id": 9362,
        "db_id": "movie_3",
        "question": "What is the title of the restricted film, whose length is 71 minutes and whose replacement cost is $29.99?",
        "evidence": "restricted means rating = 'R'; length is 71 minutes refers to length = 71; replacement cost is $29.99 refers to replacement_cost = 29.99",
        "SQL": "SELECT title FROM film WHERE replacement_cost = 29.99 AND rating = 'R' AND length = 71",
        "difficulty": "simple"
    },
    {
        "question_id": 616,
        "prev_question_id": 138,
        "db_id": "movie_platform",
        "question": "Name all the list titles created by user 4208563.",
        "evidence": "user 4208563 refers to user_id = 4208563",
        "SQL": "SELECT list_title FROM lists WHERE user_id LIKE 4208563",
        "difficulty": "simple"
    },
    {
        "question_id": 617,
        "prev_question_id": 1776,
        "db_id": "restaurant",
        "question": "How many Chinese restaurants are there on 1st st, Livermore?",
        "evidence": "Chinese restaurant refers to food_type = 'chinese'; 1st st refers to street_name = '1st st'; Livermore refers to city = 'livermore'",
        "SQL": "SELECT COUNT(T1.id_restaurant) FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.city = 'livermore' AND T1.food_type = 'chinese' AND T2.street_name = '1st st'",
        "difficulty": "simple"
    },
    {
        "question_id": 618,
        "prev_question_id": 6191,
        "db_id": "food_inspection_2",
        "question": "Provide the first name of employee who did inspection ID 48225?",
        "evidence": "",
        "SQL": "SELECT T1.first_name FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id WHERE T2.inspection_id = 48225",
        "difficulty": "simple"
    },
    {
        "question_id": 619,
        "prev_question_id": 6334,
        "db_id": "retail_world",
        "question": "Provide the number of orders that were handled by Michael Suyama.",
        "evidence": "",
        "SQL": "SELECT COUNT(T2.OrderID) FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.FirstName = 'Michael' AND T1.LastName = 'Suyama'",
        "difficulty": "simple"
    },
    {
        "question_id": 620,
        "prev_question_id": 9219,
        "db_id": "movie_3",
        "question": "How many rental IDs belong to Eleanor Hunt?",
        "evidence": "'Eleanor Hunt' is the full name of a customer; full name refers to first_name, last_name",
        "SQL": "SELECT COUNT(T1.rental_id) FROM rental AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = 'Eleanor' AND T2.last_name = 'Hunt'",
        "difficulty": "simple"
    },
    {
        "question_id": 621,
        "prev_question_id": 2182,
        "db_id": "world_development_indicators",
        "question": "Which country have completed vital registration? List all the countries.",
        "evidence": "have completed vital registration refers to VitalRegistrationComplete = Yes; country name refers to ShortName",
        "SQL": "SELECT ShortName FROM Country WHERE VitalRegistrationComplete = 'Yes'",
        "difficulty": "simple"
    },
    {
        "question_id": 622,
        "prev_question_id": 7121,
        "db_id": "works_cycles",
        "question": "What job is person number 322 currently holding?",
        "evidence": "person number 322 refers to PersonID = 18; job is the name of contacttype",
        "SQL": "SELECT T1.Name FROM ContactType AS T1 INNER JOIN BusinessEntityContact AS T2 ON T1.ContactTypeID = T2.ContactTypeID WHERE T2.BusinessEntityID = 332",
        "difficulty": "simple"
    },
    {
        "question_id": 623,
        "prev_question_id": 7996,
        "db_id": "university",
        "question": "What is the name of the university that has the lowest number of students of all time?",
        "evidence": "has the lowest number of students refers to min(num_students); name of the university refers to university_name",
        "SQL": "SELECT T2.university_name FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id ORDER BY T1.num_students LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 624,
        "prev_question_id": 8229,
        "db_id": "mondial_geo",
        "question": "When did 'Bulgaria' gain independence?",
        "evidence": "",
        "SQL": "SELECT T2.Independence FROM country AS T1 INNER JOIN politics AS T2 ON T1.Code = T2.Country WHERE T1.Name = 'Bulgaria'",
        "difficulty": "simple"
    },
    {
        "question_id": 625,
        "prev_question_id": 3641,
        "db_id": "authors",
        "question": "How many of the papers are preprinted?",
        "evidence": "year = 0 means this paper is preprint; papers refers to Paper.Id",
        "SQL": "SELECT COUNT(Id) FROM Paper WHERE ConferenceId = 0 AND JournalId = 0",
        "difficulty": "simple"
    },
    {
        "question_id": 626,
        "prev_question_id": 6653,
        "db_id": "retail_world",
        "question": "How many customers are located in London?",
        "evidence": "London refers to City = 'London'",
        "SQL": "SELECT COUNT(CustomerID) FROM Customers WHERE City = 'London'",
        "difficulty": "simple"
    },
    {
        "question_id": 627,
        "prev_question_id": 8583,
        "db_id": "software_company",
        "question": "Describe the average income per month and yearly income of the geographic ID in which customer of ID \"209556\" and \"290135\".",
        "evidence": "the average income per month refers to INCOME_K; yearly income of geographic ID refers to GEOID where MULTIPLY(INHABITANTS_K, INCOME_K, 12);",
        "SQL": "SELECT T2.INCOME_K, T2.INHABITANTS_K * T2.INCOME_K * 12 FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.ID = 209556 OR T1.ID = 290135",
        "difficulty": "simple"
    },
    {
        "question_id": 628,
        "prev_question_id": 1710,
        "db_id": "restaurant",
        "question": "What are the restaurants that are located at \"19th St. Oakland\"?",
        "evidence": "restaurant refers to label; \"19th St. Oakland\" refers to street_name = '19th St' AND city = 'Oakland'",
        "SQL": "SELECT T1.id_restaurant FROM generalinfo AS T1 INNER JOIN location AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.city = 'Oakland' AND T2.street_name = '19th St'",
        "difficulty": "simple"
    },
    {
        "question_id": 629,
        "prev_question_id": 1165,
        "db_id": "talkingdata",
        "question": "Calculate the percentage of male users among all device users.",
        "evidence": "percentage = DVIDE(SUM(gender = 'M'), COUNT(device_id)); male refers to gender = 'M';",
        "SQL": "SELECT SUM(IIF(gender = 'M', 1, 0)) / COUNT(device_id) AS per FROM gender_age",
        "difficulty": "moderate"
    },
    {
        "question_id": 630,
        "prev_question_id": 5588,
        "db_id": "shipping",
        "question": "How much more pounds in total were transported to New York than to Chicago?",
        "evidence": "\"New York\" and \"Chicago\" are both city_name; more pounds in total refers to Subtract (Sum(weight where city_name = 'New York'), Sum(weight where city_name = 'Chicago'))",
        "SQL": "SELECT SUM(CASE WHEN T2.city_name = 'New York' THEN T1.weight ELSE 0 END) - SUM(CASE WHEN T2.city_name = 'Chicago' THEN T1.weight ELSE 0 END) FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id",
        "difficulty": "moderate"
    },
    {
        "question_id": 631,
        "prev_question_id": 2094,
        "db_id": "world_development_indicators",
        "question": "Among the countries with note on the series code SM.POP.TOTL, how many of them are in the low-income group?",
        "evidence": "countries refer to Countrycode; low-income group refers to incomegroup = 'Low income'; with notes refers to description IS NOT NULL; series code SM.POP.TOTL refers to Seriescode = 'SM.POP.TOTL'",
        "SQL": "SELECT COUNT(T1.Countrycode) FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode WHERE T2.Seriescode = 'SM.POP.TOTL' AND T1.IncomeGroup = 'Low income'",
        "difficulty": "moderate"
    },
    {
        "question_id": 632,
        "prev_question_id": 6657,
        "db_id": "retail_world",
        "question": "How many orders that the employees who are located in Tacoma handled?",
        "evidence": "located in Tacoma refers to City = 'Tacoma'",
        "SQL": "SELECT COUNT(T2.OrderID) FROM Employees AS T1 INNER JOIN Orders AS T2 ON T1.EmployeeID = T2.EmployeeID WHERE T1.City = 'Tacoma'",
        "difficulty": "moderate"
    },
    {
        "question_id": 633,
        "prev_question_id": 8887,
        "db_id": "cookbook",
        "question": "State the title of the recipe with most kinds of ingredients.",
        "evidence": "the most kinds of ingredients refers to MAX(COUNT(recipe_id))",
        "SQL": "SELECT T1.title FROM Recipe AS T1 INNER JOIN Quantity AS T2 ON T1.recipe_id = T2.recipe_id GROUP BY T1.title ORDER BY COUNT(title) DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 634,
        "prev_question_id": 5165,
        "db_id": "address",
        "question": "Among the postal points in the District of Columbia, how many of them have an area with above 20000 black population?",
        "evidence": "District of Columbia refers to county = 'DISTRICT OF COLUMBIA'; postal points refer to zip_code; area with above 20000 black population refers to black_population > 20000;",
        "SQL": "SELECT COUNT(T1.zip_code) FROM country AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.county = 'DISTRICT OF COLUMBIA' AND T2.black_population > 20000",
        "difficulty": "moderate"
    },
    {
        "question_id": 635,
        "prev_question_id": 1570,
        "db_id": "car_retails",
        "question": "Please calculate the average total price of shipped orders from German customers.",
        "evidence": "average total price = DIVIDE(MULTIPLY(quantityOrdered, priceEach)), COUNT(orderNumber)); German is a nationality of country = 'Germany'; shipped orders refers to status = 'Shipped';",
        "SQL": "SELECT SUM(T3.quantityOrdered * T3.priceEach) / COUNT(T2.orderNumber) FROM customers AS T1 INNER JOIN orders AS T2 ON T1.customerNumber = T2.customerNumber INNER JOIN orderdetails AS T3 ON T2.orderNumber = T3.orderNumber WHERE T2.status = 'Shipped' AND T1.country = 'Germany'",
        "difficulty": "moderate"
    },
    {
        "question_id": 636,
        "prev_question_id": 379,
        "db_id": "retail_complains",
        "question": "What is the percentage of female clients in the Middle Atlantic?",
        "evidence": "female refers to sex = 'Female'; the Middle Atlantic refers to division = 'Middle Atlantic'; percentage = divide(count(client_id where sex = 'Female' and division = 'Middle Atlantic') , count(client_id where division = 'Middle Atlantic')) * 100%",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.sex = 'Female' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.sex) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.division = 'South Atlantic'",
        "difficulty": "moderate"
    },
    {
        "question_id": 637,
        "prev_question_id": 4274,
        "db_id": "simpson_episodes",
        "question": "Please list the three episodes with the highest number of votes for the worst star rating.",
        "evidence": "highest number of votes refers to MAX(COUNT(votes)); worst star rating refers to stars = 1",
        "SQL": "SELECT T1.title FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T2.stars = ( SELECT MIN(stars) FROM Vote ) ORDER BY T2.votes DESC LIMIT 3;",
        "difficulty": "moderate"
    },
    {
        "question_id": 638,
        "prev_question_id": 3215,
        "db_id": "donor",
        "question": "Please provide the type of resource that donation \"b39547f29dfc25fb13c6e9e8d940dc43\" contain.",
        "evidence": "donation \"b39547f29dfc25fb13c6e9e8d940dc43\" refers to donationid = 'b39547f29dfc25fb13c6e9e8d940dc43'; type of resource refers to project_resource_type;",
        "SQL": "SELECT DISTINCT T1.project_resource_type FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid INNER JOIN donations AS T3 ON T2.projectid = T3.projectid WHERE T3.donationid LIKE 'b39547f29dfc25fb13c6e9e8d940dc43'",
        "difficulty": "moderate"
    },
    {
        "question_id": 639,
        "prev_question_id": 3131,
        "db_id": "cars",
        "question": "Calculate the percentage of cars that belong to the USA.",
        "evidence": "belong to the USA refers to country = 'USA'; percentage = divide(count(ID where country = 'USA'), count(ID)) * 100%",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.country = 'USA' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM production AS T1 INNER JOIN country AS T2 ON T1.country = T2.origin",
        "difficulty": "moderate"
    },
    {
        "question_id": 640,
        "prev_question_id": 7836,
        "db_id": "world",
        "question": "How many percent of countries in North America use English?",
        "evidence": "percentage = MULTIPLY(DIVIDE(COUNT(Language = 'English' WHERE Continent = 'North America'), COUNT(Language WHERE Continent = 'North America')), 1.0); North America refers to Continent = 'North America'; use English refers to Language = 'English';",
        "SQL": "SELECT CAST(SUM(IIF(T2.Language = 'English', 1, 0)) AS REAL) * 100 / COUNT(T1.Code) FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode",
        "difficulty": "moderate"
    },
    {
        "question_id": 641,
        "prev_question_id": 9071,
        "db_id": "bike_share_1",
        "question": "How many trips with a bike borrowed from the stations in San Francisco were made by a subscriber?",
        "evidence": "bike was borrowed from refers to start_station_id; San Francisco refers to city = 'San Francisco'; subscriber refers to subscription_type = 'Subscriber';",
        "SQL": "SELECT COUNT(T1.id) FROM trip AS T1 INNER JOIN station AS T2 ON T2.ID = T1.start_station_id WHERE T2.city = 'San Francisco' AND T1.subscription_type = 'Subscriber'",
        "difficulty": "moderate"
    },
    {
        "question_id": 642,
        "prev_question_id": 5589,
        "db_id": "shipping",
        "question": "Please list the destination cities of all the shipments ordered by S K L Enterprises Inc.",
        "evidence": "\"S K L Enterprises Inc\" is the cust_name; destination cities refers to city_name",
        "SQL": "SELECT DISTINCT T3.city_name FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id INNER JOIN city AS T3 ON T3.city_id = T2.city_id WHERE T1.cust_name = 'S K L Enterprises Inc'",
        "difficulty": "moderate"
    },
    {
        "question_id": 643,
        "prev_question_id": 3752,
        "db_id": "college_completion",
        "question": "In the state with the highest number of schools, how many institutions have a percentage of no less than 90 of undergraduates who attend full-time? List all of the institutions' names.",
        "evidence": "highest number of schools refers to MAX(schools_count); percentage of no less than 90 of undergraduates who attend full-time refers to ft_pct > 90; institutions' names refers to chronname;",
        "SQL": "SELECT COUNT(t1.unitid), t1.chronname FROM institution_details AS T1 INNER JOIN state_sector_details AS T2 ON t1.state = t2.state WHERE t1.ft_pct > 90 ORDER BY t2.schools_count DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 644,
        "prev_question_id": 1767,
        "db_id": "restaurant",
        "question": "How many American restaurants are located in Front, San Francisco?",
        "evidence": "American restaurant refers to food_type = 'american'; Front refers to street_name = 'front'; San Francisco refers to city = 'san francisco'",
        "SQL": "SELECT COUNT(T2.food_type = 'american') FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.city = 'san francisco' AND T1.street_name = 'front'",
        "difficulty": "moderate"
    },
    {
        "question_id": 645,
        "prev_question_id": 8521,
        "db_id": "software_company",
        "question": "Which customer come from a place with more inhabitants, customer no.0 or customer no.1?",
        "evidence": "place with more inhabitants refers to GEOID where ID = 0 OR ID = 1 and MAX(NHABITANTS_K);",
        "SQL": "SELECT T1.ID FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.ID = 0 OR T1.ID = 1 ORDER BY INHABITANTS_K DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 646,
        "prev_question_id": 5564,
        "db_id": "menu",
        "question": "What is the image ID of page 1 of the menu \"Zentral Theater Terrace\"?",
        "evidence": "page 1 refers to page_number = 1; Zentral Theater Terrace is a name of menu;",
        "SQL": "SELECT T2.image_id FROM Menu AS T1 INNER JOIN MenuPage AS T2 ON T1.id = T2.menu_id WHERE T1.name = 'Zentral Theater Terrace' AND T2.page_number = 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 647,
        "prev_question_id": 2119,
        "db_id": "world_development_indicators",
        "question": "How many countries have reached their Adjusted net national income per capita (constant 2005 US$) indicator value to more than 1,000 but have not finished their external debt reporting?",
        "evidence": "Adjusted net national income per capita (constant 2005 US$) is the IndicatorName; have not finished their external debt reporting means ExternalDebtReportingStatus = 'Preliminary'",
        "SQL": "SELECT COUNT(T1.CountryCode) FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.IndicatorName = 'Adjusted net national income per capita (constant 2005 US$)' AND T1.ExternalDebtReportingStatus = 'Preliminary' AND T2.Value > 1000",
        "difficulty": "moderate"
    },
    {
        "question_id": 648,
        "prev_question_id": 2181,
        "db_id": "world_development_indicators",
        "question": "How many countries using the 1993 System of National Accounts methodology?",
        "evidence": "use the 1993 System of National Accounts methodology refers to SystemOfNationalAccounts = '1993 System of National Accounts methodology.'",
        "SQL": "SELECT COUNT(CountryCode) FROM Country WHERE SystemOfNationalAccounts = 'Country uses the 1993 System of National Accounts methodology.'",
        "difficulty": "moderate"
    },
    {
        "question_id": 649,
        "prev_question_id": 5610,
        "db_id": "shipping",
        "question": "How many of the shipments bound for New York City were shipped to Harry's Hot Rod Auto and Truck Accessories?",
        "evidence": "\"New York\" is the city_name; 'Harry's Hot Rod Auto & Truck Accessories' is the cust_name",
        "SQL": "SELECT COUNT(*) FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id INNER JOIN city AS T3 ON T3.city_id = T2.city_id WHERE T3.city_name = 'New York' AND T1.cust_name = 'Harry''s Hot Rod Auto & Truck Accessories'",
        "difficulty": "moderate"
    },
    {
        "question_id": 650,
        "prev_question_id": 5441,
        "db_id": "sales",
        "question": "List the customer's ID and last name of the customer that purchased a product with a quantity greater than 90% of the average quantity of all listed products.",
        "evidence": "quantity greater than 90% of the average quantity = Quantity > MULTIPLY(AVG(Quantity), 0.9);",
        "SQL": "SELECT T2.CustomerID, T2.LastName FROM Sales AS T1 INNER JOIN Customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Quantity > ( SELECT AVG(Quantity) FROM Sales ) * 0.9",
        "difficulty": "moderate"
    },
    {
        "question_id": 651,
        "prev_question_id": 1152,
        "db_id": "talkingdata",
        "question": "Please list the models of all the devices with an event under the location coordinates (121, 31).",
        "evidence": "models of the devices refers to device_model; location coordinates (121, 31) refers to longitude = 121 AND latitude = 31;",
        "SQL": "SELECT T2.device_model FROM events AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T1.longitude = 121 AND T1.latitude = 31",
        "difficulty": "moderate"
    },
    {
        "question_id": 652,
        "prev_question_id": 9170,
        "db_id": "movie_3",
        "question": "How many times is the number of Indian cities than Italian cities?",
        "evidence": "indian refers to country = 'India'; Italian refers to country = 'Italy'; times = Divide(Count(city where country = 'India), Count(city where country = 'Italy'))",
        "SQL": "SELECT CAST(SUM(IIF(T1.country = 'India', 1, 0)) AS REAL) / SUM(IIF(T1.country = 'Italy', 1, 0)) FROM country AS T1 INNER JOIN city AS T2 ON T1.country_id = T2.country_id",
        "difficulty": "moderate"
    },
    {
        "question_id": 653,
        "prev_question_id": 5825,
        "db_id": "airline",
        "question": "Among the flights on 2018/8/1, how many of them were scheduled to depart from John F. Kennedy International in New York?",
        "evidence": "on 2018/8/1 refers to FL_DATE = '2018/8/1'; depart from refers to ORIGIN; John F. Kennedy International in New York refers to Description = 'New York, NY: John F. Kennedy International';",
        "SQL": "SELECT COUNT(T1.Code) FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.ORIGIN WHERE T2.FL_DATE = '2018/8/1' AND T1.Description = 'New York, NY: John F. Kennedy International'",
        "difficulty": "moderate"
    },
    {
        "question_id": 654,
        "prev_question_id": 1351,
        "db_id": "law_episode",
        "question": "Which episode has the highest total number of viewer votes?",
        "evidence": "episode refers to title; the highest total number of viewer votes refers to max(sum(votes))",
        "SQL": "SELECT T1.title FROM Episode AS T1 INNER JOIN Vote AS T2 ON T1.episode_id = T2.episode_id GROUP BY T1.title ORDER BY SUM(T1.votes) DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 655,
        "prev_question_id": 4126,
        "db_id": "public_review_platform",
        "question": "In businesses with a category of food, how many of them have a star rating below 3?",
        "evidence": "category of food refers to category_name = 'Food'; star rating below 3 refers to stars < 3",
        "SQL": "SELECT COUNT(DISTINCT T1.business_id) FROM Business AS T1 INNER JOIN Business_Categories AS T2 ON T1.business_id = T2.business_id INNER JOIN Categories AS T3 ON T2.category_id = T3.category_id WHERE T3.category_name = 'Food' AND T1.stars < 3",
        "difficulty": "moderate"
    },
    {
        "question_id": 656,
        "prev_question_id": 7204,
        "db_id": "works_cycles",
        "question": "Among the employees who wish to receive e-mail promotion from AdventureWorks, how many percent of them are female?",
        "evidence": "female refers to Gender = 'F'; employee who wish to receive email promotion refers to EmailPromotion = 1; percentage = DIVIDE(SUM(Gender = 'F')), (sum(Gender = 'F' or Gender = 'M'))) as percentage;",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.Gender = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.BusinessEntityID) FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.EmailPromotion = 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 657,
        "prev_question_id": 1631,
        "db_id": "car_retails",
        "question": "Where can I find the office of the President of the company?",
        "evidence": "Where can I find the office refers to address, comprising of addressLine1 and addressLine2; President is a jobTitle",
        "SQL": "SELECT t2.addressLine1, t2.addressLine2 FROM employees AS t1 INNER JOIN offices AS t2 ON t1.officeCode = t2.officeCode WHERE t1.jobTitle = 'President'",
        "difficulty": "moderate"
    },
    {
        "question_id": 658,
        "prev_question_id": 9068,
        "db_id": "bike_share_1",
        "question": "Among the bike trips started on the days with a fog in 2013, how many of those trips started from the station \"2nd at Townsend\"?",
        "evidence": "started on the days with a fog refers to start_date where events = 'fog'; in 2013 refers to date LIKE '%2013'; started from station refers to start_station_name; start_station_name = '2nd at Townsend';",
        "SQL": "SELECT COUNT(T1.start_station_name) FROM trip AS T1 INNER JOIN weather AS T2 ON T2.zip_code = T1.zip_code WHERE T2.date LIKE '%2013%' AND T2.events = 'Fog' AND T1.start_station_name = '2nd at Townsend' AND T2.zip_code = 94107",
        "difficulty": "moderate"
    },
    {
        "question_id": 659,
        "prev_question_id": 7809,
        "db_id": "hockey",
        "question": "Is there any coach who has not been a player before but has won award? State the ID.",
        "evidence": "coach who has not been a player means playerID is NULL and coachID is not NULL;",
        "SQL": "SELECT DISTINCT T2.coachID FROM Master AS T1 INNER JOIN AwardsCoaches AS T2 ON T1.coachID = T2.coachID WHERE T1.playerID IS NULL",
        "difficulty": "moderate"
    },
    {
        "question_id": 660,
        "prev_question_id": 6198,
        "db_id": "food_inspection_2",
        "question": "What are the inspection results for Xando Coffee & Bar / Cosi Sandwich Bar?",
        "evidence": "Xando Coffee & Bar / Cosi Sandwich Bar refers to dba_name = 'XANDO COFFEE & BAR / COSI SANDWICH BAR'",
        "SQL": "SELECT DISTINCT T2.results FROM establishment AS T1 INNER JOIN inspection AS T2 ON T1.license_no = T2.license_no WHERE T1.dba_name = 'XANDO COFFEE & BAR / COSI SANDWICH BAR'",
        "difficulty": "moderate"
    },
    {
        "question_id": 661,
        "prev_question_id": 3720,
        "db_id": "college_completion",
        "question": "Tell the number of 4-year public schools in UT whose graduation rate exceeds the average for the state.",
        "evidence": "4-year refers to level = '4-year'; public refers to control = 'Public'; UT refers to state_abbr = 'UT'; graduation rate exceeds the average for the state refers to awards_per_value > awards_per_state_value;",
        "SQL": "SELECT COUNT(DISTINCT T1.chronname) FROM institution_details AS T1 INNER JOIN state_sector_grads AS T2 ON T2.state = T1.state WHERE T2.state_abbr = 'UT' AND T1.level = '4-year' AND T1.control = 'Public' AND T1.awards_per_value > T1.awards_per_state_value",
        "difficulty": "challenging"
    },
    {
        "question_id": 662,
        "prev_question_id": 672,
        "db_id": "codebase_comments",
        "question": "How many methods in repository 150 did not have a comment and a summary?",
        "evidence": "methods refers to Name; repository that did not have a comment and a summary refers to FullComment IS NULL AND Summary IS NULL;",
        "SQL": "SELECT COUNT(T2.SolutionId) FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T1.RepoId = 150 AND T2.FullComment IS NULL AND T2.Summary IS NULL",
        "difficulty": "challenging"
    },
    {
        "question_id": 663,
        "prev_question_id": 6158,
        "db_id": "food_inspection_2",
        "question": "Which business had the highest number of inspections done? Calculate the percentage of passed and failed inspections of the said business.",
        "evidence": "business name refers to dba_name; the highest number of inspections done max(count(inspection_id)); percentage of passed inspections = divide(sum(inspection_id where results = 'Pass'), total(inspection_id)) * 100%; percentage of failed inspections = divide(sum(inspection_id where results = 'Fail'), total(inspection_id)) * 100%",
        "SQL": "SELECT T2.dba_name , CAST(SUM(CASE WHEN T1.results = 'Pass' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.inspection_id) AS percentagePassed , CAST(SUM(CASE WHEN T1.results = 'Fail' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.inspection_id) FROM inspection AS T1 INNER JOIN establishment AS T2 ON T1.license_no = T2.license_no GROUP BY T2.dba_name ORDER BY COUNT(T1.license_no) DESC LIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question_id": 664,
        "prev_question_id": 5246,
        "db_id": "beer_factory",
        "question": "Among the root beer brands that do not advertise on Twitter, how many of them have root beers sold in August, 2014?",
        "evidence": "do not advertise on Twitter refers to twitter IS NULL; in August, 2014 refers to SUBSTR(TransactionDate, 1, 4) = '2014' AND SUBSTR(TransactionDate, 6, 2) = '08';",
        "SQL": "SELECT COUNT(T1.BrandID) FROM rootbeer AS T1 INNER JOIN `transaction` AS T2 ON T1.RootBeerID = T2.RootBeerID INNER JOIN rootbeerbrand AS T3 ON T1.BrandID = T3.BrandID WHERE T2.TransactionDate LIKE '2014-08%' AND T3.Twitter IS NULL",
        "difficulty": "challenging"
    },
    {
        "question_id": 665,
        "prev_question_id": 467,
        "db_id": "movies_4",
        "question": "How many Indian movies between 1/2/1990 and 12/30/2003 have revenue of more than 75,000,000 and popularity of no less than 20?",
        "evidence": "Indian movies refers to country_name = 'India'; between 1/2/1990 and 12/30/2003 refers to release_date BETWEEN '1990-01-02' AND '2003-12-30'; revenue of more than 75,000,000 refers to revenue > 75000000; popularity of no less than 20 refers to popularity > = 20",
        "SQL": "SELECT COUNT(T2.movie_id) FROM movie AS T1 INNER JOIN production_COUNTry AS T2 ON T1.movie_id = T2.movie_id WHERE T1.revenue > 75000000 AND T1.popularity >= 20 AND T1.release_date BETWEEN '1990-01-01' AND '2003-12-31'",
        "difficulty": "challenging"
    },
    {
        "question_id": 666,
        "prev_question_id": 5862,
        "db_id": "airline",
        "question": "List the tail numbers of all the aircraft that arrived on time at Meadows Field airport in August of 2018?",
        "evidence": "tail number refers to TAIL_NUM; arrived on time refers to ARR_DELAY < = 0; Meadows Field airport refers to Description = 'Bakersfield, CA: Meadows Field'; in August of 2018 refers to FL_DATE like '2018/8%';",
        "SQL": "SELECT T2.TAIL_NUM FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.DEST WHERE T2.FL_DATE LIKE '2018/8%' AND T1.Description = 'Bakersfield, CA: Meadows Field' AND T2.DEST = 'BFL' AND T2.ARR_DELAY <= 0 GROUP BY T2.TAIL_NUM",
        "difficulty": "challenging"
    },
    {
        "question_id": 667,
        "prev_question_id": 9047,
        "db_id": "bike_share_1",
        "question": "What is the percentage of trips that started in San Jose and durations were longer than 800 seconds?",
        "evidence": "percentage of trips = DIVIDE(COUNT(duration>800), COUNT(duration)) as percentage; San Jose refers to city = 'San Jose'; duration>800;",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.duration > 800 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.id) FROM trip AS T1 INNER JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T2.city = 'San Jose'",
        "difficulty": "challenging"
    },
    {
        "question_id": 668,
        "prev_question_id": 8149,
        "db_id": "sales_in_weather",
        "question": "How many units of item no.5 were sold in store no.3 in total on days with a total precipitation of over 0.05?",
        "evidence": "item no. 5 refers to item_nbr = 5; store no.3 refers to store_nbr = 3; with a total precipitation of over 0.05 refers to preciptotal > 0.05",
        "SQL": "SELECT SUM(CASE WHEN T3.preciptotal > 0.05 THEN units ELSE 0 END) AS sum FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T2.store_nbr = 3 AND T1.item_nbr = 5",
        "difficulty": "challenging"
    },
    {
        "question_id": 669,
        "prev_question_id": 609,
        "db_id": "codebase_comments",
        "question": "What is the solution path for the method \"IQ.Data.DbQueryProvider.CanBeEvaluatedLocally\"?",
        "evidence": "solution path refers to Path; method refers to Name; Name = 'IQ.Data.DbQueryProvider.CanBeEvaluatedLocally'",
        "SQL": "SELECT T1.Path FROM Solution AS T1 INNER JOIN Method AS T2 ON T1.Id = T2.SolutionId WHERE T2.Name = 'IQ.Data.DbQueryProvider.CanBeEvaluatedLocally'",
        "difficulty": "challenging"
    },
    {
        "question_id": 670,
        "prev_question_id": 6805,
        "db_id": "retails",
        "question": "Please list any three customers with debt.",
        "evidence": "customer refers to c_name; with debt refers to c_acctbal < 0",
        "SQL": "SELECT c_name FROM customer WHERE c_acctbal < 0 LIMIT 3",
        "difficulty": "challenging"
    },
    {
        "question_id": 671,
        "prev_question_id": 2729,
        "db_id": "regional_sales",
        "question": "Between 2018 to 2020, what is the average amount of shipped orders per year under Carl Nguyen?",
        "evidence": "shipped refers to ShipDate; between 2018 and 2020 refers to SUBSTR(ShipDate, -2) IN ('18', '19', '20'); 'Carl Nguyen' is the name of Sales Team; average shipped orders per year = Divide (Count(OrderNumber), 3)",
        "SQL": "SELECT CAST(COUNT(T1.OrderNumber) AS REAL) / 3 FROM `Sales Orders` AS T1 INNER JOIN `Sales Team` AS T2 ON T2.SalesTeamID = T1._SalesTeamID WHERE (T2.`Sales Team` = 'Carl Nguyen' AND ShipDate LIKE '%/%/18') OR (T2.`Sales Team` = 'Carl Nguyen' AND ShipDate LIKE '%/%/19') OR (T2.`Sales Team` = 'Carl Nguyen' AND ShipDate LIKE '%/%/20')",
        "difficulty": "challenging"
    },
    {
        "question_id": 672,
        "prev_question_id": 8691,
        "db_id": "chicago_crime",
        "question": "Among the incidents reported in Harrison, what percentage are disorderly conduct?",
        "evidence": "\"Harrison\" is the district_name;\u00a0 'Disorderly Conduct' is the title; percentage = Divide (Count(title = 'Disorderly Conduct'), Count(report_no)) * 100; incident report refers to report_no",
        "SQL": "SELECT COUNT(CASE WHEN T3.title = 'Disorderly Conduct' THEN T2.report_no END) * 100.0 / COUNT(T2.report_no) AS per FROM District AS T1 INNER JOIN Crime AS T2 ON T2.district_no = T1.district_no INNER JOIN FBI_Code AS T3 ON T3.fbi_code_no = T2.fbi_code_no WHERE T1.district_name = 'Harrison'",
        "difficulty": "challenging"
    },
    {
        "question_id": 673,
        "prev_question_id": 9039,
        "db_id": "bike_share_1",
        "question": "List the name and city of starting stations which has an above-average duration trips.",
        "evidence": "starting stations refers to start_station_name; above average duration trips = DIVIDE(SUM(duration), COUNT(main_trip.id))<duration;",
        "SQL": "SELECT DISTINCT T1.start_station_name, T2.city FROM trip AS T1 INNER JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T1.duration > ( SELECT AVG(T1.duration) FROM trip AS T1 LEFT JOIN station AS T2 ON T2.name = T1.start_station_name )",
        "difficulty": "challenging"
    },
    {
        "question_id": 674,
        "prev_question_id": 5162,
        "db_id": "address",
        "question": "What is the difference in the number of cities with P.O. box only and cities with Post Office among the cities with area code 787?",
        "evidence": "SUBTRACT(COUNT(type = 'P.O. Box Only'), COUNT(type = 'Post Office')) where area_code = 787;",
        "SQL": "SELECT COUNT(CASE WHEN T2.type = 'P.O. Box Only' THEN 1 ELSE NULL END) - COUNT(CASE WHEN T2.type = 'Post Office' THEN 1 ELSE NULL END) AS DIFFERENCE FROM area_code AS T1 INNER JOIN zip_data AS T2 ON T1.zip_code = T2.zip_code WHERE T1.area_code = 787",
        "difficulty": "challenging"
    },
    {
        "question_id": 675,
        "prev_question_id": 5081,
        "db_id": "olympics",
        "question": "Among the males, list the region name of people with height greater than 87% of the average height of all people listed.",
        "evidence": "males refer to gender = 'M'; height greater than 87% of the average height refers to height > MULTIPLY(AVG(height), 0.87);",
        "SQL": "SELECT DISTINCT T1.region_name FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T3.gender = 'M' AND T3.height * 100 > ( SELECT AVG(height) FROM person WHERE gender = 'M' ) * 87",
        "difficulty": "challenging"
    },
    {
        "question_id": 676,
        "prev_question_id": 6955,
        "db_id": "ice_hockey_draft",
        "question": "Among all penalty minutes picked up by Ak Bars Kazan in the 1999-2000 season, identify the percentage picked up by Yevgeni Muratov.",
        "evidence": "penalty minutes refers to PIM; Ak Bars Kazan refers to TEAM = 'Ak Bars Kazan'; percentage = MULTIPLY(DIVIDE(SUM(PIM WHERE PlayerName = 'Yevgeni Muratov'), SUM(PIM)), 100.0); 1999-2000 season refers to SEASON = '1999-2000';",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.PlayerName = 'Yevgeni Muratov' THEN T1.PIM ELSE 0 END) AS REAL) * 100 / SUM(T1.PIM) FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.SEASON = '1999-2000' AND T1.TEAM = 'Ak Bars Kazan'",
        "difficulty": "challenging"
    },
    {
        "question_id": 677,
        "prev_question_id": 5751,
        "db_id": "language_corpus",
        "question": "How many times on page number 16 does the second word in the pair of words 1 and 109 appear?",
        "evidence": "How many times appear refer to occurrences; page number 16 refers to pid = 16; Pair is a relationship of two words: w1st and w2nd, where w1st is word id of the first word and w2nd is a word id of the second word; w1st = 1; w2nd = 109;",
        "SQL": "SELECT SUM(T1.occurrences) FROM pages_words AS T1 INNER JOIN biwords AS T2 ON T2.w2nd = T1.wid WHERE T2.w2nd = 109 AND T2.w1st = 1 AND T1.pid = 16",
        "difficulty": "challenging"
    },
    {
        "question_id": 678,
        "prev_question_id": 6732,
        "db_id": "retails",
        "question": "Among the customers from Morocco, how many customers were in debt?",
        "evidence": "customers refer to c_custkey; Morocco is the name of the nation which refers to n_name = 'MOROCCO'; in debt refers to c_acctbal < 0;",
        "SQL": "SELECT COUNT(T1.c_custkey) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T1.c_acctbal < 0 AND T2.n_name = 'MOROCCO'",
        "difficulty": "challenging"
    },
    {
        "question_id": 679,
        "prev_question_id": 4198,
        "db_id": "simpson_episodes",
        "question": "Among the episode that get more than 950 votes, how many of the episodes were nominated for the 'Outstanding Voice-Over Performance Award in 2009'? Find the percentage of the episodes.",
        "evidence": "more than 950 votes refers to votes > 950; in 2009 refers to year = 2009; number of episode = Count(episode_id); nominated refers to result = 'Nominee'; percentage = Divide(Count(award = 'Outstanding Voice-Over Performance'), Count(episode_id)) * 100",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.award = 'Outstanding Voice-Over Performance' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.episode_id) FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T2.votes > 950 AND T1.year = 2009;",
        "difficulty": "challenging"
    },
    {
        "question_id": 680,
        "prev_question_id": 469,
        "db_id": "movies_4",
        "question": "List the title of movies in Latin released between 1/01/1990 and 12/31/1995.",
        "evidence": "movies in Latin refers to language_name = 'Latin'; released between 1/01/1990 and 12/31/1995 refers to release_date BETWEEN '1990-01-01' AND '1995-12-31'",
        "SQL": "SELECT T1.title FROM movie AS T1 INNER JOIN movie_languages AS T2 ON T1.movie_id = T2.movie_id INNER JOIN language AS T3 ON T2.language_id = T3.language_id WHERE T3.language_name = 'Latin' AND T1.release_date BETWEEN '1990-01-01' AND '1995-12-31'",
        "difficulty": "challenging"
    },
    {
        "question_id": 681,
        "prev_question_id": 8070,
        "db_id": "university",
        "question": "Among the universities with over 20000 students in 2011, how many of them have an international students percentage of over 25% in the same year?",
        "evidence": "in 2011 refers to year 2011; with over 20000 students refers to num_students > 20000; international students percentage of over 25% refers to pct_international_students > 25;",
        "SQL": "SELECT COUNT(*) FROM university_year WHERE year = 2011 AND pct_international_students > 25 AND num_students > 20000",
        "difficulty": "challenging"
    },
    {
        "question_id": 682,
        "prev_question_id": 3161,
        "db_id": "donor",
        "question": "From the total amount of donation to projects, what is the percentage of the amount is for school projects located in the rural area?",
        "evidence": "located in the rural area refers to school_metro = 'rural'; percentage = divide(sum(donation_to_project), sum(donation_to_project where school_metro = 'rural'))*100%",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.school_metro = 'rural' THEN T1.donation_to_project ELSE 0 END) AS REAL) * 100 / SUM(donation_to_project) FROM donations AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid",
        "difficulty": "challenging"
    },
    {
        "question_id": 683,
        "prev_question_id": 1431,
        "db_id": "synthea",
        "question": "Among the immunizations in 2017, calculate the percentage of patients who received the Influenza seasonal injectable preservative free. Among them, how many patients are English?",
        "evidence": "DIVIDE(COUNT(PATIENT when DESCRIPTION = 'Influenza seasonal injectable preservative free'), COUNT(PATIENT)) as percentage where strftime('%Y', 2017); English refers ethnicity = 'english';",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.DESCRIPTION = 'Influenza seasonal injectable preservative free' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.patient), SUM(CASE WHEN T1.ethnicity = 'english' THEN 1 ELSE 0 END) FROM patients AS T1 INNER JOIN immunizations AS T2 ON T1.patient = T2.PATIENT WHERE strftime('%Y', T2.DATE) = '2017'",
        "difficulty": "challenging"
    },
    {
        "question_id": 684,
        "prev_question_id": 5204,
        "db_id": "address",
        "question": "Among the area code 787, list the country of the cities with a postal point type of unique postal office.",
        "evidence": "postal point type of unique postal office refers to type = 'Unique Post Office';",
        "SQL": "SELECT DISTINCT T2.county FROM area_code AS T1 INNER JOIN country AS T2 ON T1.zip_code = T2.zip_code INNER JOIN zip_data AS T3 ON T1.zip_code = T3.zip_code WHERE T1.area_code = '787' AND T3.type = 'Unique Post Office'",
        "difficulty": "challenging"
    },
    {
        "question_id": 685,
        "prev_question_id": 2929,
        "db_id": "professional_basketball",
        "question": "How much did the win rate increase for the team after getting the No.1 NBA draft pick in the 2003 season than previous season?",
        "evidence": "No.1 draft pick refers to draftRound = 1; in the 2003 season refers to draftyear = 2003; increase = subtract(divide(sum(won), add(sum(won), sum(lost))) where draftyear = 2004, divide(sum(won), add(sum(won), sum(lost))) where draftyear = 2003)",
        "SQL": "SELECT (CAST(SUM(CASE WHEN T1.year = 2004 THEN T1.won ELSE 0 END) AS REAL) / SUM(CASE WHEN T1.year = 2004 THEN T1.won + T1.lost ELSE 0 END)) - (CAST(SUM(CASE WHEN T1.year = 2003 THEN T1.won ELSE 0 END) AS REAL) / SUM(CASE WHEN T1.year = 2003 THEN T1.won + T1.lost ELSE 0 END)) FROM teams AS T1 INNER JOIN draft AS T2 ON T1.tmID = T2.tmID WHERE T2.draftRound = 1 AND T2.draftYear = 2003",
        "difficulty": "challenging"
    },
    {
        "question_id": 686,
        "prev_question_id": 2731,
        "db_id": "regional_sales",
        "question": "What are the names of the top 3 customers who paid the highest amount of price per order after discount?",
        "evidence": "highest price per order after discount refers to Max(Subtract(Multiply (Unit Price, Order Quantity), Discount Applied)); name of customer refers to Customer Names",
        "SQL": "SELECT `Customer Names` FROM ( SELECT T1.`Customer Names` , REPLACE(T2.`Unit Price`, ',', '') * T2.`Order Quantity` - REPLACE(T2.`Unit Price`, ',', '') * T2.`Discount Applied` AS T FROM Customers T1 INNER JOIN `Sales Orders` T2 ON T2._CustomerID = T1.CustomerID ) ORDER BY T DESC LIMIT 3",
        "difficulty": "challenging"
    },
    {
        "question_id": 687,
        "prev_question_id": 6904,
        "db_id": "retails",
        "question": "How many customers in the building segments have orders with a total price of no less than 50,000?",
        "evidence": "building segment refers to c_mktsegment = 'BUILDING'; a total price of no less than 50,000 refers to o_totalprice > 50000",
        "SQL": "SELECT COUNT(T2.c_name) FROM orders AS T1 INNER JOIN customer AS T2 ON T1.o_custkey = T2.c_custkey WHERE T2.c_mktsegment = 'BUILDING' AND T1.o_totalprice > 50000",
        "difficulty": "challenging"
    },
    {
        "question_id": 688,
        "prev_question_id": 8144,
        "db_id": "sales_in_weather",
        "question": "How many units of item no.5 were sold in store no.3 on the day in 2012 when the max temperature was the highest?",
        "evidence": "item no.5 refers to item_nbr = 5; store no. 3 refers to store_nbr = 3; when the max temperature was highest refers to Max(tmax); in 2012 refers to SUBSTR(date, 1, 4) = '2012'",
        "SQL": "SELECT T1.units FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T2.store_nbr = 3 AND SUBSTR(T1.`date`, 1, 4) = '2012' AND T1.item_nbr = 5 ORDER BY tmax DESC LIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question_id": 689,
        "prev_question_id": 4609,
        "db_id": "mental_health_survey",
        "question": "How many users answered the question \"Overall, how much importance does your employer place on physical health?\"?",
        "evidence": "question refers to questiontext",
        "SQL": "SELECT COUNT(T1.UserID) FROM Answer AS T1 INNER JOIN Question AS T2 ON T1.QuestionID = T2.questionid WHERE T2.questiontext LIKE 'Overall, how much importance does your employer place on physical health?'",
        "difficulty": "challenging"
    },
    {
        "question_id": 690,
        "prev_question_id": 3224,
        "db_id": "donor",
        "question": "Among the schools whose donators are teachers, what is the percentage of schools that are in Brooklyn?",
        "evidence": "donors are teachers refers to is_teacher_acct = 't'; Brooklyn is school_city; percentage = Divide(Count(school_city-'Brooklyn'),Count(school_city))*100",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.school_city LIKE 'Brooklyn' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.teacher_acctid) FROM projects AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T2.is_teacher_acct = 't'",
        "difficulty": "challenging"
    },
    {
        "question_id": 691,
        "prev_question_id": 4698,
        "db_id": "disney",
        "question": "Among the movies released from 2001 to 2005, list down the titles and directors of the movies which had a total gross of more than 100% above the average.",
        "evidence": "Released from 2001 to 2005 refers to substr(release_date, length(release_date) - 3, length(release_date)) between '2001' and '2005'; DIVIDE(SUM(total_gross), COUNT(movie_title));",
        "SQL": "SELECT T2.name, T2.director FROM movies_total_gross AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name WHERE SUBSTR(T1.release_date, LENGTH(T1.release_date) - 3, LENGTH(T1.release_date)) BETWEEN '2001' AND '2005' AND CAST(REPLACE(trim(T1.total_gross, '$'), ',', '') AS REAL) / ( SELECT SUM(CAST(REPLACE(trim(T3.total_gross, '$'), ',', '') AS REAL)) / COUNT(T3.movie_title) AS avg_gross FROM movies_total_gross AS T3 INNER JOIN director AS T4 ON T3.movie_title = T4.name WHERE SUBSTR(T3.release_date, LENGTH(T3.release_date) - 3, LENGTH(T3.release_date)) BETWEEN '2001' AND '2005' ) - 1 > 1",
        "difficulty": "challenging"
    },
    {
        "question_id": 692,
        "prev_question_id": 6953,
        "db_id": "ice_hockey_draft",
        "question": "How tall is the player from Yale University who picked up 28 penalty minutes in the 2005-2006 season?",
        "evidence": "how tall refers to height_in_cm; Yale University refers to TEAM = 'Yale Univ.'; 28 penalty minutes refers to PIM = '28'; 2005-2006 season refers to SEASON = '2005-2006';",
        "SQL": "SELECT T3.height_in_cm FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID INNER JOIN height_info AS T3 ON T2.height = T3.height_id WHERE T1.SEASON = '2005-2006' AND T1.TEAM = 'Yale Univ.' AND T1.PIM = 28",
        "difficulty": "challenging"
    },
    {
        "question_id": 693,
        "prev_question_id": 1874,
        "db_id": "soccer_2016",
        "question": "How many percent of the toss-winners decided to bowl first on the pitch from 2010 to 2016?",
        "evidence": "decide to bowl first refers to Toss_Name = 'field'; from 2010 to 2016 refers to Match_Date BETWEEN '2010-01-01' AND '2016-12-31'; percent = divide(count(Toss_Id where Toss_Name = 'field'), count(Toss_Id)) * 100% where Match_Date BETWEEN '2010-01-01' AND '2016-12-31'",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.Toss_Name = 'field' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.Toss_Id) FROM Match AS T1 INNER JOIN Toss_Decision AS T2 ON T2.Toss_Id = T1.Toss_Decide WHERE T1.Match_Date BETWEEN '2010-01-01' AND '2016-12-31'",
        "difficulty": "challenging"
    },
    {
        "question_id": 694,
        "prev_question_id": 7455,
        "db_id": "works_cycles",
        "question": "How many days did it take to end the work order \"425\"?",
        "evidence": "days to end a work order = SUBTRACT(ActualEndDate, ActualStartDate);",
        "SQL": "SELECT 365 * (STRFTIME('%Y', ActualEndDate) - STRFTIME('%Y', ActualStartDate)) + 30 * (STRFTIME('%m', ActualEndDate) - STRFTIME('%m', ActualStartDate)) + STRFTIME('%d', ActualEndDate) - STRFTIME('%d', ActualStartDate) FROM WorkOrderRouting WHERE WorkOrderID = 425",
        "difficulty": "challenging"
    },
    {
        "question_id": 695,
        "prev_question_id": 5622,
        "db_id": "shipping",
        "question": "Where was shipment no. 1002 headed?",
        "evidence": "shipment no. 1002 refers to ship_id = 1002; where shipment was headed refers to city_name",
        "SQL": "SELECT T2.city_name FROM shipment AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.city_id WHERE T1.ship_id = '1002'",
        "difficulty": "challenging"
    },
    {
        "question_id": 696,
        "prev_question_id": 8074,
        "db_id": "university",
        "question": "What is the name of the university with the most international students in 2011?",
        "evidence": "in 2011 refers to year 2011; the most international students refers to MAX(DIVIDE(MULTIPLY(num_students,\u00a0 pct_international_students), 100)); name of university refers to university_id",
        "SQL": "SELECT T2.university_name FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.year = 2011 ORDER BY T1.pct_international_students DESC LIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question_id": 697,
        "prev_question_id": 4103,
        "db_id": "public_review_platform",
        "question": "How many businesses have more than 1 attribute?",
        "evidence": "businesses have more than 1 attribute refers to COUNT(attribute_value) > 1",
        "SQL": "SELECT COUNT(business_id) FROM Business_Attributes WHERE attribute_value > 1",
        "difficulty": "challenging"
    },
    {
        "question_id": 698,
        "prev_question_id": 2882,
        "db_id": "professional_basketball",
        "question": "In 1950, how many players whose teams have the losing rate less than 20%?",
        "evidence": "in 1950 refers to year = 1950; losing rate less than 20% refers to divide(lost, add(won, lost)) < 0.2",
        "SQL": "SELECT COUNT(DISTINCT T1.playerID) FROM players AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID INNER JOIN teams AS T3 ON T3.tmID = T2.tmID WHERE CAST(T3.lost AS REAL) * 100 / (T3.lost + T3.won) < 20",
        "difficulty": "challenging"
    },
    {
        "question_id": 699,
        "prev_question_id": 5579,
        "db_id": "shipping",
        "question": "What is the total number of pounds being transported for S K L Enterprises Inc?",
        "evidence": "\"S K L Enterprises Inc\" is the cust_name; total number of pounds refers to Sum(weight)",
        "SQL": "SELECT SUM(T2.weight) FROM customer AS T1 INNER JOIN shipment AS T2 ON T1.cust_id = T2.cust_id WHERE T1.cust_name = 'S K L Enterprises Inc'",
        "difficulty": "challenging"
    },
    {
        "question_id": 700,
        "prev_question_id": 2033,
        "db_id": "soccer_2016",
        "question": "What is the average of Indian players that were born between 1975 and 1985 among all players?",
        "evidence": "Indian players refers to Country_Name = 'India'; born between 1975 and 1985 refers to strftime('%Y',T1.DOB) between '1975' and '1985'; average refers to DIVIDE(COUNT(Country_Name = 'India'), COUNT(Player_Id))",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.Country_Name = 'India' THEN 1 ELSE 0 END) AS REAL) / COUNT(T1.Player_Id) FROM Player AS T1 INNER JOIN Country AS T2 ON T1.Country_Name = T2.Country_ID WHERE strftime('%Y', T1.DOB) BETWEEN '1975' AND '1985'",
        "difficulty": "challenging"
    },
    {
        "question_id": 701,
        "prev_question_id": 8145,
        "db_id": "sales_in_weather",
        "question": "What was the dew point on the day the most units of item no.5 were sold in store no.3 in 2012?",
        "evidence": "item no. 5 refers to item_nbr = 5; store no.3 refers to store_nbr = 3; in 2012 refers to SUBSTR(date, 1, 4) = '2012': most units sold refers to Max(units)",
        "SQL": "SELECT dewpoint FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T2.store_nbr = 3 AND SUBSTR(T1.`date`, 1, 4) = '2012' AND T1.item_nbr = 5 ORDER BY units DESC LIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question_id": 702,
        "prev_question_id": 2146,
        "db_id": "world_development_indicators",
        "question": "What percentage of upper middle income countries which have the CO2 emissions from liquid fuel consumption (% of total)\n\nless than 80%?",
        "evidence": "IndicatorName = 'CO2 emissions from liquid fuel consumption (% of total)'; less than 80% implies Value<80%; IncomeGroup = 'Upper middle income'; DIVIDE(COUNT(CountryCode where IndicatorName = 'CO2 emissions from liquid fuel consumption (% of total)'; Value<80%; IncomeGroup = 'Upper middle income'), COUNT(CountryCode where IncomeGroup = 'Upper middle income'));",
        "SQL": "SELECT SUM(CASE WHEN T2.IndicatorName = 'CO2 emissions FROM liquid fuel consumption (% of total)' AND t2.Value < 80 THEN 1 ELSE 0 END) * 1.0 / COUNT(T1.CountryCode) persent FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.IncomeGroup = 'Upper middle income'",
        "difficulty": "challenging"
    },
    {
        "question_id": 703,
        "prev_question_id": 8042,
        "db_id": "university",
        "question": "Which universities have more than 100,000 students in 2011?",
        "evidence": "in 2011 refers to year 2011; more than 100,000 students refers to num_students > 100000; which university refers to university_name;",
        "SQL": "SELECT T2.university_name FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.year = 2011 AND T1.num_students > 100000",
        "difficulty": "challenging"
    },
    {
        "question_id": 704,
        "prev_question_id": 5411,
        "db_id": "sales",
        "question": "Among all the customers who have purchased ML Bottom Bracket, identify the percentage of sales by Albert I. Ringer?",
        "evidence": "ML Bottom Bracket' is name of product; percentage = MULTIPLY(DIVIDE(SUM(CustomerID WHERE FirstName = 'Albert' AND MiddleInitial = 'I' AND LastName = 'Ringer'), COUNT(CustomerID)), 1.0);",
        "SQL": "SELECT CAST(SUM(IIF(T3.FirstName = 'Albert' AND T3.MiddleInitial = 'I' AND T3.LastName = 'Ringer', 1, 0)) AS REAL) * 100 / COUNT(T2.CustomerID) FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Employees AS T3 ON T2.SalesPersonID = T3.EmployeeID WHERE T1.Name = 'ML Bottom Bracket'",
        "difficulty": "challenging"
    },
    {
        "question_id": 705,
        "prev_question_id": 1764,
        "db_id": "restaurant",
        "question": "What is the restaurant's name and ID located at Ocean Avenue, San Francisco?",
        "evidence": "restaurant's name refers to label; Ocean Avenue refers to street_name = 'ocean avenue'; San Francisco refers to city = 'san francisco'",
        "SQL": "SELECT T2.label, T1.id_restaurant FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T1.city = 'san francisco' AND T1.street_name = 'ocean avenue'",
        "difficulty": "challenging"
    },
    {
        "question_id": 706,
        "prev_question_id": 5240,
        "db_id": "beer_factory",
        "question": "Among the users that permit the company to send regular emails to them, how many of them had made a transaction with a Visa card in July, 2014?",
        "evidence": "users permit the company to send regular emails to them refers to subscribedtoemaillist = 'TRUE'; Visa card refers to creditcardtype = 'Visa'; in July, 2014 refers to SUBSTR(TransactionDate, 1, 4) = '2014' AND SUBSTR(TransactionDate, 6, 2) = '07';",
        "SQL": "SELECT COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN `transaction` AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.SubscribedToEmailList = 'TRUE' AND T2.CreditCardType = 'Visa' AND STRFTIME('%Y-%m', T2.TransactionDate) = '2014-07'",
        "difficulty": "challenging"
    },
    {
        "question_id": 707,
        "prev_question_id": 8991,
        "db_id": "bike_share_1",
        "question": "What is the percentage of the trip were done by a subscriber?",
        "evidence": "subscription_type = 'Subscriber'; DIVIDE(COUNT(id where subscription_type = 'Subscriber'), COUNT(id)) as percentage;",
        "SQL": "SELECT CAST(COUNT(subscription_type) AS REAL) * 100 / ( SELECT COUNT(subscription_type) FROM trip ) FROM trip WHERE subscription_type = 'Subscriber'",
        "difficulty": "challenging"
    },
    {
        "question_id": 708,
        "prev_question_id": 2159,
        "db_id": "world_development_indicators",
        "question": "List out the name and indicator code of high income: nonOECD countries",
        "evidence": "high income: non-OECD' refer to IncomeGroup;",
        "SQL": "SELECT DISTINCT T1.CountryCode, T2.CountryName FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.IncomeGroup = 'High income: nonOECD'",
        "difficulty": "challenging"
    },
    {
        "question_id": 709,
        "prev_question_id": 9096,
        "db_id": "bike_share_1",
        "question": "How many bikes have been borrowed at San Jose Diridon Caltrain Station on the date and time of 10/20/2013 8:11:01 AM and indicate the station's coordinates.",
        "evidence": "number of bikes that have been borrowed refers to SUM(bikes_available); San Jose Diridon Caltrain Station refers to name = 'San Jose Diridon Caltrain Station'; station's coordinates refers to (lat, long);",
        "SQL": "SELECT SUM(T2.bikes_available), T1.long, T1.lat FROM station AS T1 INNER JOIN status AS T2 ON T2.station_id = T1.id WHERE T2.time = '2013/10/20 8:11:01' AND T1.name = 'San Jose Diridon Caltrain Station'",
        "difficulty": "challenging"
    },
    {
        "question_id": 710,
        "prev_question_id": 3373,
        "db_id": "video_games",
        "question": "Provide the game publisher's name of the game with sales greater than 90% of the average sales in Japan.",
        "evidence": "game publisher's name refers to publisher_name; sales greater than 90% of the average sales refers to num_sales > multiply(0.9, avg(num_sales)); in Japan refers to region_name = 'Japan'",
        "SQL": "SELECT DISTINCT T5.publisher_name FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id INNER JOIN game_platform AS T3 ON T2.game_platform_id = T3.id INNER JOIN game_publisher AS T4 ON T3.game_publisher_id = T4.id INNER JOIN publisher AS T5 ON T4.publisher_id = T5.id WHERE T2.num_sales * 10000000 > ( SELECT AVG(T2.num_sales) * 100000 * 90 FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id WHERE T1.region_name = 'Japan' )",
        "difficulty": "challenging"
    },
    {
        "question_id": 711,
        "prev_question_id": 3625,
        "db_id": "authors",
        "question": "What was the name of the paper that was published on \"IEEE Transactions on Pattern Analysis and Machine Intelligence\" in 2011?",
        "evidence": "'IEEE Transactions on Pattern Analysis and Machine Intelligence' is the FullName of journal; 2011 refers to Year = '2011'; name of the paper refers to Title of paper",
        "SQL": "SELECT T2.Title FROM Journal AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.JournalId WHERE T1.FullName = 'IEEE Transactions on Pattern Analysis and Machine Intelligence' AND T2.Year = 2011 AND T2.Title <> ''",
        "difficulty": "challenging"
    },
    {
        "question_id": 712,
        "prev_question_id": 5250,
        "db_id": "beer_factory",
        "question": "What is the average number of root beers of the brand A&W sold in a day in August, 2014?",
        "evidence": "average = DIVIDE(SUM(COUNT(RootBeerID WHERE BrandName = 'A&W' AND SUBSTR(TransactionDate, 1, 4) = '2014' AND SUBSTR(TransactionDate, 6, 2) = '08')), 31); A&W refers to BrandName = 'A&W'; in August, 2014 refers to SUBSTR(TransactionDate, 1, 4) = '2014' AND SUBSTR(TransactionDate, 6, 2) = '08';",
        "SQL": "SELECT CAST(COUNT(T1.BrandID) AS REAL) / 31 FROM rootbeer AS T1 INNER JOIN `transaction` AS T2 ON T1.RootBeerID = T2.RootBeerID INNER JOIN rootbeerbrand AS T3 ON T1.BrandID = T3.BrandID WHERE T2.TransactionDate LIKE '2014-08%' AND T3.BrandName = 'A&W'",
        "difficulty": "challenging"
    },
    {
        "question_id": 713,
        "prev_question_id": 124,
        "db_id": "movie_platform",
        "question": "For the user who post the list that contained the most number of the movies, is he/she a paying subscriber when creating that list?",
        "evidence": "the list that contained the most number of the movies refers to MAX(list_movie_number); user_has_payment_method = 1 means the user was a paying subscriber when he created the list ; \nuser_has_payment_method = 0 means the user was not a paying subscriber when he created the list \n\n",
        "SQL": "SELECT T1.user_has_payment_method FROM lists_users AS T1 INNER JOIN lists AS T2 ON T1.list_id = T2.list_id WHERE T2.list_movie_number = ( SELECT MAX(list_movie_number) FROM lists )",
        "difficulty": "challenging"
    },
    {
        "question_id": 714,
        "prev_question_id": 324,
        "db_id": "retail_complains",
        "question": "What is the percentage of male clients complaining about their credit cards?",
        "evidence": "percentage = MULTIPLY(DIVIDE(SUM(sex = 'Male'), COUNT(client_id)), 1.0); male refers to sex = 'Male'; credit cards refers to Product = 'Credit card';",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.sex = 'Male' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.sex) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE T2.Product = 'Credit card'",
        "difficulty": "challenging"
    },
    {
        "question_id": 715,
        "prev_question_id": 197,
        "db_id": "book_publishing_company",
        "question": "List all titles which have year to date sales higher than the average order by pubisher name.",
        "evidence": "year to date sales refers to ytd_sales; average order = AVG(ytd_sales)",
        "SQL": "SELECT T1.title FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id WHERE T1.ytd_sales > ( SELECT AVG(ytd_sales) FROM titles )",
        "difficulty": "challenging"
    },
    {
        "question_id": 716,
        "prev_question_id": 1339,
        "db_id": "law_episode",
        "question": "What is the difference of 10 stars votes between the first episode and the last episode?",
        "evidence": "the first episode refers to episode = 1; the last episode refers to episode = 24; 10 stars vote refers to stars = 10; the difference = subtract(votes where episode = 1, votes where episode = 24) where stars = 10",
        "SQL": "SELECT SUM(CASE WHEN T2.episode = 24 THEN T1.votes ELSE 0 END) - SUM(CASE WHEN T2.episode = 1 THEN T1.votes ELSE 0 END) FROM Vote AS T1 INNER JOIN Episode AS T2 ON T2.episode_id = T1.episode_id WHERE T1.stars = 10",
        "difficulty": "challenging"
    },
    {
        "question_id": 717,
        "prev_question_id": 1988,
        "db_id": "soccer_2016",
        "question": "What are the teams that played in a match with the point of winning margin of 38 on April 30, 2009?",
        "evidence": "point of winning margin of 38 refers to win_margin = 38; on April 30, 2009 refers to match_date = '2009-04-30'; team refers to Team_Name;",
        "SQL": "SELECT T1.Team_Name FROM Team AS T1 INNER JOIN Match AS T2 ON T1.Team_Id = T2.Team_1 WHERE T2.win_margin = 38 AND match_date = '2009-04-30'",
        "difficulty": "challenging"
    },
    {
        "question_id": 718,
        "prev_question_id": 8557,
        "db_id": "software_company",
        "question": "Among the customers with an average income per inhabitant above 3000, what percentage are in their eighties?",
        "evidence": "average income per inhabitant above 3000 refers to INCOME_K > 3000; eighties refer to age BETWEEN 80 AND 89; DIVIDE(COUNT(INCOME_K > 3000 and age BETWEEN 80 AND 89), COUNT(INCOME_K > 3000 )) as percentage;",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.age BETWEEN 80 AND 89 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.ID) FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T2.INCOME_K > 3000",
        "difficulty": "challenging"
    },
    {
        "question_id": 719,
        "prev_question_id": 5941,
        "db_id": "books",
        "question": "Calculate the percentage of the International shipping orders on 2022/11/10.",
        "evidence": "International shipping order refers to method_name = 'International'; orders on 2022/11/10 refers to order_date LIKE '2022-11-10%'; percentage = Divide (Sum(order_id\u00a0 where method_name = 'International'), Count(order_id)) * 100",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.method_name = 'International' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM shipping_method AS T1 INNER JOIN cust_order AS T2 ON T1.method_id = T2.shipping_method_id WHERE T2.order_date LIKE '2022-11-10%'",
        "difficulty": "challenging"
    },
    {
        "question_id": 720,
        "prev_question_id": 4136,
        "db_id": "public_review_platform",
        "question": "What is the opening time of the active businesses in Glendale that have a medium review count.",
        "evidence": "active business ID refers to active = 'true'; Glendale is a city; medium review count refers to review_count = 'Medium'",
        "SQL": "SELECT DISTINCT T2.opening_time FROM Business AS T1 INNER JOIN Business_Hours AS T2 ON T1.business_id = T2.business_id INNER JOIN Days AS T3 ON T2.day_id = T3.day_id WHERE T1.city = 'Glendale' AND T1.review_count = 'Medium' AND T1.active = 'true'",
        "difficulty": "challenging"
    },
    {
        "question_id": 721,
        "prev_question_id": 3364,
        "db_id": "video_games",
        "question": "Give the genre of the games released from 2000 to 2002.",
        "evidence": "genre refers to genre_name; released from 2000 to 2002 refers to release_year BETWEEN 2000 AND 2002",
        "SQL": "SELECT DISTINCT T4.genre_name FROM game_platform AS T1 INNER JOIN game_publisher AS T2 ON T1.game_publisher_id = T2.id INNER JOIN game AS T3 ON T2.game_id = T3.id INNER JOIN genre AS T4 ON T3.genre_id = T4.id WHERE T1.release_year BETWEEN 2000 AND 2002",
        "difficulty": "challenging"
    },
    {
        "question_id": 722,
        "prev_question_id": 4266,
        "db_id": "simpson_episodes",
        "question": "How many recipients of the Primetime Emmy Award category that were born in the USA? Find the percentage of Americans in the total number of the country.",
        "evidence": "born in the USA refers to birth_country = 'USA'; recipients refers to person = 'recipients'; percentage refers to DIVIDE(COUNT(birth_country = 'USA'), count(award_id))",
        "SQL": "SELECT SUM(CASE WHEN T1.birth_country = 'USA' THEN 1 ELSE 0 END) AS num , CAST(SUM(CASE WHEN T1.birth_country = 'USA' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Person AS T1 INNER JOIN Award AS T2 ON T1.name = T2.person WHERE T2.award_category = 'Primetime Emmy' AND T2.person = 'Dan Castellaneta';",
        "difficulty": "challenging"
    },
    {
        "question_id": 723,
        "prev_question_id": 9049,
        "db_id": "bike_share_1",
        "question": "Please calculate the average duration of trips started at South Van Ness at Market in 2015.",
        "evidence": "started at refers to start_station_name; start_station_name = 'South Van Ness at Market'; average duration = DIVIDE(SUM(duration), COUNT(duration));",
        "SQL": "SELECT AVG(duration) FROM trip WHERE start_date LIKE '%2015%' AND start_station_name = 'South Van Ness at Market'",
        "difficulty": "challenging"
    },
    {
        "question_id": 724,
        "prev_question_id": 5079,
        "db_id": "olympics",
        "question": "Among the competitors with age ranges 24 and below, calculate the difference between the number of competitors who weighed greater than 70 kg and competitors who weighted less than 70 kg.",
        "evidence": "SUBTRACT(COUNT(weight > 70), COUNT(weight < 70)) where age < 24;",
        "SQL": "SELECT COUNT(CASE WHEN T1.weight > 70 THEN 1 ELSE NULL END) - COUNT(CASE WHEN T1.weight < 70 THEN 1 ELSE NULL END) FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id WHERE T2.age < 24",
        "difficulty": "challenging"
    },
    {
        "question_id": 725,
        "prev_question_id": 1234,
        "db_id": "talkingdata",
        "question": "What is the percentage of users who are in the same behavior category as \"Academic Information\"?",
        "evidence": "percentage = MULTIPLY(DIVIDE(SUM(category = 'Academic Information'), COUNT(app_id)), 1.0); behavior category refers to category; category = 'Academic Information';",
        "SQL": "SELECT SUM(IIF(T1.category = 'Academic Information', 1.0, 0)) / COUNT(T2.app_id) AS per FROM label_categories AS T1 INNER JOIN app_labels AS T2 ON T1.label_id = T2.label_id",
        "difficulty": "challenging"
    },
    {
        "question_id": 726,
        "prev_question_id": 1656,
        "db_id": "car_retails",
        "question": "When was the product with the highest unit price shipped?",
        "evidence": "The highest unit price refers to MAX(priceEach); when shipped refers to shippedDate;",
        "SQL": "SELECT t1.shippedDate FROM orders AS t1 INNER JOIN orderdetails AS t2 ON t1.orderNumber = t2.orderNumber ORDER BY t2.priceEach DESC LIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question_id": 727,
        "prev_question_id": 9084,
        "db_id": "bike_share_1",
        "question": "Does the bike with Id number 16 making any intercity trip? If yes, calculate the total travel duration during all the intercity trip. Convert the duration to hour.",
        "evidence": "intercity trip refers to start_station_name! = end_station_name; total travel duration to hour = DIVIDE(SUM(duration), 3600) AS hour;",
        "SQL": "SELECT T1.end_station_name, T2.city, CAST(SUM(T1.duration) AS REAL) / 3600 FROM trip AS T1 INNER JOIN station AS T2 ON T2.name = T1.start_station_name WHERE T1.bike_id = 16 AND T1.start_station_name != T1.end_station_name",
        "difficulty": "challenging"
    },
    {
        "question_id": 728,
        "prev_question_id": 34,
        "db_id": "movie_platform",
        "question": "Which year has the least number of movies that was released and what is the title of the movie in that year that has the highest number of rating score of 1?",
        "evidence": "least number of movies refers to MIN(movie_release_year); highest rating score refers to MAX(SUM(movie_id) where rating_score = '1')\n\n",
        "SQL": "SELECT DISTINCT T1.movie_release_year, T1.movie_title FROM movies AS T1 INNER JOIN ratings AS T2 ON T1.movie_id = T2.movie_id WHERE T1.movie_release_year = ( SELECT movie_release_year FROM movies GROUP BY movie_release_year ORDER BY COUNT(movie_id) DESC LIMIT 1 ) AND T2.rating_score = 1",
        "difficulty": "challenging"
    },
    {
        "question_id": 729,
        "prev_question_id": 3342,
        "db_id": "video_games",
        "question": "How many times more is the number of games which were published by Atari than Athena?",
        "evidence": "published by Atari refers to publisher_name = 'Atari'; published by\u00a0 Athena refers to publisher_name = 'Athena'; times = divide(sum(publisher_id where publisher_name = 'Atari'), sum(publisher_id where publisher_name = 'Athena'))",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T1.publisher_name = 'Atari' THEN T2.game_id ELSE NULL END) AS REAL) / COUNT(CASE WHEN T1.publisher_name = 'Athena' THEN T2.game_id ELSE NULL END) FROM publisher AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.publisher_id",
        "difficulty": "challenging"
    },
    {
        "question_id": 730,
        "prev_question_id": 5861,
        "db_id": "airline",
        "question": "On August 2018, which day had the highest number of cancelled flights due to the most serious reasons in Dallas/Fort Worth International?",
        "evidence": "On August 2018 refers to FL_DATE like '2018/8%'; day with the highest number of cancelled flights refers to MAX(COUNT(FL_DATE WHERE CANCELLED = 1)); cancelled due to the most serious reasons refers to CANCELLATION_CODE = 'A'; in Dallas/Fort Worth International refers to Description = 'Dallas/Fort Worth, TX: Dallas/Fort Worth International';",
        "SQL": "SELECT T2.FL_DATE FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.ORIGIN WHERE T2.FL_DATE LIKE '2018/8%' AND T1.Description = 'Dallas/Fort Worth, TX: Dallas/Fort Worth International' AND T2.ORIGIN = 'DFW' AND T2.CANCELLED = 1 AND T2.CANCELLATION_CODE = 'A' GROUP BY T2.FL_DATE ORDER BY COUNT(T2.FL_DATE) DESC LIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question_id": 731,
        "prev_question_id": 8999,
        "db_id": "bike_share_1",
        "question": "List all trips where bikes were returned at location 37.331415, -121.8932. State the date the bike was borrowed.",
        "evidence": "37.331415 and -121.8932 are latitude (lat) and longitude (long) coordinates indicating location; returned at refers to end_station_name; the date the bike was borrowed refers to start_date;",
        "SQL": "SELECT T2.end_station_name, T2.start_date FROM station AS T1 INNER JOIN trip AS T2 ON T2.end_station_name = T1.name WHERE T1.lat = 37.331415 AND T1.long = -121.8932",
        "difficulty": "challenging"
    },
    {
        "question_id": 732,
        "prev_question_id": 235,
        "db_id": "book_publishing_company",
        "question": "Find the difference between the average royalty of titles published by US and non US publishers?",
        "evidence": "US publisher refers publisher in the US where country = 'USA'; non-US publishers refers publisher not in the US where country! = 'USA'; difference = SUBTRACT(AVG(royalty) where country = 'USA', AVG(royalty) where country! = 'USA'))",
        "SQL": "SELECT (CAST(SUM(CASE WHEN T2.country = 'USA' THEN T1.royalty ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.country = 'USA' THEN 1 ELSE 0 END)) - (CAST(SUM(CASE WHEN T2.country != 'USA' THEN T1.royalty ELSE 0 END) AS REAL) / SUM(CASE WHEN T2.country != 'USA' THEN 1 ELSE 0 END)) FROM titles AS T1 INNER JOIN publishers AS T2 ON T1.pub_id = T2.pub_id INNER JOIN roysched AS T3 ON T1.title_id = T3.title_id",
        "difficulty": "challenging"
    },
    {
        "question_id": 733,
        "prev_question_id": 1192,
        "db_id": "talkingdata",
        "question": "Mention the group of age of users who use phone brand of LG.",
        "evidence": "group of age refers to group;",
        "SQL": "SELECT T1.`group` FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.phone_brand = 'LG'",
        "difficulty": "challenging"
    },
    {
        "question_id": 734,
        "prev_question_id": 3748,
        "db_id": "college_completion",
        "question": "In Yale University, what is the average number of Black students per year who were bachelor's/equivalent-seeking cohort at 4-year institutions between 2002 to 2005?",
        "evidence": "Yale University refers to chronname = 'Yale University'; average = DIVIDE(COUNT(race = 'B' WHERE cohort = '4y bach AND year BETWEEN 2002 AND 2005), 3); Black refers to race = 'B'; bachelor's/equivalent-seeking cohort at 4-year institutions refers to cohort = '4y bach'; between 2002 to 2005 refers to year BETWEEN '2002' AND '2005';",
        "SQL": "SELECT AVG(T2.grad_cohort) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T1.chronname = 'Yale University' AND T2.year BETWEEN 2002 AND 2005 AND T2.race = 'B' AND T2.cohort = '4y bach'",
        "difficulty": "challenging"
    },
    {
        "question_id": 735,
        "prev_question_id": 5251,
        "db_id": "beer_factory",
        "question": "Among all the root beers sold in 2014, what is the percentage of the root beers produced by the brewery AJ Stephans Beverages?",
        "evidence": "sold in 2014 refers to SUBSTR(TransactionDate, 1, 4) = '2014'; percentage = DIVIDE(MULTIPLY(SUM(BreweryName = 'AJ Stephans Beverages'), 1.0), COUNT(RootBeerID)) WHERE SUBSTR(TransactionDate, 1, 4) = '2014'; AJ Stephans Beverages refers to BreweryName = 'AJ Stephans Beverages';",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T3.BreweryName = 'AJ Stephans Beverages' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.BrandID) FROM rootbeer AS T1 INNER JOIN `transaction` AS T2 ON T1.RootBeerID = T2.RootBeerID INNER JOIN rootbeerbrand AS T3 ON T1.BrandID = T3.BrandID WHERE T2.TransactionDate LIKE '2014%'",
        "difficulty": "challenging"
    },
    {
        "question_id": 736,
        "prev_question_id": 1067,
        "db_id": "talkingdata",
        "question": "Describe the ages, genders and numbers of events participated by the users at coordinates of (-102,38).",
        "evidence": "coordinates of (-102,38) refers to longitude = -102, latitude = 38;",
        "SQL": "SELECT DISTINCT T1.age, T1.gender, COUNT(T2.event_id) FROM gender_age AS T1 INNER JOIN `events` AS T2 ON T2.device_id = T1.device_id WHERE T2.longitude = -102 AND T2.latitude = 38 GROUP BY T1.age, T1.gender, T2.longitude, T2.latitude",
        "difficulty": "challenging"
    },
    {
        "question_id": 737,
        "prev_question_id": 7506,
        "db_id": "image_and_language",
        "question": "How many times is the number of images containing \"broccoli\" than \"tomato\"?",
        "evidence": "images refers to IMG_ID; \"broccoli\" refers to OBJ_CLASS = 'broccoli'; \"tomato\" refers to OBJ_CLASS = 'tomato' ; How many times = divide(count(OBJ_SAMPLE_ID) when OBJ_CLASS = 'broccoli', count(OBJ_SAMPLE_ID) when OBJ_CLASS = 'tomato')",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T1.OBJ_CLASS = 'broccoli' THEN T2.OBJ_SAMPLE_ID ELSE NULL END) AS REAL) / COUNT(CASE WHEN T1.OBJ_CLASS = 'tomato' THEN T2.OBJ_SAMPLE_ID ELSE NULL END) times FROM OBJ_CLASSES AS T1 INNER JOIN IMG_OBJ AS T2 ON T1.OBJ_CLASS_ID = T2.OBJ_CLASS_ID",
        "difficulty": "challenging"
    },
    {
        "question_id": 738,
        "prev_question_id": 4456,
        "db_id": "student_loan",
        "question": "How many SMC's students that absent for 7 months?",
        "evidence": "SMC's students refers to school = 'smc'; absent for 7 months refers to month = 7",
        "SQL": "SELECT COUNT(T1.name) FROM enrolled AS T1 INNER JOIN longest_absense_from_school AS T2 ON T1.name = T2.name WHERE T1.school = 'smc' AND T2.month = 7",
        "difficulty": "challenging"
    },
    {
        "question_id": 739,
        "prev_question_id": 7928,
        "db_id": "music_platform_2",
        "question": "State the podcast title, content review and rating for all reviews with titled 'Love it!'",
        "evidence": "\"Love it!\" is the title of review; content reviewed refers to content",
        "SQL": "SELECT DISTINCT T1.title, T2.content, T2.rating FROM podcasts AS T1 INNER JOIN reviews AS T2 ON T2.podcast_id = T1.podcast_id WHERE T2.title = 'Love it!'",
        "difficulty": "challenging"
    },
    {
        "question_id": 740,
        "prev_question_id": 7888,
        "db_id": "world",
        "question": "What is the GNP growth rate by the country of Shanghai?",
        "evidence": "GNP growth rate = DIVIDE(SUBTRACT(GNP, GNPOld), GNPOld); Shanghai is a name of city;",
        "SQL": "SELECT CAST((T1.GNP - T1.GNPOld) AS REAL) / T1.GNPOld FROM Country AS T1 INNER JOIN City AS T2 ON T1.Code = T2.CountryCode WHERE T2.Name = 'Shanghai'",
        "difficulty": "challenging"
    },
    {
        "question_id": 741,
        "prev_question_id": 6818,
        "db_id": "retails",
        "question": "How many Japanese suppliers have their accounts in debt?",
        "evidence": "Japanese refers to n_name = 'Japan'; have accounts in debt refers to s_acctbal < 0",
        "SQL": "SELECT COUNT(T1.s_suppkey) FROM supplier AS T1 INNER JOIN nation AS T2 ON T1.s_nationkey = T2.n_nationkey WHERE T1.s_acctbal < 0 AND T2.n_name = 'JAPAN'",
        "difficulty": "challenging"
    },
    {
        "question_id": 742,
        "prev_question_id": 1133,
        "db_id": "talkingdata",
        "question": "For the event which happened at 14:09:49 on 2016/5/6, in the location coordinate(116, 40), how many apps were active?",
        "evidence": "at 14:09:49 on 2016/5/6 refers to timestamp = '2016/5/6 14:09:49'; location coordinate(116, 40) refers to longitude = '116' AND latitude = '40'; active refers to is_active = '1';",
        "SQL": "SELECT COUNT(T1.app_id) FROM app_events AS T1 INNER JOIN events AS T2 ON T1.event_id = T2.event_id WHERE T2.timestamp = '2016-05-06 14:09:49' AND T1.is_active = '1' AND T2.longitude = '116' AND T2.latitude = '40'",
        "difficulty": "challenging"
    },
    {
        "question_id": 743,
        "prev_question_id": 6054,
        "db_id": "books",
        "question": "How many orders have been cancelled in 2022?",
        "evidence": "cancelled refers to status_value = 'Cancelled'; in 2022 refers to SUBSTR(status_date, 1, 4) = '2022'",
        "SQL": "SELECT COUNT(*) FROM order_status AS T1 INNER JOIN order_history AS T2 ON T1.status_id = T2.status_id WHERE T1.status_value = 'Cancelled' AND STRFTIME('%Y', T2.status_date) = '2022'",
        "difficulty": "challenging"
    },
    {
        "question_id": 744,
        "prev_question_id": 8845,
        "db_id": "food_inspection",
        "question": "Among the businesses with score that ranges from 70 to 80, list their violation type ID and risk category.",
        "evidence": "businesses with score that ranges from 70 to 80 refer to business_id where score between 80 and 90;",
        "SQL": "SELECT DISTINCT T1.violation_type_id, T1.risk_category FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id INNER JOIN inspections AS T3 ON T2.business_id = T3.business_id WHERE T3.score BETWEEN 70 AND 80",
        "difficulty": "challenging"
    },
    {
        "question_id": 745,
        "prev_question_id": 2237,
        "db_id": "world_development_indicators",
        "question": "By how much did the indicator on Adolescent fertility rate increase from 1960 to 1961 in the country whose Alpha2Code is 1A?",
        "evidence": "by how much = subtract(sum(value where Year = 1961), sum(value where Year = 1960)); indicator on Adolescent fertility rate refers to IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)%'",
        "SQL": "SELECT ( SELECT T2.Value FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.Alpha2Code = '1A' AND T2.IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)' AND T2.Year = 1961 ) - ( SELECT T2.Value FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.Alpha2Code = '1A' AND T2.IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)' AND T2.Year = 1960 ) DIFF",
        "difficulty": "challenging"
    },
    {
        "question_id": 746,
        "prev_question_id": 8604,
        "db_id": "chicago_crime",
        "question": "Among the crimes in all the districts in Chicago, what is the percentage of them happening in the Central district?",
        "evidence": "the Central district refers to district_name = 'Central'; percentage = divide(count(case_number where district_name = 'Central'), count(case_number)) * 100%",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.district_name = 'Central' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.case_number) FROM Crime AS T1 INNER JOIN District AS T2 ON T1.district_no = T2.district_no",
        "difficulty": "challenging"
    },
    {
        "question_id": 747,
        "prev_question_id": 794,
        "db_id": "social_media",
        "question": "What is the average number of tweets posted by the users in a city in Argentina?",
        "evidence": "\"Argentina\" is the Country; average number of tweets in a city = Divide (Count(TweetID where Country = 'Argentina'), Count (City))",
        "SQL": "SELECT SUM(CASE WHEN T2.City = 'Buenos Aires' THEN 1.0 ELSE 0 END) / COUNT(T1.TweetID) AS avg FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID WHERE T2.Country = 'Argentina'",
        "difficulty": "challenging"
    },
    {
        "question_id": 748,
        "prev_question_id": 9061,
        "db_id": "bike_share_1",
        "question": "How many bikes can be borrowed in San Jose Diridon Caltrain Station at 12:06:01 on 2013/8/29?",
        "evidence": "number of bikes that can be borrowed refers to bikes_available; San Jose Diridon Caltrain Station refers to name = 'San Jose Diridon Caltrain Station'; time = '2013/8/29 12:06:01'",
        "SQL": "SELECT T2.bikes_available FROM station AS T1 INNER JOIN status AS T2 ON T1.id = T2.station_id WHERE T1.name = 'San Jose Diridon Caltrain Station' AND T2.time = '2013/08/29 12:06:01'",
        "difficulty": "challenging"
    },
    {
        "question_id": 749,
        "prev_question_id": 2461,
        "db_id": "shooting",
        "question": "Among all the male officers, what is the percentage of them are White?",
        "evidence": "male refers to gender = 'M'; white refers to race = 'W'; percentage = divide(count(officers where race = 'W'), count(officers)) where gender = 'M' * 100%",
        "SQL": "SELECT CAST(SUM(IIF(race = 'W', 1, 0)) AS REAL) * 100 / COUNT(case_number) FROM officers WHERE gender = 'M'",
        "difficulty": "challenging"
    },
    {
        "question_id": 750,
        "prev_question_id": 5149,
        "db_id": "address",
        "question": "Based on the population in 2020, calculate the percentage for the population of Asian in the zip code where the CBSA was Atmore, AL.",
        "evidence": "\"Atmore, AL\" is CBSA_name; percentage = Divide(asian_population, population_2020) * 100",
        "SQL": "SELECT CAST(T2.asian_population AS REAL) * 100 / T2.population_2010 FROM CBSA AS T1 INNER JOIN zip_data AS T2 ON T1.CBSA = T2.CBSA WHERE T1.CBSA_name = 'Atmore, AL'",
        "difficulty": "challenging"
    },
    {
        "question_id": 751,
        "prev_question_id": 7246,
        "db_id": "works_cycles",
        "question": "What is the percentage of employees who work the night shift?",
        "evidence": "percentage = DIVIDE(SUM(Name = 'Night')), (COUNT(ShiftID)) as percentage;",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.Name = 'Night' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.BusinessEntityID) FROM Shift AS T1 INNER JOIN EmployeeDepartmentHistory AS T2 ON T1.ShiftId = T2.ShiftId",
        "difficulty": "challenging"
    },
    {
        "question_id": 752,
        "prev_question_id": 7352,
        "db_id": "works_cycles",
        "question": "How many shipments by truck were made?",
        "evidence": "shipment by truck refers to Name = 'XRQ - TRUCK GROUND';",
        "SQL": "SELECT COUNT(*) FROM ShipMethod AS T1 INNER JOIN SalesOrderHeader AS T2 USING (ShipMethodID) WHERE T1.Name = 'XRQ - TRUCK GROUND'",
        "difficulty": "challenging"
    },
    {
        "question_id": 753,
        "prev_question_id": 3571,
        "db_id": "authors",
        "question": "List author name for articles that are preprinted but not published.",
        "evidence": "articles that are preprinted but not published refers to Year = 0",
        "SQL": "SELECT T2.Name FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.Year = 0",
        "difficulty": "challenging"
    },
    {
        "question_id": 754,
        "prev_question_id": 3148,
        "db_id": "donor",
        "question": "When was the highest amount of donated? How much was the amount?",
        "evidence": "when refers donation_timestamp; the highest amount refers to max(donation_total)",
        "SQL": "SELECT donation_timestamp, donation_total FROM donations WHERE donation_total = ( SELECT donation_total FROM donations ORDER BY donation_total DESC LIMIT 1 )",
        "difficulty": "challenging"
    },
    {
        "question_id": 755,
        "prev_question_id": 3193,
        "db_id": "donor",
        "question": "Please list the types of resources that the vendor Lakeshore Learning Materials has provided for the projects.",
        "evidence": "Lakeshore Learning Materials is vendor_name; type of resources refers to project_resource_type;",
        "SQL": "SELECT DISTINCT project_resource_type FROM resources WHERE vendor_name = 'Lakeshore Learning Materials'",
        "difficulty": "challenging"
    },
    {
        "question_id": 756,
        "prev_question_id": 148,
        "db_id": "movie_platform",
        "question": "For the list with more than 200 followers, state the title and how long the list has been created?",
        "evidence": "more than 200 followers refers to list_followers >200; how long the list has been created refers to SUBTRACT(CURRENT_TIMESTAMP,list_creation_timestamp_utc)",
        "SQL": "SELECT list_title , 365 * (strftime('%Y', 'now') - strftime('%Y', list_creation_timestamp_utc)) + 30 * (strftime('%m', 'now') - strftime('%m', list_creation_timestamp_utc)) + strftime('%d', 'now') - strftime('%d', list_creation_timestamp_utc) FROM lists WHERE list_followers > 200",
        "difficulty": "challenging"
    },
    {
        "question_id": 757,
        "prev_question_id": 2443,
        "db_id": "superstore",
        "question": "How many orders were made by customers who live in Texas at the Central superstore?",
        "evidence": "customer live in Texas refers to State = 'Texas'",
        "SQL": "SELECT COUNT(DISTINCT T2.`Order ID`) FROM people AS T1 INNER JOIN central_superstore AS T2 ON T1.`Customer ID` = T2.`Customer ID` WHERE T1.State = 'Texas'",
        "difficulty": "challenging"
    },
    {
        "question_id": 758,
        "prev_question_id": 7079,
        "db_id": "works_cycles",
        "question": "Among the active employees with over 10 hours of sick leave, what is the percentage of the employees with over 20 vacation hours?",
        "evidence": "CurrentFlag = 1 refers to the active status of employees; Percentage = Divide (Count (BusinessEntityID (CurrentFlag = 1 & VacationHours >20 & SickLeaveHours > 10)), Count (BusinessEntityID (CurrentFlag = 1 & SickLeaveHours>10))) * 100;",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.VacationHours > 20 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.BusinessEntityID) FROM EmployeePayHistory AS T1 INNER JOIN Employee AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.CurrentFlag = 1 AND T2.SickLeaveHours > 10",
        "difficulty": "challenging"
    },
    {
        "question_id": 759,
        "prev_question_id": 8614,
        "db_id": "chicago_crime",
        "question": "Who was the alderman of the legislative district where case No. JB103470 took place? Give the full name.",
        "evidence": "case No. JB103470 refers to case_number = 'JB103470'; full name refers to alderman_first_name, alderman_last_name",
        "SQL": "SELECT T1.alderman_first_name, T1.alderman_last_name FROM Ward AS T1 INNER JOIN Crime AS T2 ON T1.ward_no = T2.ward_no WHERE T2.case_number = 'JB103470'",
        "difficulty": "challenging"
    },
    {
        "question_id": 760,
        "prev_question_id": 4155,
        "db_id": "citeseer",
        "question": "Under what classification do the papers that cited word1163 belong?",
        "evidence": "",
        "SQL": "SELECT DISTINCT T1.class_label FROM paper AS T1 INNER JOIN content AS T2 ON T1.paper_id = T2.paper_id WHERE T2.word_cited_id = 'word1163'",
        "difficulty": "challenging"
    },
    {
        "question_id": 761,
        "prev_question_id": 6079,
        "db_id": "books",
        "question": "What is the average of English books among all books published by Carole Marsh Mysteries?",
        "evidence": "English book refers to language_name = 'English'; 'Carole Marsh Mysteries' is the publisher_name; average = Divide (Count(language_name = 'English'), Count(book_id))",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.language_name = 'English' THEN 1 ELSE 0 END) AS REAL) / COUNT(*) FROM book_language AS T1 INNER JOIN book AS T2 ON T1.language_id = T2.language_id INNER JOIN publisher AS T3 ON T3.publisher_id = T2.publisher_id WHERE T3.publisher_name = 'Carole Marsh Mysteries'",
        "difficulty": "challenging"
    },
    {
        "question_id": 762,
        "prev_question_id": 1755,
        "db_id": "restaurant",
        "question": "What is the name of the 24 hour diner at San Francisco?",
        "evidence": "name refers to label; 24 hour diner refers to food_type = '24 hour diner'; San Francisco refers to city = 'san francisco'",
        "SQL": "SELECT label FROM generalinfo WHERE food_type = '24 hour diner' AND city = 'san francisco'",
        "difficulty": "challenging"
    },
    {
        "question_id": 763,
        "prev_question_id": 6866,
        "db_id": "retails",
        "question": "How many suppliers have their accounts in debt?",
        "evidence": "account in debt refers to s_acctbal < 0",
        "SQL": "SELECT COUNT(s_suppkey) FROM supplier WHERE s_acctbal < 0",
        "difficulty": "challenging"
    },
    {
        "question_id": 764,
        "prev_question_id": 3906,
        "db_id": "public_review_platform",
        "question": "List out which business category that are most likely to have average good review in Arizona?",
        "evidence": "average good review refers to review_count > = 3; Arizona refers to state = 'AZ'; business category refers to category_name",
        "SQL": "SELECT DISTINCT T4.category_name FROM Reviews AS T1 INNER JOIN Business AS T2 ON T1.business_id = T2.business_id INNER JOIN Business_Categories AS T3 ON T2.business_id = T3.business_id INNER JOIN Categories AS T4 ON T3.category_id = T4.category_id WHERE T2.state LIKE 'AZ' AND T1.review_stars >= 3",
        "difficulty": "challenging"
    },
    {
        "question_id": 765,
        "prev_question_id": 3203,
        "db_id": "donor",
        "question": "What is the total donation amount made for projects whose main subject area are Literacy & Language?",
        "evidence": "main subject area refers to primary_focus_area = 'Literacy & Language'; total donation amount refers to Sum(dollar_amount);",
        "SQL": "SELECT SUM(T2.dollar_amount) FROM projects AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T1.primary_focus_area = 'Literacy & Language'",
        "difficulty": "challenging"
    },
    {
        "question_id": 766,
        "prev_question_id": 3743,
        "db_id": "college_completion",
        "question": "In year 2010 at schools located in Hawaii, what is the percentage of schools offers an associate's degree?",
        "evidence": "Hawaii refers to state = 'Hawaii'; associate's degree refers to level = '2-year'; percentage = MULTIPLY(DIVIDE(SUM(level = '2-year' ), count(level)), 1.0);",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.level = '2-year' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.level) FROM state_sector_details AS T1 INNER JOIN state_sector_grads AS T2 ON T2.stateid = T1.stateid WHERE T2.state = 'Hawaii' AND T2.year = 2010",
        "difficulty": "challenging"
    },
    {
        "question_id": 767,
        "prev_question_id": 5398,
        "db_id": "sales",
        "question": "What is the difference in price between HL Mountain Frame - Black, 42 and LL Mountain Frame - Black, 42?",
        "evidence": "difference = SUBTRACT((Price WHERE Name = 'HL Mountain Frame - Black, 42'), (Price WHERE Name = 'HL Mountain Frame - Black, 42'));",
        "SQL": "SELECT ( SELECT Price FROM Products WHERE Name = 'HL Mountain Frame - Black, 42' ) - ( SELECT Price FROM Products WHERE Name = 'LL Mountain Frame - Black, 42' ) AS num",
        "difficulty": "challenging"
    },
    {
        "question_id": 768,
        "prev_question_id": 5629,
        "db_id": "shipping",
        "question": "Among all shipments delivered by Sue Newel, identify the percentage of shipments that were placed by Autoware Inc.",
        "evidence": "\"Autoware Inc\" is the cust_name; percentage = Divide (Count(ship_id where cust_name = 'Autoware Inc'), Count(ship_id)) * 100",
        "SQL": "SELECT CAST(SUM(CASE WHEN T3.cust_name = 'Autoware Inc' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) AS per FROM shipment AS T1 INNER JOIN driver AS T2 ON T1.driver_id = T2.driver_id INNER JOIN customer AS T3 ON T3.cust_id = T1.cust_id WHERE T2.first_name = 'Sue' AND T2.last_name = 'Newell'",
        "difficulty": "challenging"
    },
    {
        "question_id": 769,
        "prev_question_id": 2530,
        "db_id": "app_store",
        "question": "What is the average rating of comic category apps? How many users hold positive attitude towards this app?",
        "evidence": "average rating = AVG(Rating where Category = 'COMICS'); number of users who hold a positive attitude towards the app refers to SUM(Sentiment = 'Positive');",
        "SQL": "SELECT AVG(T1.Rating) , COUNT(CASE WHEN T2.Sentiment = 'Positive' THEN 1 ELSE NULL END) FROM playstore AS T1 INNER JOIN user_reviews AS T2 ON T1.App = T2.App WHERE T1.Category = 'COMICS'",
        "difficulty": "challenging"
    },
    {
        "question_id": 770,
        "prev_question_id": 6758,
        "db_id": "retails",
        "question": "Among all the customers in Brazil, how many of them have an account balance of less than 1000?",
        "evidence": "customers refer to c_custkey; Brazil is the name of the nation which refers to n_name = 'BRAZIL'; account balance of less than 1000 refers to c_acctbal < 1000;",
        "SQL": "SELECT COUNT(T1.c_custkey) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T2.n_name = 'BRAZIL' AND T1.c_acctbal < 1000",
        "difficulty": "challenging"
    },
    {
        "question_id": 771,
        "prev_question_id": 6731,
        "db_id": "retails",
        "question": "How many customers are there in India?",
        "evidence": "customers refer to c_custkey; India is the name of the nation which refers to n_name = 'INDIA';",
        "SQL": "SELECT COUNT(T1.c_custkey) FROM customer AS T1 INNER JOIN nation AS T2 ON T1.c_nationkey = T2.n_nationkey WHERE T2.n_name = 'INDIA'",
        "difficulty": "challenging"
    },
    {
        "question_id": 772,
        "prev_question_id": 5264,
        "db_id": "beer_factory",
        "question": "What is the percentage of 5 star ratings River City brand root beer get?",
        "evidence": "percentage = MULTIPLY(DIVIDE(SUM(BrandID WHERE StarRating = 5), COUNT(BrandID) WHERE BrandName = 'River City'), 1.0); 5 star ratings refers to StarRating = 5; River City refers to BrandName = 'River City';",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T2.StarRating = 5 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T2.StarRating) FROM rootbeerbrand AS T1 INNER JOIN rootbeerreview AS T2 ON T1.BrandID = T2.BrandID WHERE T1.BrandName = 'River City'",
        "difficulty": "challenging"
    },
    {
        "question_id": 773,
        "prev_question_id": 2856,
        "db_id": "professional_basketball",
        "question": "In 1990, how many players whose teams had the winning rate of more than 75%?",
        "evidence": "in 1990 refers to year = 1990; winning rate of more than 75% refers to Divide(won, games) > 0.75",
        "SQL": "SELECT COUNT(DISTINCT T1.playerID) FROM players_teams AS T1 INNER JOIN teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE CAST(T2.won AS REAL) * 100 / CAST(T2.games AS REAL) > 75 AND T1.year = 1990",
        "difficulty": "challenging"
    },
    {
        "question_id": 774,
        "prev_question_id": 8168,
        "db_id": "sales_in_weather",
        "question": "State the max temperature of the weather station which has the no.21 store on 2012/11/9.",
        "evidence": "no.21 store refers to store_nbr = 21; on 2012/11/9 refers to date = '2012-11-09'; max temperature refers to tmax",
        "SQL": "SELECT tmax FROM weather AS T1 INNER JOIN relation AS T2 ON T1.station_nbr = T2.station_nbr WHERE T2.store_nbr = 21 AND T1.`date` = '2012-11-09'",
        "difficulty": "challenging"
    },
    {
        "question_id": 775,
        "prev_question_id": 3306,
        "db_id": "donor",
        "question": "Among the technology items, what percentage of them are from Best Buy for Business? Provide the date of the project related to those items.",
        "evidence": "technology items refers to project_resource_type = 'Technology'; from Best Buy for Business refers to vendor_name = 'Best Buy for Business'; percentage refers to DIVIDE(count(case when vendor_name = 'Best Buy for Business'),count(projectid))",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.vendor_name = 'Best Buy for Business' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.projectid) FROM resources AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.project_resource_type = 'Technology' UNION ALL SELECT DISTINCT T1.date_posted FROM projects AS T1 INNER JOIN resources AS T2 ON T1.projectid = T2.projectid WHERE T2.vendor_name = 'Best Buy for Business' AND T2.project_resource_type = 'Technology'",
        "difficulty": "challenging"
    },
    {
        "question_id": 776,
        "prev_question_id": 3200,
        "db_id": "donor",
        "question": "What is the total donated amount for projects created by a teacher working in a school in Brooklyn?",
        "evidence": "school in Brooklyn refers to school_city = 'Brooklyn'; total donated amount refers to donation_total;",
        "SQL": "SELECT SUM(T2.donation_total) FROM projects AS T1 INNER JOIN donations AS T2 ON T1.projectid = T2.projectid WHERE T1.school_city = 'Brooklyn'",
        "difficulty": "challenging"
    },
    {
        "question_id": 777,
        "prev_question_id": 8882,
        "db_id": "cookbook",
        "question": "Give the name of the most widely used ingredient.",
        "evidence": "the most widely used ingredient refers to MAX(COUNT(ingredient_id))",
        "SQL": "SELECT T1.name FROM Ingredient AS T1 INNER JOIN Quantity AS T2 ON T1.ingredient_id = T2.ingredient_id GROUP BY T1.name ORDER BY COUNT(T1.name) DESC LIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question_id": 778,
        "prev_question_id": 5496,
        "db_id": "menu",
        "question": "Among the dishes on menu page ID 7610, list the names and highest prices of the dishes in menu items that were created on 23rd May 2011.",
        "evidence": "highest prices of the dishes refers to MAX(price); created on 23rd May 2011 refers to created_at like '2011-05-23%';",
        "SQL": "SELECT T1.name, T2.price FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id WHERE T2.created_at LIKE '2011-05-23%' ORDER BY T2.price DESC LIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question_id": 779,
        "prev_question_id": 7034,
        "db_id": "works_cycles",
        "question": "How many of the workers who started working in 2009 are from the Production Department?",
        "evidence": "StartDate BETWEEN '2009-01-01' AND '2009-12-31';",
        "SQL": "SELECT COUNT(T2.BusinessEntityID) FROM Department AS T1 INNER JOIN EmployeeDepartmentHistory AS T2 ON T1.DepartmentID = T2.DepartmentID WHERE T2.StartDate >= '2009-01-01' AND T2.StartDate < '2010-01-01' AND T1.Name = 'Production'",
        "difficulty": "challenging"
    },
    {
        "question_id": 780,
        "prev_question_id": 1873,
        "db_id": "soccer_2016",
        "question": "Among the players out in match ID 392187, calculate the percentage of players out by bowl.",
        "evidence": "out by bowl refers to Out_Name = 'bowled'; percentage = divide(count(Player_Out where Out_Name = 'bowled'), count(Player_Out)) * 100% where Match_Id = 392187",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.Out_Name = 'bowled' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Player_Out) FROM Wicket_Taken AS T1 INNER JOIN Out_Type AS T2 ON T2.Out_Id = T1.Kind_Out WHERE T1.Match_Id = 392187",
        "difficulty": "challenging"
    },
    {
        "question_id": 781,
        "prev_question_id": 3145,
        "db_id": "cars",
        "question": "Calculate the percentage of American cars among all cars.",
        "evidence": "American car refers to country = 'USA'; percentage = divide(count(ID where country = 'USA'), count(ID)) * 100%",
        "SQL": "SELECT CAST(SUM(CASE WHEN T3.country = 'USA' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM data AS T1 INNER JOIN production AS T2 ON T1.ID = T2.ID INNER JOIN country AS T3 ON T3.origin = T2.country",
        "difficulty": "challenging"
    },
    {
        "question_id": 782,
        "prev_question_id": 8575,
        "db_id": "software_company",
        "question": "In male customers with an occupation handlers or cleaners, what is the percentage of customers with a true response?",
        "evidence": "DIVIDE(COUNT(OCCUPATION = 'Handlers-cleaners', SEX = 'Male' and RESPONSE = 'true'), COUNT(OCCUPATION = 'Handlers-cleaners' and SEX = 'Male')) as percentage;",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.RESPONSE = 'true' THEN 1.0 ELSE 0 END) AS REAL) * 100 / COUNT(T2.REFID) FROM Customers AS T1 INNER JOIN Mailings1_2 AS T2 ON T1.ID = T2.REFID WHERE T1.OCCUPATION = 'Handlers-cleaners' AND T1.SEX = 'Male'",
        "difficulty": "challenging"
    },
    {
        "question_id": 783,
        "prev_question_id": 4912,
        "db_id": "legislator",
        "question": "Among the female legislators, what is the percentage of the senators in Maine?",
        "evidence": "female refers to gender_bio = 'F'; percentage = MULTIPLY(DIVIDE(SUM(type = 'sen'), COUNT(type)), 100.0); senators refers to type = 'sen'; Maine refers to state = 'ME';",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.type = 'sen' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.type) FROM current AS T1 INNER JOIN `current-terms` AS T2 ON T1.bioguide_id = T2.bioguide WHERE T2.state = 'ME' AND T1.gender_bio = 'F'",
        "difficulty": "challenging"
    },
    {
        "question_id": 784,
        "prev_question_id": 2956,
        "db_id": "shakespeare",
        "question": "How many more scenes are there in Act 1 than in Act 5 in Twelfth Night?",
        "evidence": "in Twelfth Night refers to Title = 'Twelfth Night'; How many more scenes = subtract(sum(Act = 1), sum(Act = 5))",
        "SQL": "SELECT SUM(IIF(T2.Act = 1, 1, 0)) - SUM(IIF(T2.Act = 5, 1, 0)) AS more FROM works AS T1 INNER JOIN chapters AS T2 ON T1.id = T2.work_id WHERE T1.Title = 'Twelfth Night'",
        "difficulty": "challenging"
    },
    {
        "question_id": 785,
        "prev_question_id": 7245,
        "db_id": "works_cycles",
        "question": "Compare the average pay rate of male and female employees.",
        "evidence": "male refers to Gender = 'M'; female refers to Gender = 'F'; difference in average rate = DIVIDE(AVG(Rate where Gender = 'F')), (AVG(Rate where Gender = 'M'))) as diff;",
        "SQL": "SELECT AVG(T2.Rate) FROM Employee AS T1 INNER JOIN EmployeePayHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID GROUP BY T1.Gender",
        "difficulty": "challenging"
    },
    {
        "question_id": 786,
        "prev_question_id": 2226,
        "db_id": "world_development_indicators",
        "question": "What is the lending category of the country with a cereal production of 6140000 metric tons for the year 1966?",
        "evidence": "cereal production of 6140000 metric tons refers value where IndicatorName = 'Cereal production (metric tons)'> 6140000; the year 1966 refers to Year = '1966'",
        "SQL": "SELECT T1.LendingCategory FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.IndicatorName = 'Cereal production (metric tons)' AND T2.Value = 6140000 AND T2.Year = 1966",
        "difficulty": "challenging"
    },
    {
        "question_id": 787,
        "prev_question_id": 2473,
        "db_id": "shooting",
        "question": "What is the percentage of subject who are female used the Vehicle as weapon?",
        "evidence": "female refers to gender = 'F'; use Vehicle as weapon refers to subject_weapon = 'Vehicle'; percentage = divide(count(case_number where subject_weapon = 'Vehicle'), count(case_number)) where gender = 'F' * 100%",
        "SQL": "SELECT CAST(SUM(T1.subject_weapon = 'Vehicle') AS REAL) * 100 / COUNT(T1.case_number) FROM incidents T1 INNER JOIN subjects T2 ON T1.case_number = T2.case_number WHERE T2.gender = 'F'",
        "difficulty": "challenging"
    },
    {
        "question_id": 788,
        "prev_question_id": 4289,
        "db_id": "simpson_episodes",
        "question": "How many 1 star ratings are there in the worst rated episode of the season?",
        "evidence": "worst rated episode refers to MIN(rating)",
        "SQL": "SELECT COUNT(*) FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T2.stars = 1 ORDER BY T1.rating LIMIT 1;",
        "difficulty": "challenging"
    },
    {
        "question_id": 789,
        "prev_question_id": 8100,
        "db_id": "university",
        "question": "Which ranking system is criteria \"Total Shanghai\" in?",
        "evidence": "criteria \"Total Shanghai\" refers to criteria_name = 'Total Shanghai'; which ranking system refers to system_name",
        "SQL": "SELECT T1.system_name FROM ranking_system AS T1 INNER JOIN ranking_criteria AS T2 ON T1.id = T2.ranking_system_id WHERE T2.criteria_name = 'Total Shanghai'",
        "difficulty": "challenging"
    },
    {
        "question_id": 790,
        "prev_question_id": 7947,
        "db_id": "music_platform_2",
        "question": "What is the percentage of reviews added each year of the total reviews added?",
        "evidence": "review added each year refers to runs_at like '2021%' and runs_at like '2022%'; percentage for 2021 = Divide (Sum(reviews_added(runs_at like '2021%)), Sum(reviews_added)) * 100; percentage of 2022 = Divide (Sum(reviews_added(runs_at like '2022%')), Sum(reviews_added)) * 100",
        "SQL": "SELECT CAST((SUM(CASE WHEN run_at LIKE '2022-%' THEN reviews_added ELSE 0 END) - SUM(CASE WHEN run_at LIKE '2021-%' THEN reviews_added ELSE 0 END)) AS REAL) * 100 / SUM(reviews_added) OR '%' \"percentage\" FROM runs",
        "difficulty": "challenging"
    },
    {
        "question_id": 791,
        "prev_question_id": 6339,
        "db_id": "retail_world",
        "question": "For the order from \"HILAA\" on 1997/12/25, what was the total quantity of the products in that order?",
        "evidence": "HILLA refers to CustomerID = 'HILAA'; on 1997/12/25 refers to OrderDate = '1997/12/25';",
        "SQL": "SELECT SUM(T2.Quantity) FROM Orders AS T1 INNER JOIN `Order Details` AS T2 ON T1.OrderID = T2.OrderID WHERE T1.CustomerID = 'HILAA' AND T1.OrderDate LIKE '1997-12-25%'",
        "difficulty": "challenging"
    },
    {
        "question_id": 792,
        "prev_question_id": 8156,
        "db_id": "sales_in_weather",
        "question": "What is the percentage of the units of item no.5 sold among all units of items sold in store no.3 on the day with the highest max temperature in 2012?",
        "evidence": "item no. 5 refers to item_nbr = 5; store no.3 refers to store_nbr = 3; highest max temperature refers to Max(tmax); in 2012 refers to SUBSTR(date, 1, 4) = '2012';\u00a0 Percentage = Divide (Sum(units where item_nbr = 5), Sum(units)) * 100",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.item_nbr = 5 THEN units * 1 ELSE 0 END) AS REAL) * 100 / SUM(units) FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T1.store_nbr = 3 AND T1.`date` LIKE '%2012%' AND T3.tmax = ( SELECT MAX(T3.tmax) FROM sales_in_weather AS T1 INNER JOIN relation AS T2 ON T1.store_nbr = T2.store_nbr INNER JOIN weather AS T3 ON T2.station_nbr = T3.station_nbr WHERE T1.store_nbr = 3 AND T1.`date` LIKE '%2012%' )",
        "difficulty": "challenging"
    },
    {
        "question_id": 793,
        "prev_question_id": 4986,
        "db_id": "olympics",
        "question": "How many female athletes are from the Philippines?",
        "evidence": "female athletes refer to id where gender = 'F'; from the Philippines region_name = 'Philippines';",
        "SQL": "SELECT COUNT(T2.person_id) FROM noc_region AS T1 INNER JOIN person_region AS T2 ON T1.id = T2.region_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.region_name = 'Philippines' AND T3.gender = 'F'",
        "difficulty": "simple"
    },
    {
        "question_id": 794,
        "prev_question_id": 4295,
        "db_id": "simpson_episodes",
        "question": "List all of the award winners' birth dates.",
        "evidence": "award winner refers to result = 'Winner'",
        "SQL": "SELECT T1.birthdate FROM Person AS T1 INNER JOIN Award AS T2 ON T1.name = T2.person WHERE T2.result = 'Winner';",
        "difficulty": "simple"
    },
    {
        "question_id": 795,
        "prev_question_id": 7502,
        "db_id": "image_and_language",
        "question": "Tell the attribute of the weeds in image no.2377988.",
        "evidence": "attribute of the weeds refers to OBJ_CLASS = 'weeds'; image no.2377988 refers to IMG_ID = 2377988",
        "SQL": "SELECT T2.ATT_CLASS FROM IMG_OBJ_att AS T1 INNER JOIN ATT_CLASSES AS T2 ON T1.ATT_CLASS_ID = T2.ATT_CLASS_ID INNER JOIN IMG_OBJ AS T3 ON T1.IMG_ID = T3.IMG_ID INNER JOIN OBJ_CLASSES AS T4 ON T3.OBJ_CLASS_ID = T4.OBJ_CLASS_ID WHERE T4.OBJ_CLASS = 'weeds' AND T1.IMG_ID = 2377988",
        "difficulty": "simple"
    },
    {
        "question_id": 796,
        "prev_question_id": 6011,
        "db_id": "books",
        "question": "How many authors are named Adam?",
        "evidence": "authors named Adam refers to author_name LIKE 'Adam'",
        "SQL": "SELECT COUNT(*) FROM author WHERE author_name LIKE 'Adam%'",
        "difficulty": "simple"
    },
    {
        "question_id": 797,
        "prev_question_id": 960,
        "db_id": "cs_semester",
        "question": "Among professors with the highest teachability, how many of their students have high salary?",
        "evidence": "highest teachability refers to MAX(teachability); high salary refers to salary = 'high';",
        "SQL": "SELECT COUNT(T1.student_id) FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id WHERE T1.salary = 'high' ORDER BY T2.teachingability DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 798,
        "prev_question_id": 5467,
        "db_id": "sales",
        "question": "List the full name of customers who spend more than 50,000 in descending order the amount spend.",
        "evidence": "full name of the customer = FirstName, MiddleInitial, LastName; more than 50,000 in the amount refers to MULTIPLY(Quantity, Price) > 50000;",
        "SQL": "SELECT DISTINCT T3.FirstName, T3.MiddleInitial, T3.LastName FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Customers AS T3 ON T2.CustomerID = T3.CustomerID WHERE T2.Quantity * T1.Price > 50000",
        "difficulty": "simple"
    },
    {
        "question_id": 799,
        "prev_question_id": 3493,
        "db_id": "video_games",
        "question": "What is the genre of the game ID 119?",
        "evidence": "genre of the game refers to genre_name; game ID 119 refers to game.id = 119;",
        "SQL": "SELECT T2.genre_name FROM game AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.id WHERE T1.id = 119",
        "difficulty": "simple"
    },
    {
        "question_id": 800,
        "prev_question_id": 2481,
        "db_id": "shooting",
        "question": "How many people were injured between 2006 and 2014 as a result of a handgun?",
        "evidence": "injured refers to subject_statuses = 'injured'; between 2006 and 2014 refers to date between '2006-01-01' and '2013-12-31'; handgun refers to subject_weapon = 'handgun'; where the incidents took place refers to location",
        "SQL": "SELECT COUNT(location) FROM incidents WHERE subject_weapon = 'Handgun' AND subject_statuses = 'Injured' AND date BETWEEN '2006-01-01' AND '2013-12-31'",
        "difficulty": "simple"
    },
    {
        "question_id": 801,
        "prev_question_id": 7400,
        "db_id": "works_cycles",
        "question": "Please list the top 3 discounts with the highest discount percentage and fall under the reseller category.",
        "evidence": "discount percentage refers to DiscountPct; highest discount percentage refers to MAX(DiscountPct);",
        "SQL": "SELECT Description, DiscountPct FROM SpecialOffer WHERE Category = 'Reseller' ORDER BY DiscountPct DESC LIMIT 0, 3",
        "difficulty": "simple"
    },
    {
        "question_id": 802,
        "prev_question_id": 8169,
        "db_id": "sales_in_weather",
        "question": "Provide the sunrise time recorded by the home weather station of store no.30 on 2014/2/21.",
        "evidence": "store no. 30 refers to store_nbr = 30; on 2014/2/21 refers to date = '2014-02-21'",
        "SQL": "SELECT T1.sunrise FROM weather AS T1 INNER JOIN relation AS T2 ON T1.station_nbr = T2.station_nbr WHERE T1.`date` = '2014-02-21' AND store_nbr = 30",
        "difficulty": "simple"
    },
    {
        "question_id": 803,
        "prev_question_id": 6597,
        "db_id": "retail_world",
        "question": "Indicate the category name of the product name with the highest units on order.",
        "evidence": "",
        "SQL": "SELECT T2.CategoryName FROM Products AS T1 INNER JOIN Categories AS T2 ON T1.CategoryID = T2.CategoryID WHERE T1.UnitsOnOrder = ( SELECT MAX(T1.UnitsOnOrder) FROM Products )",
        "difficulty": "simple"
    },
    {
        "question_id": 804,
        "prev_question_id": 793,
        "db_id": "social_media",
        "question": "Please list the texts of all the tweets posted by male users from Buenos Aires.",
        "evidence": "\"Buenos Aires\" is the City; male user refers to Gender = 'Male'",
        "SQL": "SELECT T1.text FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID INNER JOIN user AS T2 ON T2.UserID = T1.UserID INNER JOIN user AS T3 ON T1.UserID = T3.UserID WHERE T2.City = 'Buenos Aires' AND T3.Gender = 'Male'",
        "difficulty": "simple"
    },
    {
        "question_id": 805,
        "prev_question_id": 2108,
        "db_id": "world_development_indicators",
        "question": "What is the average value of Adjusted net enrolment rate, primary, both sexes (%) indicator in Algeria from 1975 to 1980?",
        "evidence": "the average value of Adjusted net enrolment rate, primary, both sexes (%) is DIVIDE(SUM(Value), SUM(IndicatorName = 'Adjusted net enrolment rate, primary, both sexes (%)')); Year BETWEEN 1975 AND 1980; Algeria is the name of country where CountryName = 'Algeria'",
        "SQL": "SELECT CAST(SUM(Value) AS REAL) / COUNT(CountryCode) FROM Indicators WHERE CountryName = 'Algeria' AND Year > 1974 AND Year < 1981 AND IndicatorName = 'Adjusted net enrolment rate, primary, both sexes (%)'",
        "difficulty": "simple"
    },
    {
        "question_id": 806,
        "prev_question_id": 2039,
        "db_id": "soccer_2016",
        "question": "In the match ID 419135, who won by runs?",
        "evidence": "who refers to Team_Name",
        "SQL": "SELECT T1.Team_Name FROM Team AS T1 INNER JOIN Match AS T2 ON T1.team_id = T2.match_winner INNER JOIN Win_By AS T3 ON T2.win_type = T3.win_id WHERE T2.Match_Id = 419135",
        "difficulty": "simple"
    },
    {
        "question_id": 807,
        "prev_question_id": 3233,
        "db_id": "donor",
        "question": "What is the teacher prefix for the teacher who wrote the project 'Creating Memories and Inspiring Dreams'?",
        "evidence": "Creating Memories and Inspiring Dreams is title;",
        "SQL": "SELECT T2.teacher_prefix FROM essays AS T1 INNER JOIN projects AS T2 ON T1.projectid = T2.projectid WHERE T1.title LIKE 'Creating Memories and Inspiring Dreams%'",
        "difficulty": "simple"
    },
    {
        "question_id": 808,
        "prev_question_id": 6857,
        "db_id": "retails",
        "question": "Please list the names of all the products under the type \"promo brushed steel\".",
        "evidence": "product name refers to p_name; type \"promo brushed steel\" refers to p_type = 'PROMO BRUSHED STEEL'",
        "SQL": "SELECT p_name FROM part WHERE p_type = 'PROMO BRUSHED STEEL'",
        "difficulty": "simple"
    },
    {
        "question_id": 809,
        "prev_question_id": 4513,
        "db_id": "student_loan",
        "question": "What is the school and organization enrolled by student211?",
        "evidence": "organization refers to organ; student211 is a name of student;",
        "SQL": "SELECT T2.school, T1.organ FROM enlist AS T1 INNER JOIN enrolled AS T2 ON T2.name = T1.name WHERE T1.name = 'student211'",
        "difficulty": "simple"
    },
    {
        "question_id": 810,
        "prev_question_id": 8539,
        "db_id": "software_company",
        "question": "Among the male customers with an level of education of 4 and below, list their income K.",
        "evidence": "male customers with an level of education of 4 and below refer to SEX = 'Male' where EDUCATIONNUM < 4;",
        "SQL": "SELECT INCOME_K FROM Demog WHERE GEOID IN ( SELECT GEOID FROM Customers WHERE EDUCATIONNUM < 4 AND SEX = 'Male' )",
        "difficulty": "simple"
    },
    {
        "question_id": 811,
        "prev_question_id": 7630,
        "db_id": "hockey",
        "question": "Who are the players played both in NHL and WHA. List the given name and first year they were in NHL and first year in WHA.",
        "evidence": "first year they were in NHL refers to firstNHL; first year in WHA refers to firstWHA; play in both refers to firstNHL IS NOT NULL AND firstWHA IS NOT NULL\n",
        "SQL": "SELECT nameGiven, firstNHL, firstWHA FROM Master WHERE firstNHL IS NOT NULL AND firstWHA IS NOT NULL",
        "difficulty": "simple"
    },
    {
        "question_id": 812,
        "prev_question_id": 2942,
        "db_id": "professional_basketball",
        "question": "In the year 1997 allstar game, which teams did the players had the most rebounds play in? List their team ids.",
        "evidence": "in 1997 refers to year = 1997; the most rebounds refers to max(rebounds); team id refers to tmID",
        "SQL": "SELECT T2.tmID FROM players_teams AS T1 INNER JOIN teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year INNER JOIN player_allstar AS T3 ON T3.playerID = T1.playerID WHERE T3.season_id = 1997 ORDER BY T1.rebounds DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 813,
        "prev_question_id": 1960,
        "db_id": "soccer_2016",
        "question": "What are the names of the venues in Abu Dhabi?",
        "evidence": "names of the venues refers to Venue_Name; Abu Dhabi refers to City_Name = 'Abu Dhabi'",
        "SQL": "SELECT T1.Venue_Name FROM Venue AS T1 INNER JOIN City AS T2 ON T1.City_Id = T2.City_Id WHERE T2.City_Name = 'Abu Dhabi'",
        "difficulty": "simple"
    },
    {
        "question_id": 814,
        "prev_question_id": 7754,
        "db_id": "hockey",
        "question": "Among the teams that had more wins than loses in the year 2006, how many of them have over 100 points?",
        "evidence": "more wins than loses refers to W > L; over 100 points refers to Pts > 100",
        "SQL": "SELECT COUNT(tmID) FROM Teams WHERE year = 2006 AND W > L AND Pts > 100",
        "difficulty": "simple"
    },
    {
        "question_id": 815,
        "prev_question_id": 8953,
        "db_id": "human_resources",
        "question": "What is the education required for David Whitehead to reach his current position?",
        "evidence": "David Whitehead is the full name of an employee; full name = firstname, lastname",
        "SQL": "SELECT T2.educationrequired FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE T1.firstname = 'David' AND T1.lastname = 'Whitehead' AND T1.gender = 'M'",
        "difficulty": "simple"
    },
    {
        "question_id": 816,
        "prev_question_id": 8570,
        "db_id": "software_company",
        "question": "What is the income of female customers ages from 30 to 55 years old and has an occupation of machine-op-inspct?",
        "evidence": "female customers ages from 30 to 55 years old refer to SEX = 'Female' where age BETWEEN 30 AND 55; income refers to INCOME_K;",
        "SQL": "SELECT T2.INCOME_K FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.SEX = 'Female' AND T1.age >= 30 AND T1.age <= 55 AND T1.OCCUPATION = 'Machine-op-inspct'",
        "difficulty": "simple"
    },
    {
        "question_id": 817,
        "prev_question_id": 437,
        "db_id": "movies_4",
        "question": "What is the title of the movie that was made with the most money and resources?",
        "evidence": "made with the most money and resources refers to max(budget)",
        "SQL": "SELECT title FROM movie ORDER BY budget DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 818,
        "prev_question_id": 844,
        "db_id": "social_media",
        "question": "Among all the tweets with a positive sentiment, how many of them were posted by male users in Australia?",
        "evidence": "tweet with positive sentiment refers to Sentiment > 0; male user refers to Gender = 'Male'; 'Australia' is the Country",
        "SQL": "SELECT COUNT(T1.TweetID) FROM twitter AS T1 INNER JOIN location AS T2 ON T2.LocationID = T1.LocationID INNER JOIN user AS T3 ON T3.UserID = T1.UserID WHERE T2.Country = 'Australia' AND T3.Gender = 'Male' AND T1.Sentiment > 0",
        "difficulty": "simple"
    },
    {
        "question_id": 819,
        "prev_question_id": 3690,
        "db_id": "college_completion",
        "question": "What is the number of female graduate for all students cohort from Oakwood University in 2013?",
        "evidence": "female refers to gender = 'F'; graduates refers to grad_cohort; Oakwood University refers to chronname = 'Oakwood University'; in 2013 refers to year = 2013; all sutdents refer to rae = 'X';",
        "SQL": "SELECT COUNT(*) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T1.unitid = T2.unitid WHERE T2.year = 2013 AND T2.gender = 'F' AND T2.race = 'X' AND T1.chronname = 'Oakwood University'",
        "difficulty": "simple"
    },
    {
        "question_id": 820,
        "prev_question_id": 6984,
        "db_id": "ice_hockey_draft",
        "question": "Calculate the average height in centimeter of all players who played in Acadie-Bathurst Titan during regular season.",
        "evidence": "average height in centimeter = AVG(height_in_cm); height in centimeter refers to height_in_cm; players refers to PlayerName; Acadie-Bathurst Titan refers to TEAM = 'Acadie-Bathurst Titan'; regular season refers to GAMETYPE = 'Regular Season';",
        "SQL": "SELECT CAST(SUM(T1.height_in_cm) AS REAL) / COUNT(T2.ELITEID) FROM height_info AS T1 INNER JOIN PlayerInfo AS T2 ON T1.height_id = T2.height INNER JOIN SeasonStatus AS T3 ON T2.ELITEID = T3.ELITEID WHERE T3.TEAM = 'Acadie-Bathurst Titan' AND T3.GAMETYPE = 'Regular Season'",
        "difficulty": "simple"
    },
    {
        "question_id": 821,
        "prev_question_id": 1395,
        "db_id": "synthea",
        "question": "How many of the patients born in 1920s had pneumonia?",
        "evidence": "patients born in 1920s refer to patient where birthdate like '192%'; pneumonia refers to DESCRIPTION = 'Pneumonia' from conditions;",
        "SQL": "SELECT COUNT(DISTINCT T1.patient) FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE DESCRIPTION = 'Pneumonia' AND strftime('%Y', T1.birthdate) LIKE '192%'",
        "difficulty": "simple"
    },
    {
        "question_id": 822,
        "prev_question_id": 6702,
        "db_id": "retails",
        "question": "What is the percentage of the European countries among the given countries?",
        "evidence": "DIVIDE(COUNT(n_name where r_name = 'EUROPE'), COUNT(n_name)) as percentage;",
        "SQL": "SELECT CAST(SUM(IIF(T2.r_name = 'EUROPE', 1, 0)) AS REAL) * 100 / COUNT(T1.n_name) FROM nation AS T1 INNER JOIN region AS T2 ON T1.n_regionkey = T2.r_regionkey",
        "difficulty": "simple"
    },
    {
        "question_id": 823,
        "prev_question_id": 3384,
        "db_id": "video_games",
        "question": "How many games were published by Acclaim Entertainment?",
        "evidence": "published by Acclaim Entertainment refers to publisher_name = 'Acclaim Entertainment'",
        "SQL": "SELECT COUNT(DISTINCT T1.game_id) FROM game_publisher AS T1 INNER JOIN publisher AS T2 ON T1.publisher_id = T2.id WHERE T2.publisher_name = 'Acclaim Entertainment'",
        "difficulty": "simple"
    },
    {
        "question_id": 824,
        "prev_question_id": 8625,
        "db_id": "chicago_crime",
        "question": "How many arrests were made in 2018 in an animal hospital under FBI code 08B?",
        "evidence": "arrest refers to arrest = 'TRUE'; in 2018 refers to date LIKE '%2018%'; in an animal hospital refers to location_description = 'ANIMAL HOSPITAL'; FBI code 08B refers to fbi_code_no = '08B'",
        "SQL": "SELECT SUM(CASE WHEN arrest = 'TRUE' THEN 1 ELSE 0 END) FROM Crime WHERE date LIKE '%2018%' AND location_description = 'ANIMAL HOSPITAL' AND fbi_code_no = '08B'",
        "difficulty": "simple"
    },
    {
        "question_id": 825,
        "prev_question_id": 6324,
        "db_id": "retail_world",
        "question": "Please list the names of all the products whose supplier is in Japan.",
        "evidence": "names of the products refers to ProductName; Japan refers to Country = 'Japan';",
        "SQL": "SELECT T1.ProductName FROM Products AS T1 INNER JOIN Suppliers AS T2 ON T1.SupplierID = T2.SupplierID WHERE T2.Country = 'Japan'",
        "difficulty": "simple"
    },
    {
        "question_id": 826,
        "prev_question_id": 2506,
        "db_id": "genes",
        "question": "What type of interactions occurs in genes whose function is cellular transport and transport medicine and are classified as non-essential?",
        "evidence": "",
        "SQL": "SELECT T2.Type FROM Genes AS T1 INNER JOIN Interactions AS T2 ON T1.GeneID = T2.GeneID1 WHERE T1.Function = 'TRANSCRIPTION' AND T1.Essential = 'Non-Essential'",
        "difficulty": "simple"
    },
    {
        "question_id": 827,
        "prev_question_id": 7214,
        "db_id": "works_cycles",
        "question": "What is the name of the territory assigned to the sales person with business id \"277\"?",
        "evidence": "business id refers to BusinessEntityID",
        "SQL": "SELECT T2.Name FROM SalesPerson AS T1 INNER JOIN SalesTerritory AS T2 ON T1.TerritoryID = T2.TerritoryID WHERE T1.BusinessEntityID = 277",
        "difficulty": "simple"
    },
    {
        "question_id": 828,
        "prev_question_id": 8315,
        "db_id": "mondial_geo",
        "question": "Among the countries that use Bosnian as their language, how many of them don't have a positive population growth rate?",
        "evidence": "",
        "SQL": "SELECT COUNT(DISTINCT T1.Name) FROM country AS T1 INNER JOIN language AS T2 ON T1.Code = T2.Country INNER JOIN population AS T3 ON T3.Country = T2.Country WHERE T2.Name = 'Bosnian' AND T3.Population_Growth < 0",
        "difficulty": "simple"
    },
    {
        "question_id": 829,
        "prev_question_id": 4173,
        "db_id": "simpson_episodes",
        "question": "How many stars on average does the episode Lost Verizon have?",
        "evidence": "\"Lost Verizon\" is the title of episode; stars on average = Divide( Sum (Multiply (votes, stars)), Sum(votes))",
        "SQL": "SELECT CAST(SUM(T2.votes * T2.stars) AS REAL) / SUM(T2.votes) FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T1.title = 'Lost Verizon';",
        "difficulty": "simple"
    },
    {
        "question_id": 830,
        "prev_question_id": 7664,
        "db_id": "hockey",
        "question": "Please list the awards won by coaches who taught the NHL League and have already died.",
        "evidence": "have already died refers to deathYear IS NOT NULL; NHL league refers to lgID = 'NHL'",
        "SQL": "SELECT DISTINCT T2.award FROM Master AS T1 INNER JOIN AwardsCoaches AS T2 ON T1.coachID = T2.coachID WHERE T1.deathYear IS NOT NULL AND T2.lgID = 'NHL'",
        "difficulty": "simple"
    },
    {
        "question_id": 831,
        "prev_question_id": 1496,
        "db_id": "synthea",
        "question": "What condition forced Mrs. Joye Homenick to seek medical attention in 2017?",
        "evidence": "condition refers to conditions.DESCRIPTION; in 2017 refers to substr(conditions.START, 1, 4) = '2017';",
        "SQL": "SELECT T2.DESCRIPTION FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Joye' AND T1.last = 'Homenick' AND strftime('%Y', T2.START) = '2017'",
        "difficulty": "simple"
    },
    {
        "question_id": 832,
        "prev_question_id": 3324,
        "db_id": "video_games",
        "question": "List the genre id of the game Pro Evolution Soccer 2012.",
        "evidence": "Pro Evolution Soccer 2012 refers to game_name = 'Pro Evolution Soccer 2012'",
        "SQL": "SELECT T.genre_id FROM game AS T WHERE T.game_name = 'Pro Evolution Soccer 2012'",
        "difficulty": "simple"
    },
    {
        "question_id": 833,
        "prev_question_id": 4263,
        "db_id": "simpson_episodes",
        "question": "How much more votes for episode 1 than for episode 5?",
        "evidence": "more votes refers to SUBTRACT(SUM(votes when episode = 1), SUM(votes when episode = 5))",
        "SQL": "SELECT SUM(CASE WHEN T1.episode = 1 THEN T2.votes ELSE 0 END) - SUM(CASE WHEN T1.episode = 5 THEN T2.votes ELSE 0 END) AS diff FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id;",
        "difficulty": "simple"
    },
    {
        "question_id": 834,
        "prev_question_id": 5438,
        "db_id": "sales",
        "question": "What is the price and name of the product bought by Erica Xu?",
        "evidence": "",
        "SQL": "SELECT T3.Price, T3.Name FROM Sales AS T1 INNER JOIN Customers AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN Products AS T3 ON T1.ProductID = T3.ProductID WHERE T2.FirstName = 'Erica' AND T2.LastName = 'Xu'",
        "difficulty": "simple"
    },
    {
        "question_id": 835,
        "prev_question_id": 8540,
        "db_id": "software_company",
        "question": "List the occupation and income of male customers with an level of education of 4 to 6.",
        "evidence": "male customers with an level of education of 4 to 6 refer to SEX = 'Male' where EDUCATIONNUM BETWEEN 4 AND 6; income refers to INCOME_K;",
        "SQL": "SELECT T1.OCCUPATION, T2.INCOME_K FROM Customers AS T1 INNER JOIN Demog AS T2 ON T1.GEOID = T2.GEOID WHERE T1.EDUCATIONNUM >= 4 AND T1.EDUCATIONNUM <= 6 AND T1.SEX = 'Male'",
        "difficulty": "simple"
    },
    {
        "question_id": 836,
        "prev_question_id": 5065,
        "db_id": "olympics",
        "question": "List the names of the games held in Paris.",
        "evidence": "Paris refers to city_name = 'Paris'; names of games refers to games_name;",
        "SQL": "SELECT T3.games_name FROM games_city AS T1 INNER JOIN city AS T2 ON T1.city_id = T2.id INNER JOIN games AS T3 ON T1.games_id = T3.id WHERE T2.city_name = 'Paris'",
        "difficulty": "simple"
    },
    {
        "question_id": 837,
        "prev_question_id": 6061,
        "db_id": "books",
        "question": "Who is the author of First Things First?",
        "evidence": "\"First Things First\" is the title of the book; author refers to author_name",
        "SQL": "SELECT T3.author_name FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id WHERE T1.title = 'First Things First'",
        "difficulty": "simple"
    },
    {
        "question_id": 838,
        "prev_question_id": 280,
        "db_id": "retail_complains",
        "question": "In the calls from the mountain division, how many are from teenage clients?",
        "evidence": "teenage refers to age BETWEEN 12 AND 20;",
        "SQL": "SELECT COUNT(T1.age) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.age BETWEEN 12 AND 20 AND T2.division = 'Mountain'",
        "difficulty": "simple"
    },
    {
        "question_id": 839,
        "prev_question_id": 2241,
        "db_id": "world_development_indicators",
        "question": "For the country that has notes on the indicator Inflation, consumer prices, in which region is it in?",
        "evidence": "indicator Inflation, consumer prices refers to IndicatorName = 'Inflation, consumer prices (annual %)'",
        "SQL": "SELECT T1.Region FROM Country AS T1 INNER JOIN CountryNotes AS T2 ON T1.CountryCode = T2.Countrycode INNER JOIN Series AS T3 ON T2.Seriescode = T3.SeriesCode WHERE T3.IndicatorName = 'Inflation, consumer prices (annual %)'",
        "difficulty": "simple"
    },
    {
        "question_id": 840,
        "prev_question_id": 914,
        "db_id": "cs_semester",
        "question": "List the research assistants' full names, capabilities and GPAs who were under the supervision of Merwyn Conkay.",
        "evidence": "research assistant refers to the student who serves for research where the abbreviation is RA; full names = f_name, l_name;",
        "SQL": "SELECT T3.f_name, T3.l_name, T2.capability, T3.gpa FROM prof AS T1 INNER JOIN RA AS T2 ON T1.prof_id = T2.prof_id INNER JOIN student AS T3 ON T2.student_id = T3.student_id WHERE T1.first_name = 'Merwyn' AND T1.last_name = 'Conkay'",
        "difficulty": "simple"
    },
    {
        "question_id": 841,
        "prev_question_id": 9122,
        "db_id": "movie_3",
        "question": "Please list the full names of all the actors that have starred in the film with the highest replacement cost.",
        "evidence": "highest replacement cost refers to Max (replacement_cost); full name refers to first_name, last_name",
        "SQL": "SELECT first_name, last_name FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id ORDER BY T3.replacement_cost DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 842,
        "prev_question_id": 5381,
        "db_id": "sales",
        "question": "What is the full name of customers who dealt with sales person with id 5?",
        "evidence": "full name = FirstName, MiddleInitial, LastName;",
        "SQL": "SELECT T1.FirstName, T1.MiddleInitial, T1.LastName FROM Customers AS T1 INNER JOIN Sales AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.SalesPersonID = 5",
        "difficulty": "simple"
    },
    {
        "question_id": 843,
        "prev_question_id": 7729,
        "db_id": "hockey",
        "question": "What is the position of the 9th oldest hockey player?",
        "evidence": "position refers to pos; date of birth refers to birthDay + birthMon + birthYear",
        "SQL": "SELECT pos FROM Master WHERE birthYear IS NOT NULL ORDER BY birthYear, birthMon, birthDay LIMIT 8",
        "difficulty": "simple"
    },
    {
        "question_id": 844,
        "prev_question_id": 9391,
        "db_id": "movie_3",
        "question": "List at least 5 customers who paid greater than $10. Provide the full name of the customers.",
        "evidence": "full name refers to first_name, last_name; greater than $10 refers to amount > 10",
        "SQL": "SELECT T2.first_name, T2.last_name FROM payment AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id WHERE T1.amount > 10",
        "difficulty": "simple"
    },
    {
        "question_id": 845,
        "prev_question_id": 4706,
        "db_id": "disney",
        "question": "Indicate the release date of the film The Lion King directed by Roger Allers.",
        "evidence": "The Lion King refers to movie_title = 'The Lion King'; Roger Allers refers to director = 'Roger Allers';",
        "SQL": "SELECT T1.release_date FROM characters AS T1 INNER JOIN director AS T2 ON T1.movie_title = T2.name WHERE T2.director = 'Roger Allers' AND T1.movie_title = 'The Lion King'",
        "difficulty": "simple"
    },
    {
        "question_id": 846,
        "prev_question_id": 7840,
        "db_id": "world",
        "question": "Among the countries that officially use the English language, what country has the highest capital?",
        "evidence": "officially use the English language refers to `Language` = 'English' AND IsOfficial = 'T'; highest capital refers to MAX(Capital);",
        "SQL": "SELECT T1.Code FROM Country AS T1 INNER JOIN CountryLanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = 'English' AND T2.IsOfficial = 'T' ORDER BY T1.Capital DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 847,
        "prev_question_id": 1893,
        "db_id": "soccer_2016",
        "question": "Among the matches, what percentage have a winning margin above 100?",
        "evidence": "winning margin above 100 refers to Win_Margin > 100; percentage = divide(count(Match_Id) when Win_Margin > 100, count(Match_Id)) as percentage",
        "SQL": "SELECT CAST(COUNT(CASE WHEN Win_Margin > 100 THEN 1 ELSE 0 END) AS REAL) * 100 / TOTAL(Match_Id) FROM `Match`",
        "difficulty": "simple"
    },
    {
        "question_id": 848,
        "prev_question_id": 8084,
        "db_id": "university",
        "question": "Among the universities in Australia, how many of them have a student staff ratio of over 15 in 2011?",
        "evidence": "in 2011 refers to year 2011; in Australia refers to country_name = 'Australia'; student staff ratio of over 15 refers to student_staff_ratio > 15",
        "SQL": "SELECT COUNT(*) FROM university AS T1 INNER JOIN university_year AS T2 ON T1.id = T2.university_id INNER JOIN country AS T3 ON T3.id = T1.country_id WHERE T3.country_name = 'Australia' AND T2.student_staff_ratio > 15 AND T2.year = 2011",
        "difficulty": "simple"
    },
    {
        "question_id": 849,
        "prev_question_id": 2832,
        "db_id": "professional_basketball",
        "question": "What is the average weight of the players who have won the award of Rookie of the year?",
        "evidence": "\"Rookie of the Year\" is the award; average weight = Divide (Sum(weight), Count(playerID))",
        "SQL": "SELECT AVG(T1.weight) FROM players AS T1 INNER JOIN awards_players AS T2 ON T1.playerID = T2.playerID WHERE T2.award = 'Rookie of the Year'",
        "difficulty": "simple"
    },
    {
        "question_id": 850,
        "prev_question_id": 4535,
        "db_id": "student_loan",
        "question": "Mention the status of payment of student 299.",
        "evidence": "status of payment is mentioned in no_payment_due; bool = 'pos' means the student has payment due; bool = 'neg' means the student has no payment due; student299 is a name of student;",
        "SQL": "SELECT bool FROM no_payment_due WHERE name = 'student299'",
        "difficulty": "simple"
    },
    {
        "question_id": 851,
        "prev_question_id": 9420,
        "db_id": "movie_3",
        "question": "What is the biggest amount of payment for a rental made by Mary Smith?",
        "evidence": "the biggest amount refers to max(amount)",
        "SQL": "SELECT T1.amount FROM payment AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = 'MARY' AND T2.last_name = 'SMITH' ORDER BY T1.amount DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 852,
        "prev_question_id": 1937,
        "db_id": "soccer_2016",
        "question": "Which team wins the toss during the match ID 336011, and can you tell me whether they decided to bat or field?",
        "evidence": "wins the toss refers to Toss_Winner; whether they decided to bat or field refers to Toss_Name",
        "SQL": "SELECT T2.Toss_Name, T1.Toss_Decide, T1.Toss_Winner FROM `Match` AS T1 INNER JOIN Toss_Decision AS T2 ON T1.Toss_Decide = T2.Toss_Id WHERE T1.Match_Id = '336011'",
        "difficulty": "simple"
    },
    {
        "question_id": 853,
        "prev_question_id": 2970,
        "db_id": "shakespeare",
        "question": "Give the abbreviation name for the character \"Earl of Westmoreland\".",
        "evidence": "abbreviation name refers to Abbrev; character \"Earl of Westmoreland\" refers to CharName = 'Earl of Westmoreland'",
        "SQL": "SELECT DISTINCT Abbrev FROM characters WHERE CharName = 'Earl of Westmoreland'",
        "difficulty": "simple"
    },
    {
        "question_id": 854,
        "prev_question_id": 490,
        "db_id": "movies_4",
        "question": "Provide the genre ID of the movie with the title of \"The Dark Knight\".",
        "evidence": "movie with the title of \"The Dark Knight\" refers to title = 'The Dark Knight'",
        "SQL": "SELECT T2.genre_id FROM movie AS T1 INNER JOIN movie_genres AS T2 ON T1.movie_id = T2.movie_id WHERE T1.title = 'The Dark Knight'",
        "difficulty": "simple"
    },
    {
        "question_id": 855,
        "prev_question_id": 5743,
        "db_id": "language_corpus",
        "question": "What proportion of a pair of words in the Catalan language have been repeated less than 80 times?",
        "evidence": "Pair is a relationship of two words: w1st and w2nd, where w1st is word id of the first word and w2nd is a word id of the second word; in the Catalan language refers to lid; repeated less than 80 times refers to occurrences < 80; DIVIDE(COUNT(lid where occurrences < 80), COUNT(lid)) as percentage;",
        "SQL": "SELECT CAST(COUNT(CASE WHEN occurrences < 80 THEN lid ELSE NULL END) AS REAL) * 100 / COUNT(lid) FROM biwords",
        "difficulty": "simple"
    },
    {
        "question_id": 856,
        "prev_question_id": 6945,
        "db_id": "ice_hockey_draft",
        "question": "Identify the players who weigh 120 kg.",
        "evidence": "players refers to PlayerName; weigh 120 kg refers to weight_in_kg = 120;",
        "SQL": "SELECT T2.PlayerName FROM weight_info AS T1 INNER JOIN PlayerInfo AS T2 ON T1.weight_id = T2.weight WHERE T1.weight_in_kg = 120",
        "difficulty": "simple"
    },
    {
        "question_id": 857,
        "prev_question_id": 6143,
        "db_id": "food_inspection_2",
        "question": "How many inspections with critical food safety problems are under inspection point id 3?",
        "evidence": "critical food safety problems refers to fine = 500; point_id = 3",
        "SQL": "SELECT COUNT(inspection_id) FROM violation WHERE point_id = 3 AND fine = 500",
        "difficulty": "simple"
    },
    {
        "question_id": 858,
        "prev_question_id": 7275,
        "db_id": "works_cycles",
        "question": "How many salespersons haven't met quota?",
        "evidence": "salesperson that haven't met the quota refers to Bonus = 0;",
        "SQL": "SELECT COUNT(BusinessEntityID) FROM SalesPerson WHERE Bonus = 0",
        "difficulty": "simple"
    },
    {
        "question_id": 859,
        "prev_question_id": 4294,
        "db_id": "simpson_episodes",
        "question": "What is the credited cast for the episode \"In the Name of the Grandfather\"?",
        "evidence": "credited cast refers to category = 'Cast' and\u00a0 credited = 'true'; episode \"In the Name of the Grandfather\" refers to title = 'In the Name of the Grandfather'",
        "SQL": "SELECT DISTINCT T2.person FROM Episode AS T1 INNER JOIN Credit AS T2 ON T1.episode_id = T2.episode_id WHERE T1.title = 'In the Name of the Grandfather' AND T2.category = 'Cast' AND T2.credited = 'true';",
        "difficulty": "simple"
    },
    {
        "question_id": 860,
        "prev_question_id": 7107,
        "db_id": "works_cycles",
        "question": "What is the name of the supplier number 1492?",
        "evidence": "supplier number 1492 refers to BusinessEntityId = 1492; name of the supplier = name from vendor",
        "SQL": "SELECT NAME FROM Vendor WHERE BusinessEntityID = 1492",
        "difficulty": "simple"
    },
    {
        "question_id": 861,
        "prev_question_id": 8330,
        "db_id": "mondial_geo",
        "question": "State the name of the lake in Albania province and in which city does it located at.",
        "evidence": "",
        "SQL": "SELECT Lake, City FROM located WHERE Province = 'Albania' AND Lake IS NOT NULL",
        "difficulty": "simple"
    },
    {
        "question_id": 862,
        "prev_question_id": 3978,
        "db_id": "public_review_platform",
        "question": "Calculate the percentage of business with attribute name of \"Accepts Credit Cards\".",
        "evidence": "percentage refers to DIVIDE(COUNT(attribute_name = 'Accepts Credit Cards'), COUNT(business_id))*100%",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.attribute_name = 'Accepts Credit Cards' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.attribute_name) FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id",
        "difficulty": "simple"
    },
    {
        "question_id": 863,
        "prev_question_id": 1876,
        "db_id": "soccer_2016",
        "question": "List down the match ID of matches that the \"man of the match\" award was given to BB McCullum.",
        "evidence": "",
        "SQL": "SELECT T1.Match_Id FROM Match AS T1 INNER JOIN Player AS T2 ON T2.Player_Id = T1.Man_of_the_Match WHERE T2.Player_Name = 'BB McCullum'",
        "difficulty": "simple"
    },
    {
        "question_id": 864,
        "prev_question_id": 5242,
        "db_id": "beer_factory",
        "question": "Please list the brands of all the root beer that Frank-Paul Santangelo had purchased on 2014/7/7.",
        "evidence": "brands of the root beer refers to BrandName; purchased on 2014/7/7 refers to transactiondate = '2014-07-07';",
        "SQL": "SELECT DISTINCT T4.BrandName FROM customers AS T1 INNER JOIN `transaction` AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN rootbeer AS T3 ON T2.RootBeerID = T3.RootBeerID INNER JOIN rootbeerbrand AS T4 ON T3.BrandID = T4.BrandID WHERE T1.First = 'Frank-Paul' AND T1.Last = 'Santangelo' AND T2.TransactionDate = '2014-07-07'",
        "difficulty": "simple"
    },
    {
        "question_id": 865,
        "prev_question_id": 8602,
        "db_id": "chicago_crime",
        "question": "What is the fax number for the district with the most number of crimes in January, 2018?",
        "evidence": "fax number refers to fax; the most number of crimes refers to max(count(case_number)); in January 2018 refers to date like '%1/2018%'",
        "SQL": "SELECT T1.fax FROM District AS T1 INNER JOIN Crime AS T2 ON T1.district_no = T2.district_no WHERE T2.date LIKE '%1/2018%' GROUP BY T2.district_no ORDER BY COUNT(case_number) DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 866,
        "prev_question_id": 1419,
        "db_id": "synthea",
        "question": "Provide the number of encounters for Major D'Amore.",
        "evidence": "",
        "SQL": "SELECT COUNT(T2.ID) FROM patients AS T1 INNER JOIN encounters AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Major' AND T1.last = 'D''Amore'",
        "difficulty": "simple"
    },
    {
        "question_id": 867,
        "prev_question_id": 2008,
        "db_id": "soccer_2016",
        "question": "List the names of players who play by the left hand.",
        "evidence": "play by the left hand refers to Batting_hand = \u00a0 'Left-hand bat'",
        "SQL": "SELECT T1.Player_Name FROM Player AS T1 INNER JOIN Batting_Style AS T2 ON T1.Batting_hand = T2.Batting_Id WHERE T2.Batting_hand = 'Left-hand bat'",
        "difficulty": "simple"
    },
    {
        "question_id": 868,
        "prev_question_id": 3512,
        "db_id": "authors",
        "question": "What is the url of the journal in which the paper \"Area Effects in Cepaea\" was published?",
        "evidence": "url refers to HomePage; 'Area Effects in Cepaea' is the Title of paper",
        "SQL": "SELECT T1.HomePage FROM Journal AS T1 INNER JOIN Paper AS T2 ON T1.Id = T2.JournalId WHERE T2.Title = 'Area Effects in Cepaea'",
        "difficulty": "simple"
    },
    {
        "question_id": 869,
        "prev_question_id": 2805,
        "db_id": "professional_basketball",
        "question": "Which are the teams coached by 'adelmri01' from year 1990-1995. List the team name, year and offense point.",
        "evidence": "year 1990-1995 refers to year between 1990 and 1995; 'adelmri01' is the coachID; offense point refers to o_fgm",
        "SQL": "SELECT T2.name, T1.year, T2.o_pts FROM coaches AS T1 INNER JOIN teams AS T2 ON T1.tmID = T2.tmID AND T1.year = T2.year WHERE T1.year BETWEEN 1990 AND 1995 AND T1.coachID = 'adelmri01'",
        "difficulty": "simple"
    },
    {
        "question_id": 870,
        "prev_question_id": 4438,
        "db_id": "student_loan",
        "question": "Mention the name of unemployed students who have never been absent from school.",
        "evidence": "have never been absent from school refers to month = 0",
        "SQL": "SELECT T1.name FROM longest_absense_from_school AS T1 INNER JOIN unemployed AS T2 ON T1.name = T2.name WHERE T1.month = 0",
        "difficulty": "simple"
    },
    {
        "question_id": 871,
        "prev_question_id": 3648,
        "db_id": "authors",
        "question": "Who are the authors of the paper \"Determination of Planetary Meteorology from Aerobot Flight Sensors\"?",
        "evidence": "'Determination of Planetary Meteorology from Aerobot Flight Sensors' refer to title of the paper",
        "SQL": "SELECT T2.Name FROM Paper AS T1 INNER JOIN PaperAuthor AS T2 ON T1.Id = T2.PaperId WHERE T1.Title = 'Determination of Planetary Meteorology FROM Aerobot Flight Sensors'",
        "difficulty": "simple"
    },
    {
        "question_id": 872,
        "prev_question_id": 4545,
        "db_id": "student_loan",
        "question": "Among all students, calculate the percentage of male students.",
        "evidence": "percentage = MULTIPLY(DIVIDE(COUNT(male.name), COUNT(person.name)), 100); male students are mentioned in male.name;",
        "SQL": "SELECT CAST(COUNT(T2.name) AS REAL) * 100 / COUNT(T1.name) FROM person AS T1 LEFT JOIN male AS T2 ON T1.name = T2.name",
        "difficulty": "simple"
    },
    {
        "question_id": 873,
        "prev_question_id": 5427,
        "db_id": "sales",
        "question": "How many of the employees have the last name \"Ringer\" ?",
        "evidence": "",
        "SQL": "SELECT COUNT(LastName) FROM Employees WHERE LastName = 'Ringer'",
        "difficulty": "simple"
    },
    {
        "question_id": 874,
        "prev_question_id": 5429,
        "db_id": "sales",
        "question": "Give the product's name brought by Aaron Alexander.",
        "evidence": "",
        "SQL": "SELECT DISTINCT T1.Name FROM Products AS T1 INNER JOIN Sales AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Customers AS T3 ON T2.CustomerID = T3.CustomerID WHERE T3.FirstName = 'Aaron' AND T3.LastName = 'Alexander'",
        "difficulty": "simple"
    },
    {
        "question_id": 875,
        "prev_question_id": 8445,
        "db_id": "mondial_geo",
        "question": "What nations are considered British Overseas Territories?",
        "evidence": "British Overseas Territories is one government form; Nation and country share the same meaning",
        "SQL": "SELECT name FROM country WHERE CODE IN ( SELECT country FROM politics WHERE government = 'British Overseas Territories' )",
        "difficulty": "simple"
    },
    {
        "question_id": 876,
        "prev_question_id": 7436,
        "db_id": "works_cycles",
        "question": "List all products with the color yellow.",
        "evidence": "",
        "SQL": "SELECT ProductID FROM Product WHERE Color = 'Yellow'",
        "difficulty": "simple"
    },
    {
        "question_id": 877,
        "prev_question_id": 5823,
        "db_id": "airline",
        "question": "Please list the dates of the flights that were cancelled due to the most serious reason.",
        "evidence": "dates of the flights refers to FL_DATE; cancelled refers to CANCELLED = 1; most serious reason refers to CANCELLATION_CODE = 'A';",
        "SQL": "SELECT FL_DATE FROM Airlines WHERE CANCELLATION_CODE = 'A' GROUP BY FL_DATE",
        "difficulty": "simple"
    },
    {
        "question_id": 878,
        "prev_question_id": 2864,
        "db_id": "professional_basketball",
        "question": "Among the players who have passed away, who had the most award?",
        "evidence": "pass away refers to deathDate ! = 'null'; most award refers to playerID where Max(Count(award))",
        "SQL": "SELECT T1.playerID FROM players AS T1 INNER JOIN awards_players AS T2 ON T1.playerID = T2.playerID WHERE deathDate IS NOT NULL GROUP BY T1.playerID ORDER BY COUNT(award) DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 879,
        "prev_question_id": 4639,
        "db_id": "disney",
        "question": "Who is the hero character of the movie whose total gross was $222,527,828?",
        "evidence": "FALSE;",
        "SQL": "SELECT T1.hero FROM characters AS T1 INNER JOIN movies_total_gross AS T2 ON T2.movie_title = T1.movie_title WHERE T2.total_gross = '$222,527,828'",
        "difficulty": "simple"
    },
    {
        "question_id": 880,
        "prev_question_id": 4429,
        "db_id": "student_loan",
        "question": "How many unemployed students are enlisted in the navy organization?",
        "evidence": "enlisted in the navy organization refers to organ = 'navy';",
        "SQL": "SELECT COUNT(T1.name) FROM unemployed AS T1 INNER JOIN enlist AS T2 ON T1.name = T2.name WHERE T2.organ = 'navy'",
        "difficulty": "simple"
    },
    {
        "question_id": 881,
        "prev_question_id": 6978,
        "db_id": "ice_hockey_draft",
        "question": "Who has played the most game plays in the 2000-2001 season of the International league?",
        "evidence": "played the most game plays refers to MAX(GP); 2000-2001 season refers to SEASON = '2000-2001'; International league refers to LEAGUE = 'International';",
        "SQL": "SELECT DISTINCT T2.PlayerName FROM SeasonStatus AS T1 INNER JOIN PlayerInfo AS T2 ON T1.ELITEID = T2.ELITEID WHERE T1.SEASON = '2000-2001' AND T1.LEAGUE = 'International' ORDER BY T1.GP DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 882,
        "prev_question_id": 3607,
        "db_id": "authors",
        "question": "How many authors is affiliated to the organization \"Otterbein University\"?",
        "evidence": "Otterbein University is an Affiliation",
        "SQL": "SELECT COUNT(Name) FROM Author WHERE Affiliation = 'Otterbein University'",
        "difficulty": "simple"
    },
    {
        "question_id": 883,
        "prev_question_id": 996,
        "db_id": "computer_student",
        "question": "What is the level of the course with the most number of teachers?",
        "evidence": "level of the course refers to courseLevel; course with most number of teachers refers to course_id = max(count(taughtBy.p_id))",
        "SQL": "SELECT T1.courseLevel FROM course AS T1 INNER JOIN taughtBy AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id ORDER BY COUNT(T2.p_id) DESC LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 884,
        "prev_question_id": 3476,
        "db_id": "video_games",
        "question": "List down the names of the games in the racing genre.",
        "evidence": "name of games refers to game_name; racing genre refers to genre_name = 'Racing';",
        "SQL": "SELECT T1.game_name FROM game AS T1 INNER JOIN genre AS T2 ON T1.genre_id = T2.id WHERE T2.genre_name = 'Racing'",
        "difficulty": "simple"
    },
    {
        "question_id": 885,
        "prev_question_id": 5972,
        "db_id": "books",
        "question": "In books authored by Abraham Lincoln, what is the percentage of the books published in 1992?",
        "evidence": "\"Abraham Lincoln\" is the author_name; published in 1992 refers to publication_date LIKE '1992%'; percentage = Divide (Sum(publication_date LIKE '1992%'), Count(publication_date)) * 100",
        "SQL": "SELECT CAST(SUM(CASE WHEN STRFTIME('%Y', T1.publication_date) = '1992' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id WHERE T3.author_name = 'Abraham Lincoln'",
        "difficulty": "simple"
    },
    {
        "question_id": 886,
        "prev_question_id": 698,
        "db_id": "trains",
        "question": "Please list the IDs of all the cars with double sides on trains that run in the west direction.",
        "evidence": "double sides on trains refers to sides = 'double'",
        "SQL": "SELECT T1.id FROM cars AS T1 INNER JOIN trains AS T2 ON T1.train_id = T2.id WHERE T2.direction = 'east' AND T1.sides = 'double'",
        "difficulty": "simple"
    },
    {
        "question_id": 887,
        "prev_question_id": 3495,
        "db_id": "video_games",
        "question": "In which region where a game had the lowest number of sales?",
        "evidence": "which region refers to region_name; lowest number of sales refers to MIN(num_sales);",
        "SQL": "SELECT DISTINCT T1.region_name FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id ORDER BY T2.num_sales LIMIT 1",
        "difficulty": "simple"
    },
    {
        "question_id": 888,
        "prev_question_id": 7279,
        "db_id": "works_cycles",
        "question": "How many products are out of stock?",
        "evidence": "out of stock product refers to OnOrderQty = 0;",
        "SQL": "SELECT COUNT(ProductID) FROM ProductVendor WHERE OnOrderQty = 0",
        "difficulty": "simple"
    },
    {
        "question_id": 889,
        "prev_question_id": 4078,
        "db_id": "public_review_platform",
        "question": "Describe ID and active status of the business under category of \"Diagnostic Imaging\".",
        "evidence": "ID refers to business_id; category of \"Diagnostic Imaging\" refers to category_name = 'Diagnostic Imaging';",
        "SQL": "SELECT T2.business_id, T3.active FROM Categories AS T1 INNER JOIN Business_Categories AS T2 ON T1.category_id = T2.category_id INNER JOIN Business AS T3 ON T2.business_id = T3.business_id WHERE T1.category_name = 'Diagnostic Imaging'",
        "difficulty": "moderate"
    },
    {
        "question_id": 890,
        "prev_question_id": 5530,
        "db_id": "menu",
        "question": "Tally the dishes that have appeared on the menu for more than 100 years.",
        "evidence": "appeared on the menu for more than 100 years = SUBTRACT(last_appeared, first_appeared) > 100;",
        "SQL": "SELECT T1.name FROM Dish AS T1 INNER JOIN MenuItem AS T2 ON T1.id = T2.dish_id WHERE T1.last_appeared - T1.first_appeared > 100",
        "difficulty": "moderate"
    },
    {
        "question_id": 891,
        "prev_question_id": 2984,
        "db_id": "shakespeare",
        "question": "Gives the average number of chapters in Shakespeare's 1599 work.",
        "evidence": "1599 work refers to Date = '1599'; average number refers to divide(count(chapters.id), count(works.id))",
        "SQL": "SELECT CAST(COUNT(T1.id) AS REAL) / COUNT(DISTINCT T2.id) FROM chapters AS T1 INNER JOIN works AS T2 ON T1.work_id = T2.id WHERE T2.Date = '1599'",
        "difficulty": "moderate"
    },
    {
        "question_id": 892,
        "prev_question_id": 1378,
        "db_id": "synthea",
        "question": "Give the procedure description of Ms. Jacquelyn Shanahan on 2009/8/9.",
        "evidence": "on 2009/8/9 refers to DATE = '2009-08-09';",
        "SQL": "SELECT DISTINCT T2.description FROM patients AS T1 INNER JOIN procedures AS T2 ON T1.patient = T2.PATIENT WHERE T1.prefix = 'Ms.' AND T1.first = 'Jacquelyn' AND T1.last = 'Shanahan' AND T2.DATE = '2009-08-09'",
        "difficulty": "moderate"
    },
    {
        "question_id": 893,
        "prev_question_id": 253,
        "db_id": "retail_complains",
        "question": "How many complaints on credit cards in the year 2016 were filed by male clients?",
        "evidence": "credit cards refers to Product = 'Credit card'; 2016 refers to year(Date received) = 2016; male refers to sex = 'Male';",
        "SQL": "SELECT COUNT(T1.sex) FROM client AS T1 INNER JOIN events AS T2 ON T1.client_id = T2.Client_ID WHERE strftime('%Y', T2.`Date received`) = '2016' AND T1.sex = 'Male' AND T2.Product = 'Credit card'",
        "difficulty": "moderate"
    },
    {
        "question_id": 894,
        "prev_question_id": 1890,
        "db_id": "soccer_2016",
        "question": "Give the player id of the player who was at the non-striker end for the most number of balls in the match 501219.",
        "evidence": "most number of balls refers to max(Ball_Id); match 501219 refers to Match_Id = 501219;\nplayer id also refers to non_striker or ball_id",
        "SQL": "SELECT Ball_Id FROM Ball_by_Ball WHERE Non_Striker = Ball_Id ORDER BY Ball_Id DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 895,
        "prev_question_id": 4051,
        "db_id": "public_review_platform",
        "question": "Which user has done the most review on a business attributed to delivery?",
        "evidence": "the most reviews refer to MAX(business_id) where attribute_name = 'Delivery';",
        "SQL": "SELECT T3.user_id FROM Attributes AS T1 INNER JOIN Business_Attributes AS T2 ON T1.attribute_id = T2.attribute_id INNER JOIN Reviews AS T3 ON T2.business_id = T3.business_id WHERE T1.attribute_name = 'Delivery' GROUP BY T3.user_id ORDER BY COUNT(T2.business_id) DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 896,
        "prev_question_id": 1230,
        "db_id": "talkingdata",
        "question": "When did event number 7 happen for user number -8022267440849930000?",
        "evidence": "event number refers to event_id; event_id = 7; user number refers to app_id; app_id = -8022267440849930000;",
        "SQL": "SELECT T1.timestamp FROM events_relevant AS T1 INNER JOIN app_events AS T2 ON T1.event_id = T2.event_id WHERE T2.app_id = -8022267440849930000 AND T1.event_id = 7",
        "difficulty": "moderate"
    },
    {
        "question_id": 897,
        "prev_question_id": 8646,
        "db_id": "chicago_crime",
        "question": "How many crimes were handled by Brendan Reilly on 7th October 2018?",
        "evidence": "7th October 2018 refers to date like '10/7/2018%'",
        "SQL": "SELECT SUM(CASE WHEN T2.alderman_last_name = 'Reilly' THEN 1 ELSE 0 END) FROM Crime AS T1 INNER JOIN Ward AS T2 ON T1.ward_no = T2.ward_no WHERE T2.alderman_name_suffix IS NULL AND T2.alderman_first_name = 'Brendan' AND date LIKE '10/7/2018%'",
        "difficulty": "moderate"
    },
    {
        "question_id": 898,
        "prev_question_id": 1399,
        "db_id": "synthea",
        "question": "How many patients have the most prevalent conditions?",
        "evidence": "the most prevalent conditions refer to MAX(PREVALENCE RATE);",
        "SQL": "SELECT COUNT(DISTINCT T2.patient) FROM all_prevalences AS T1 INNER JOIN conditions AS T2 ON lower(T1.ITEM) = lower(T2.DESCRIPTION) ORDER BY T1.\"PREVALENCE RATE\" DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 899,
        "prev_question_id": 6257,
        "db_id": "coinmarketcap",
        "question": "What was the price of 1 Bitcoin in 2016?",
        "evidence": "2016 refers to historical date where year(date) = 2016",
        "SQL": "SELECT AVG(T2.price) FROM coins AS T1 INNER JOIN historical AS T2 ON T1.id = T2.coin_id WHERE T1.name = 'Bitcoin' AND STRFTIME('%Y', T2.date) = '2016'",
        "difficulty": "moderate"
    },
    {
        "question_id": 900,
        "prev_question_id": 4492,
        "db_id": "student_loan",
        "question": "Among the students with disabilities, list any five students' names who are unemployed.",
        "evidence": "students with disabilities who are unemployed refers to disabled.name who are IN unemployed.name;",
        "SQL": "SELECT T1.name FROM disabled AS T1 INNER JOIN unemployed AS T2 ON T2.name = T1.name LIMIT 5",
        "difficulty": "moderate"
    },
    {
        "question_id": 901,
        "prev_question_id": 7773,
        "db_id": "hockey",
        "question": "Among the coaches who taught the teams in 1922's Stanley Cup finals, how many of them are from the USA?",
        "evidence": "from the USA refers to birthCountry = 'USA'; year = 1922;",
        "SQL": "SELECT COUNT(DISTINCT T3.coachID) FROM Coaches AS T1 INNER JOIN TeamsSC AS T2 ON T1.year = T2.year AND T1.tmID = T2.tmID INNER JOIN Master AS T3 ON T1.coachID = T3.coachID WHERE T2.year = 1922 AND T3.birthCountry = 'USA'",
        "difficulty": "moderate"
    },
    {
        "question_id": 902,
        "prev_question_id": 1523,
        "db_id": "synthea",
        "question": "List the patient ids whose disease has the most occurrences.",
        "evidence": "patient ids refers to patients.patient; disease with the most occurrence refers to MAX(all_prevalences.OCCURENCES);",
        "SQL": "SELECT T1.patient FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT INNER JOIN all_prevalences AS T3 ON T3.ITEM = T2.DESCRIPTION ORDER BY T3.OCCURRENCES DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 903,
        "prev_question_id": 2416,
        "db_id": "superstore",
        "question": "What is the ratio between customers who live in Texas and customers who live in Indiana?",
        "evidence": "live in Texas refers to State = 'Texas'; live in Indiana refers to State = 'Indiana'; Ratio = divide(sum(State = 'Texas'), sum(State = 'Indiana'))",
        "SQL": "SELECT CAST(SUM(CASE  WHEN State = 'Texas' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE  WHEN State = 'Indiana' THEN 1 ELSE 0 END) FROM people",
        "difficulty": "moderate"
    },
    {
        "question_id": 904,
        "prev_question_id": 4254,
        "db_id": "simpson_episodes",
        "question": "Among episodes from 10 to 20, which episode has more than 200 votes?",
        "evidence": "episodes from 10 to 20 refers to episode BETWEEN 10 and 20; more than 200 votes refers to COUNT(votes) > 200",
        "SQL": "SELECT DISTINCT T1.episode FROM Episode AS T1 INNER JOIN Vote AS T2 ON T2.episode_id = T1.episode_id WHERE T1.episode BETWEEN 10 AND 20 AND T2.votes > 200;",
        "difficulty": "moderate"
    },
    {
        "question_id": 905,
        "prev_question_id": 9190,
        "db_id": "movie_3",
        "question": "What is the rental price per day of the most expensive children's film?",
        "evidence": "children's film refers to name = 'Children'; average price per day of most expensive film = Max(Divide(rental_rate, rental_duration))",
        "SQL": "SELECT T1.rental_rate FROM film AS T1 INNER JOIN film_category AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T2.category_id = T3.category_id WHERE T3.name = 'Children' ORDER BY T1.rental_rate / T1.rental_duration DESC LIMIT 1",
        "difficulty": "moderate"
    },
    {
        "question_id": 906,
        "prev_question_id": 7378,
        "db_id": "works_cycles",
        "question": "How many person have a projected yearly sales of no more than 50,000?",
        "evidence": "projected yearly sales refers to SalesQuota; SalesQuota< = 50000;",
        "SQL": "SELECT COUNT(BusinessEntityID) FROM SalesPersonQuotaHistory WHERE SalesQuota < 500000",
        "difficulty": "moderate"
    },
    {
        "question_id": 907,
        "prev_question_id": 7432,
        "db_id": "works_cycles",
        "question": "What is the average pay rate of the employees who worked in the Engineering Departmentin 2007?",
        "evidence": "average pay rate = AVG(Rate); work in 2007 refers to year(StartDate)<2007 AND year(EndDate)>2007;",
        "SQL": "SELECT AVG(T3.Rate) FROM EmployeeDepartmentHistory AS T1 INNER JOIN Department AS T2 ON T1.DepartmentID = T2.DepartmentID INNER JOIN EmployeePayHistory AS T3 ON T1.BusinessEntityID = T3.BusinessEntityID WHERE T2.Name = 'Engineering' AND STRFTIME('%Y', EndDate) > '2007' AND STRFTIME('%Y', T1.StartDate) < '2007'",
        "difficulty": "moderate"
    },
    {
        "question_id": 908,
        "prev_question_id": 3985,
        "db_id": "public_review_platform",
        "question": "Among highest quality user of under ID 100, mention compliment type which got highest compliment number and user's followers.",
        "evidence": "highest quality user refers to number_of_compliments = 'Uber'; user of under ID 100 refers to user_id < 100 ;",
        "SQL": "SELECT T1.compliment_type, T3.user_fans FROM Compliments AS T1 INNER JOIN Users_Compliments AS T2 ON T1.compliment_id = T2.compliment_id INNER JOIN Users AS T3 ON T2.user_id = T3.user_id WHERE T2.number_of_compliments = 'Uber' AND T2.user_id < 100",
        "difficulty": "moderate"
    },
    {
        "question_id": 909,
        "prev_question_id": 1450,
        "db_id": "synthea",
        "question": "How many patients with a body weight of more than 100 kg have a 'diabetes self-management plan' care plan?",
        "evidence": "body weight of more than 100 kg refers to observations.DESCRIPTION = 'Body Weight' AND observations.VALUE > 100 AND observations.UNITS = 'kg'; diabetes self-management plan refers to careplans.DESCRIPTION = 'Diabetes self management plan';",
        "SQL": "SELECT COUNT(DISTINCT T2.patient) FROM careplans AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient INNER JOIN observations AS T3 ON T2.patient = T3.PATIENT WHERE T3.DESCRIPTION = 'Body Weight' AND T1.DESCRIPTION = 'Diabetes self management plan' AND T3.VALUE > 100 AND T3.UNITS = 'kg'",
        "difficulty": "moderate"
    },
    {
        "question_id": 910,
        "prev_question_id": 7197,
        "db_id": "works_cycles",
        "question": "How many employees do not have any suffix and what are their organization level?",
        "evidence": "Do not have any suffix means Suffix is null",
        "SQL": "SELECT COUNT(T3.BusinessEntityID) FROM ( SELECT T1.BusinessEntityID FROM Employee AS T1 INNER JOIN Person AS T2 USING (BusinessEntityID) WHERE T2.Suffix IS NULL GROUP BY T1.BusinessEntityID ) AS T3",
        "difficulty": "moderate"
    },
    {
        "question_id": 911,
        "prev_question_id": 6837,
        "db_id": "retails",
        "question": "What proportion of suppliers are from Asia?",
        "evidence": "Asia refers to r_name = 'ASIA'; proportion = divide(count(s_name where r_name = 'ASIA'), count(s_name)) * 100%",
        "SQL": "SELECT CAST(SUM(IIF(T1.r_name = 'ASIA', 1, 0)) AS REAL) * 100 / COUNT(T1.r_regionkey) FROM region AS T1 INNER JOIN nation AS T2 ON T1.r_regionkey = T2.n_regionkey INNER JOIN supplier AS T3 ON T2.n_nationkey = T3.s_nationkey",
        "difficulty": "challenging"
    },
    {
        "question_id": 912,
        "prev_question_id": 3543,
        "db_id": "authors",
        "question": "What is the ratio of author with affiliation and without affiliation?",
        "evidence": "with affiliation refers to Affiliation is not Null; without affiliation refers to Affiliation IS NULL; Ration = Count(Id(Affiliation is NOT NULL)) : Count (Id (Affiliation IS NULL))",
        "SQL": "SELECT CAST(SUM(CASE WHEN Affiliation IS NULL THEN 1 ELSE 0 END) AS REAL) / COUNT(*) FROM Author",
        "difficulty": "challenging"
    },
    {
        "question_id": 913,
        "prev_question_id": 3728,
        "db_id": "college_completion",
        "question": "For the state which has the 113 2-year public schools, tell the number of graduated Asian students who seeks another type of degree or certificate at a 2-year institution in 2013.",
        "evidence": "schools_count = 113; 2-year refers to level = '2-year'; public refers to control = 'public'; Asian refers to race = 'A'; seeks another type of degree or certificate at a 2-year institution refers to cohort = '2y all'; in 2013 refers to year = 2013;",
        "SQL": "SELECT COUNT(T2.grad_cohort) FROM state_sector_details AS T1 INNER JOIN state_sector_grads AS T2 ON T2.stateid = T1.stateid WHERE T2.level = '2-year' AND T2.control = 'Public' AND T2.gender = 'B' AND T2.race = 'A' AND T2.cohort = '2y all' AND T1.schools_count = 113",
        "difficulty": "challenging"
    },
    {
        "question_id": 914,
        "prev_question_id": 2840,
        "db_id": "professional_basketball",
        "question": "Please list down the last name of players from \"BLB\" team.",
        "evidence": "\"BLB\" is the tmID",
        "SQL": "SELECT T1.lastName FROM players AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID WHERE T2.tmID = 'BLB'",
        "difficulty": "challenging"
    },
    {
        "question_id": 915,
        "prev_question_id": 915,
        "db_id": "cs_semester",
        "question": "Describe the students' full names and grades in Intro to BlockChain course.",
        "evidence": "student's full names = f_name, l_name;",
        "SQL": "SELECT T1.f_name, T1.l_name, T2.grade FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.name = 'Intro to BlockChain'",
        "difficulty": "challenging"
    },
    {
        "question_id": 916,
        "prev_question_id": 1186,
        "db_id": "talkingdata",
        "question": "How many labels belong to the game-card category?",
        "evidence": "labels refers to label_id;",
        "SQL": "SELECT COUNT(label_id) FROM label_categories WHERE category = 'game-card'",
        "difficulty": "challenging"
    },
    {
        "question_id": 917,
        "prev_question_id": 5852,
        "db_id": "airline",
        "question": "What is the percentage of flights which landed at Pittsburgh were faster than scheduled?",
        "evidence": "percentage = MULTIPLY(DIVIDE(SUM(ACTUAL_ELAPSED_TIME < T2.CRS_ELAPSED_TIME), COUNT(Code)), 100); landed at refers to DEST; Pittsburgh refers to Description which contains 'Pittsburgh'; faster than scheduled refers to ACTUAL_ELAPSED_TIME < CRS_ELAPSED_TIME;",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.ACTUAL_ELAPSED_TIME < T1.CRS_ELAPSED_TIME THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Airlines AS T1 INNER JOIN Airports AS T2 ON T2.Code = T1.DEST WHERE T2.Description LIKE '%Pittsburgh%' AND T1.CRS_ELAPSED_TIME IS NOT NULL AND T1.ACTUAL_ELAPSED_TIME IS NOT NULL",
        "difficulty": "challenging"
    },
    {
        "question_id": 918,
        "prev_question_id": 6007,
        "db_id": "books",
        "question": "What percentage of the total prices of all orders are shipped internationally?",
        "evidence": "shipped internationally refers to method_name = 'International'; percentage = Divide (Sum(price where method_name = 'International'), Sum(price)) * 100",
        "SQL": "SELECT CAST(SUM(CASE WHEN T3.method_name = 'International' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM cust_order AS T1 INNER JOIN order_line AS T2 ON T1.order_id = T2.order_id INNER JOIN shipping_method AS T3 ON T3.method_id = T1.shipping_method_id",
        "difficulty": "challenging"
    },
    {
        "question_id": 919,
        "prev_question_id": 7331,
        "db_id": "works_cycles",
        "question": "List all product only MOQ of 1,000 and with standard cost more than 17.",
        "evidence": "MOQ refers to minimum order quantity; MOQ of 1 refers to MinOrderQty = 1; standard cost more than 48 refers to StandardCost > 48;",
        "SQL": "SELECT T2.Name FROM ProductVendor AS T1 INNER JOIN Product AS T2 ON T1.ProductID = T2.ProductID INNER JOIN Vendor AS T3 ON T1.BusinessEntityID = T3.BusinessEntityID WHERE T1.MaxOrderQty = 1000 AND T2.StandardCost > 17",
        "difficulty": "challenging"
    },
    {
        "question_id": 920,
        "prev_question_id": 2753,
        "db_id": "european_football_1",
        "question": "What is the name of the home team in division P1 with the highest final time goal in all seasons?",
        "evidence": "the highest final time goal refers to MAX(FTHG); P1 = Div;",
        "SQL": "SELECT HomeTeam FROM matchs WHERE Div = 'P1' AND season = 2021 ORDER BY FTHG DESC LIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question_id": 921,
        "prev_question_id": 7643,
        "db_id": "hockey",
        "question": "For all the goalies born in year 1987, who are good in both right hand and left hand? Calculate his percentage of winning for every season he played.",
        "evidence": "good in both right hand and left hand refers shootCatch IS NULL; winning refers to W; every season he played refers to GP; percentage of winning for every season he played refers to DIVIDE(W,GP)*100",
        "SQL": "SELECT T1.firstName, T1.lastName, T2.year, CAST(T2.W AS REAL) / T2.GP FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T1.birthYear = 1987 AND T1.shootCatch IS NULL",
        "difficulty": "challenging"
    },
    {
        "question_id": 922,
        "prev_question_id": 7644,
        "db_id": "hockey",
        "question": "What is given name for player 'aebisda01'. Calculate the average time in minutes for the all his games played as goaltender.",
        "evidence": "played as goaltender refers to pos = 'G'; time in minutes refers to Min; all his games played refers to GP; average time in minutes refers to DIVIDE(SUM(Min)/SUM(GP))",
        "SQL": "SELECT T1.nameGiven, CAST(SUM(T2.Min) AS REAL) / SUM(T2.GP) FROM Master AS T1 INNER JOIN Goalies AS T2 ON T1.playerID = T2.playerID WHERE T1.playerID = 'aebisda01' GROUP BY T1.nameGiven",
        "difficulty": "challenging"
    },
    {
        "question_id": 923,
        "prev_question_id": 2761,
        "db_id": "european_football_1",
        "question": "Please provide the names of any three away teams that competed in the Italian divisions.",
        "evidence": "Italian means belong to country = 'Italy\";",
        "SQL": "SELECT T1.AwayTeam FROM matchs AS T1 INNER JOIN divisions AS T2 ON T1.Div=T2.division WHERE T2.country = 'Italy' LIMIT 3",
        "difficulty": "challenging"
    },
    {
        "question_id": 924,
        "prev_question_id": 1471,
        "db_id": "synthea",
        "question": "What is the social security number and address of the patient who encountered viral sinusitis symptoms on 6/13/2008?",
        "evidence": "social security number refers to ssn; encountered viral sinusitis refers to encounters.REASONDESCRIPTION = 'Viral sinusitis (disorder)'; on 6/13/2008 refers to encounters.DATE = '2008-06-13';",
        "SQL": "SELECT T1.ssn, T1.address FROM patients AS T1 INNER JOIN encounters AS T2 ON T1.patient = T2.PATIENT WHERE T2.DATE = '2008-06-13' AND T2.REASONDESCRIPTION = 'Viral sinusitis (disorder)' AND T2.DESCRIPTION = 'Encounter for symptom'",
        "difficulty": "challenging"
    },
    {
        "question_id": 925,
        "prev_question_id": 9360,
        "db_id": "movie_3",
        "question": "What is the percentage of horror film titles in English film titles?",
        "evidence": "horror film refers to category.name = 'Horror'; English film refers to language.name = 'English'; percentage = divide(count(film_id where category.name = 'Horror'), count(film_id)) where language.name = 'English' * 100%",
        "SQL": "SELECT CAST(SUM(IIF(T3.name = 'Horror', 1, 0)) AS REAL) * 100 / COUNT(T1.film_id) FROM film_category AS T1 INNER JOIN film AS T2 ON T1.film_id = T2.film_id INNER JOIN category AS T3 ON T1.category_id = T3.category_id INNER JOIN language AS T4 ON T2.language_id = T4.language_id WHERE T4.name = 'English'",
        "difficulty": "challenging"
    },
    {
        "question_id": 926,
        "prev_question_id": 2825,
        "db_id": "professional_basketball",
        "question": "Please list the first name of the players from the NBA league with the forward position.",
        "evidence": "\"NBA\" is the lgID; with the forward position refers to pos = 'F' of pos = 'F-C'",
        "SQL": "SELECT DISTINCT T1.firstName FROM players AS T1 INNER JOIN players_teams AS T2 ON T1.playerID = T2.playerID WHERE (T1.pos = 'F' OR T1.pos = 'F-C') AND T2.lgID = 'NBA'",
        "difficulty": "challenging"
    },
    {
        "question_id": 927,
        "prev_question_id": 1430,
        "db_id": "synthea",
        "question": "Among observations in 2011, provide the names and ages of patients whose Systolic Blood Pressures are 200mmHg.",
        "evidence": "name implies the patient's full name which refers to first, last; age refers to deathdate is null then SUBTRACT(strftime('%Y', DATE), strftime('%Y', birthdate)); Systolic Blood Pressures are 200mmHg refers to DESCRIPTION = 'Systolic Blood Pressure' and VALUE = 200 and UNITS = 'mmHg' from observations; in 2011 refers to DATE like '2011%';",
        "SQL": "SELECT T2.first, T2.last , CASE WHEN T2.deathdate IS NULL THEN strftime('%Y', T1.DATE) - strftime('%Y', T2.birthdate) ELSE strftime('%Y', T2.deathdate) - strftime('%Y', T2.birthdate) END AS age FROM observations AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.DESCRIPTION = 'Systolic Blood Pressure' AND T1.VALUE = 200 AND T1.UNITS = 'mmHg' AND strftime('%Y', T1.DATE) = '2011'",
        "difficulty": "challenging"
    },
    {
        "question_id": 928,
        "prev_question_id": 950,
        "db_id": "cs_semester",
        "question": "What is the difference in the average GPA of students who took the hardest and easiest courses?",
        "evidence": "difference in the average gpa = SUBTRACT(AVG(gpa WHERE MAX(diff)), AVG(gpa where min(diff))); difficulty of the course refers to diff; hardest course refers to MAX(diff); easiest course refers to MIN(diff);",
        "SQL": "SELECT AVG(T1.gpa) FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.diff IN (2, 1) GROUP BY T3.diff",
        "difficulty": "challenging"
    },
    {
        "question_id": 929,
        "prev_question_id": 577,
        "db_id": "codebase_comments",
        "question": "Among the repositories whose number of stars received are between 6,000 to 9,000, which repository has the highest number of solution paths and many of those solution paths needs to be compiled if user wants to implement it?",
        "evidence": "Stars between 6,000 to 9,000; highest number of solution paths refers to max(count(Path)); needs to be compiled if user wants to implement it refers to WasCompiled = 0;",
        "SQL": "SELECT T2.RepoId, COUNT(T2.RepoId) FROM Repo AS T1 INNER JOIN Solution AS T2 ON T1.Id = T2.RepoId WHERE T1.Stars BETWEEN 6000 AND 9000 AND T2.WasCompiled = 0 GROUP BY T2.RepoId ORDER BY COUNT(T2.RepoId) DESC LIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question_id": 930,
        "prev_question_id": 8134,
        "db_id": "university",
        "question": "Among the universities in United States of America, what is the percentage of female students in year 2016?",
        "evidence": "female students refers to DIVIDE(MULTIPLY(num_students, pct_female_students), 100); in United States of America refers to country_name = 'United States of America'; percentage refers to DIVIDE(SUM(DIVIDE(MULTIPLY(num_students, pct_female_students), 100)), SUM(num_students))",
        "SQL": "SELECT SUM(CAST(T2.pct_female_students * T2.num_students AS REAL) / 100) * 100 / SUM(T2.num_students) FROM university AS T1 INNER JOIN university_year AS T2 ON T1.id = T2.university_id INNER JOIN country AS T3 ON T3.id = T1.country_id WHERE T3.country_name = 'United States of America' AND T2.year = 2016",
        "difficulty": "challenging"
    },
    {
        "question_id": 931,
        "prev_question_id": 551,
        "db_id": "movies_4",
        "question": "Provide the production companies of the movie that has over 35% average running time per movie in 2016.",
        "evidence": "production companies refers to company_name; in 2016 refers to release_date LIKE '2016%'; over 35% average running time per movie refers to divide(subtract(runtime, AVG(runtime)), AVG(runtime)) * 100 as percentage > 35",
        "SQL": "SELECT T.company_name FROM ( SELECT DISTINCT T3.company_name, T1.runtime FROM movie AS T1 INNER JOIN movie_company AS T2 ON T1.movie_id = T2.movie_id INNER JOIN production_company AS T3 ON T3.company_id = T2.company_id WHERE T1.release_date LIKE '2016%' ) T WHERE T.runtime * 100 > (0.35 * ( SELECT AVG(T1.runtime) FROM movie AS T1 INNER JOIN movie_company AS T2 ON T1.movie_id = T2.movie_id INNER JOIN production_company AS T3 ON T3.company_id = T2.company_id WHERE T1.release_date LIKE '2016%' ) + ( SELECT AVG(T1.runtime) FROM movie AS T1 INNER JOIN movie_company AS T2 ON T1.movie_id = T2.movie_id INNER JOIN production_company AS T3 ON T3.company_id = T2.company_id WHERE T1.release_date LIKE '2016%' )) * 100",
        "difficulty": "challenging"
    },
    {
        "question_id": 932,
        "prev_question_id": 7257,
        "db_id": "works_cycles",
        "question": "Who made the purchase order with the greatest total due before freight? Indicate her employee ID and calculate for his/her age when he/she was hired.",
        "evidence": "total due before freight = SUBTRACT(TotalDue, Freight); age at the time an employee was hired = SUBTRACT(HireDate, year(BirthDate);",
        "SQL": "SELECT T2.BusinessEntityID, STRFTIME('%Y', T2.HireDate) - STRFTIME('%Y', T2.BirthDate) FROM PurchaseOrderHeader AS T1 INNER JOIN Employee AS T2 ON T1.EmployeeID = T2.BusinessEntityID ORDER BY T1.TotalDue DESC LIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question_id": 933,
        "prev_question_id": 9320,
        "db_id": "movie_3",
        "question": "Which actor acted in the most films?",
        "evidence": "actor refers to first_name, last_name; the most film refers to MAX(SUM(film_id))",
        "SQL": "SELECT T.first_name, T.last_name FROM ( SELECT T2.first_name, T2.last_name, SUM(T1.film_id) AS num FROM film_actor AS T1 INNER JOIN actor AS T2 ON T1.actor_id = T2.actor_id GROUP BY T2.first_name, T2.last_name ) AS T ORDER BY T.num DESC LIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question_id": 934,
        "prev_question_id": 7192,
        "db_id": "works_cycles",
        "question": "Among the sales people, who are hired prior to 2010?",
        "evidence": "Sales people refer to PersonType = 'SP'; hired prior to 2010 means the person's hiring date was before 2010, therefore year(HireDate)<2010",
        "SQL": "SELECT COUNT(T1.BusinessEntityID) FROM Employee AS T1 INNER JOIN Person AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T2.PersonType = 'SP' AND SUBSTR(T1.HireDate, 0, 4) < 2010",
        "difficulty": "challenging"
    },
    {
        "question_id": 935,
        "prev_question_id": 3756,
        "db_id": "college_completion",
        "question": "Between 2011 to 2013, what is the average number of male Hispanic degree-seeking students at 2-year institutions who graduated within 150 percent of normal/expected time in United Education Institute-Huntington Park Campus?",
        "evidence": "between 2011 to 2013 refers to year BETWEEN '2011' AND '2013'; male refers to gender = 'M'; Hispanic refers to race = 'H'; number of degree-seeking students at 2-year institutions who graduated within 150 percent of normal/expected time refers to grad_150; United Education Institute-Huntington Park Campus refers to chronname = 'United Education Institute-Huntington Park Campus';",
        "SQL": "SELECT AVG(T2.grad_150) FROM institution_details AS T1 INNER JOIN institution_grads AS T2 ON T2.unitid = T1.unitid WHERE T1.chronname = 'United Education Institute-Huntington Park Campus' AND T2.year BETWEEN 2011 AND 2013 AND T2.gender = 'M' AND T2.race = 'H'",
        "difficulty": "challenging"
    },
    {
        "question_id": 936,
        "prev_question_id": 8216,
        "db_id": "sales_in_weather",
        "question": "What was the average temperature differences during May 2012 for store number 6 and 7?",
        "evidence": "during May 2012 refers to SUBSTR(date, 1, 7) = '2012-05'; store number 6 refers to store_nbr = 6; store number 7 refers to store_nbr = 7; average temperature difference = Subtract (Divide (Sum(tavg), Count (date) where the store_nbr = 6), Divide (Sum(tavg), Count(date) where store_nbr = 7))",
        "SQL": "SELECT ( SELECT CAST(SUM(tavg) AS REAL) / COUNT(`date`) FROM weather AS T1 INNER JOIN relation AS T2 ON T1.station_nbr = T2.station_nbr AND T1.`date` LIKE '%2012-05%' AND T2.store_nbr = 6 ) - ( SELECT CAST(SUM(tavg) AS REAL) / COUNT(`date`) FROM weather AS T1 INNER JOIN relation AS T2 ON T1.station_nbr = T2.station_nbr WHERE T1.`date` LIKE '%2012-05%' AND T2.store_nbr = 7 )",
        "difficulty": "challenging"
    },
    {
        "question_id": 937,
        "prev_question_id": 2857,
        "db_id": "professional_basketball",
        "question": "Please list the top three shortest black players.",
        "evidence": "shortest player refers to Min(height); black players refers to race = 'B'",
        "SQL": "SELECT firstName, lastName FROM players WHERE race = 'B' AND height > 0 ORDER BY height ASC LIMIT 3",
        "difficulty": "challenging"
    },
    {
        "question_id": 938,
        "prev_question_id": 8949,
        "db_id": "human_resources",
        "question": "By what percentage is the average salary of Trainees higher than the minimum salary of this postion?",
        "evidence": "AVG(salary); Trainee is a position title; minimum salary refers to minsalary; calculation = DIVIDE(SUBTRACT(AVG(salary), minsalary), minsalary) * 100",
        "SQL": "SELECT 100 * (AVG(CAST(REPLACE(SUBSTR(T1.salary, 4), ',', '') AS REAL)) - CAST(REPLACE(SUBSTR(T2.minsalary, 4), ',', '') AS REAL)) / CAST(REPLACE(SUBSTR(T2.minsalary, 4), ',', '') AS REAL) AS per FROM employee AS T1  INNER JOIN position AS T2  ON T1.positionID = T2.positionID WHERE T2.positiontitle = 'Trainee'",
        "difficulty": "challenging"
    },
    {
        "question_id": 939,
        "prev_question_id": 2801,
        "db_id": "professional_basketball",
        "question": "Who is the coach for 'BOS' team in year 1950. List the coach ID together with the number of game won and lost.",
        "evidence": "'BOS' is the tmID; 1950 refers to year = 1950; number of game won refers to won; number of game lost refers to lost",
        "SQL": "SELECT coachID, won, lost FROM coaches WHERE year = 1950 AND tmID = 'BOS'",
        "difficulty": "challenging"
    },
    {
        "question_id": 940,
        "prev_question_id": 6779,
        "db_id": "retails",
        "question": "Calculate the difference in the average number of low-priority orders shipped by truck in each month of 1995 and 1996.",
        "evidence": "SUBTRACT(DIVIDE(SUM(l_orderkey where year(l_shipdate) = 1995), 12), DIVIDE(SUM(l_orderkey where year(l_shipdate) = 1996), 12)) where o_orderpriority = '5-LOW';",
        "SQL": "SELECT (CAST(SUM(IIF(STRFTIME('%Y', T2.l_shipdate) = 1995, 1, 0)) AS REAL) / 12) - (CAST(SUM(IIF(STRFTIME('%Y', T2.l_shipdate) = 1996, 1, 0)) AS REAL) / 12) FROM orders AS T1 INNER JOIN lineitem AS T2 ON T1.o_orderkey = T2.l_orderkey WHERE T1.o_orderpriority = '5-LOW' AND T2.l_shipmode = 'TRUCK'",
        "difficulty": "challenging"
    },
    {
        "question_id": 941,
        "prev_question_id": 9169,
        "db_id": "movie_3",
        "question": "What is the percentage more for the rental payment for store No.2 than store No.1?",
        "evidence": "store no. 1 refers to store_id = 1; store no.2 refers to store_id = 2; rental payment refers to amount; percent more = Divide (Subtract(amount where store_id = 2, amount where store_id = 1), amount where store_id = 1) *100",
        "SQL": "SELECT CAST((SUM(IIF(T2.store_id = 2, T1.amount, 0)) - SUM(IIF(T2.store_id = 1, T1.amount, 0))) AS REAL) * 100 / SUM(IIF(T2.store_id = 1, T1.amount, 0)) FROM payment AS T1 INNER JOIN customer AS T2 ON T1.customer_id = T2.customer_id INNER JOIN store AS T3 ON T2.store_id = T3.store_id",
        "difficulty": "challenging"
    },
    {
        "question_id": 942,
        "prev_question_id": 436,
        "db_id": "movies_4",
        "question": "What is the percentage of male characters in the movie \"Bride Wars\"?",
        "evidence": "male refers to gender = 'Male'; \"Bride Wars\" refers to title = 'Bride Wars'; percentage = divide(sum(gender = 'Male'), count(gender)) * 100 as percentage",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T3.gender = 'Male' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T3.gender) FROM movie AS T1 INNER JOIN movie_cast AS T2 ON T1.movie_id = T2.movie_id INNER JOIN gender AS T3 ON T2.gender_id = T3.gender_id WHERE T1.title = 'Bride Wars'",
        "difficulty": "challenging"
    },
    {
        "question_id": 943,
        "prev_question_id": 5327,
        "db_id": "beer_factory",
        "question": "What is the average star rating given by female customers to brand ID 10018 from 1/25/2015 to 3/10/2015?",
        "evidence": "average star rating = AVG(StarRating); female customers refers to Gender = 'F; from 1/25/2015 to 3/10/2015 refers to ReviewDate BETWEEN '2015-01-25' AND '2015-03-10';",
        "SQL": "SELECT AVG(T2.StarRating) FROM customers AS T1 INNER JOIN rootbeerreview AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.BrandID = 10018 AND T1.Gender = 'F' AND T2.ReviewDate BETWEEN '2013-01-25' AND '2015-03-10'",
        "difficulty": "challenging"
    },
    {
        "question_id": 944,
        "prev_question_id": 3721,
        "db_id": "college_completion",
        "question": "How many 2-year private nonprofit schools in \"CT\" whose graduation rate falls below the average for the state?",
        "evidence": "2-year refers to level = '2-year'; private nonprofit refers to control = 'Private not-for-profit'; CT refers to state_abbr = 'CT'; graduation rate falls below the average for the state refers to awards_per_value < awards_per_natl_value;",
        "SQL": "SELECT COUNT(DISTINCT T1.chronname) FROM institution_details AS T1 INNER JOIN state_sector_grads AS T2 ON T2.state = T1.state WHERE T2.state_abbr = 'CT' AND T2.level = '2-year' AND T1.control = 'Private not-for-profit' AND T1.awards_per_value < T1.awards_per_natl_value",
        "difficulty": "challenging"
    },
    {
        "question_id": 945,
        "prev_question_id": 4980,
        "db_id": "olympics",
        "question": "What is the percentage of female athletes below 20s who participated in the 2002 Winter Olympic?",
        "evidence": "DIVIDE(COUNT(person_id where gender = 'F' and age < 20), COUNT(person_id)) as percentage where games_name = '2002 Winter';",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T3.gender = 'F' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T2.person_id) FROM games AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.games_id INNER JOIN person AS T3 ON T2.person_id = T3.id WHERE T1.games_name = '2002 Winter' AND T2.age < 20",
        "difficulty": "challenging"
    },
    {
        "question_id": 946,
        "prev_question_id": 5961,
        "db_id": "books",
        "question": "List the author's and publisher's name of the book published on July 10, 1997.",
        "evidence": "author's name refers to author_name; publisher's name refers to publisher_name; book published on July 10, 1997 refers to publication_date LIKE '1997-07-10'",
        "SQL": "SELECT T3.author_name, T4.publisher_name FROM book AS T1 INNER JOIN book_author AS T2 ON T1.book_id = T2.book_id INNER JOIN author AS T3 ON T3.author_id = T2.author_id INNER JOIN publisher AS T4 ON T4.publisher_id = T1.publisher_id WHERE T1.publication_date = '1997-07-10'",
        "difficulty": "challenging"
    },
    {
        "question_id": 947,
        "prev_question_id": 1463,
        "db_id": "synthea",
        "question": "In 2009, who among the married patients had undergone a care plan for more than 60 days?",
        "evidence": "in 2009 refers to year(careplans.START) = 2009; married patients refers to marital = 'M'; undergone a care plan for more than 60 days refers to SUBTRACT(careplans.STOP, careplans.START) > 60;",
        "SQL": "SELECT DISTINCT T1.first, T1.last FROM patients AS T1 INNER JOIN careplans AS T2 ON T1.patient = T2.PATIENT WHERE T1.marital = 'M' AND strftime('%J', T2.STOP) - strftime('%J', T2.START) > 60",
        "difficulty": "challenging"
    },
    {
        "question_id": 948,
        "prev_question_id": 4959,
        "db_id": "olympics",
        "question": "What is the name of the competitor who has won the most medals?",
        "evidence": "name of the competitor refers to full_name; won the most medals refer to MAX(COUNT(medal_id));",
        "SQL": "SELECT T1.full_name FROM person AS T1 INNER JOIN games_competitor AS T2 ON T1.id = T2.person_id INNER JOIN competitor_event AS T3 ON T2.id = T3.competitor_id INNER JOIN medal AS T4 ON T3.medal_id = T4.id WHERE T4.id != 4 GROUP BY T1.full_name ORDER BY COUNT(T4.id) DESC LIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question_id": 949,
        "prev_question_id": 8135,
        "db_id": "university",
        "question": "Calculate the difference between the total number of students and the number of international international students in Univeristy of Tokyo from 2011 to 2014.",
        "evidence": "international students refers to DIVIDE(MULTIPLY(num_students, pct_international_students), 100); difference refers to SUBTRACT(SUM(num_students), SUM(DIVIDE(MULTIPLY(num_students, pct_international_students), 100))); in University of Tokyo refers to university_name = 'University of Tokyo'; from 2011 to 2014 refers to year BETWEEN 2011 AND 2014",
        "SQL": "SELECT SUM(T1.num_students) - SUM(CAST(T1.num_students * T1.pct_international_students AS REAL) / 100) FROM university_year AS T1 INNER JOIN university AS T2 ON T1.university_id = T2.id WHERE T1.year BETWEEN 2011 AND 2014 AND T2.university_name = 'University of Tokyo'",
        "difficulty": "challenging"
    },
    {
        "question_id": 950,
        "prev_question_id": 3321,
        "db_id": "video_games",
        "question": "Among the games published by Nintendo, what is the percentage of those in the genre of sports?",
        "evidence": "published by Nintendo refers to publisher_name = 'Nintendo'; in the genre of sports refers to genre_name = 'Sports'; percentage = divide(count(game_id where genre_name = 'Sports'), count(game_id)) * 100% where publisher_name = 'Nintendo'",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T4.genre_name = 'Sports' THEN T1.id ELSE NULL END) AS REAL) * 100/ COUNT(T1.id) FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN publisher AS T3 ON T2.publisher_id = T3.id INNER JOIN genre AS T4 ON T1.genre_id = T4.id WHERE T3.publisher_name = 'Nintendo'",
        "difficulty": "challenging"
    },
    {
        "question_id": 951,
        "prev_question_id": 7342,
        "db_id": "works_cycles",
        "question": "What is the highest possible discount rate for 'Excess Inventory'?",
        "evidence": "excess inventory refers to Type = 'Excess Inventory'; highest possible discount refers to Max(DiscountPct);",
        "SQL": "SELECT DiscountPct FROM SpecialOffer WHERE Type = 'Excess Inventory' ORDER BY DiscountPct DESC LIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question_id": 952,
        "prev_question_id": 3768,
        "db_id": "public_review_platform",
        "question": "For the user who gave the most number of long reviews, what is his/her averge ratings of all review?",
        "evidence": "long reviews refers to review_length = 'long'; most number of long reviews refers to MAX(COUNT(review_length = 'long')); average ratings = AVG(review_stars);",
        "SQL": "SELECT CAST(SUM(T1.review_stars) AS REAL) / COUNT(T1.review_stars) FROM Reviews AS T1 INNER JOIN Users AS T2 ON T1.user_id = T2.user_id WHERE T1.review_length LIKE 'Long' GROUP BY T1.user_id ORDER BY COUNT(T1.review_length) DESC LIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question_id": 953,
        "prev_question_id": 3467,
        "db_id": "video_games",
        "question": "Calculate the number of game publisher IDs for games released in 1984.",
        "evidence": "released in 1984 refers to release_year = 1984;",
        "SQL": "SELECT COUNT(T.game_publisher_id) FROM game_platform AS T WHERE T.release_year = 1984",
        "difficulty": "challenging"
    },
    {
        "question_id": 954,
        "prev_question_id": 2245,
        "db_id": "world_development_indicators",
        "question": "What is the percentage of increase of the indicator on Adolescent fertility rate from 1960 to 1961 in the country whose Alpha2Code is 1A?",
        "evidence": "the percentage of increase from 1960 to 1961 = divide(subtract(sum(value where Year = 1961), sum(Value where Year = 1960)), sum(Value where Year = 1960)) *100%; indicator on Adolescent fertility rate refers to IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)%'\n\n",
        "SQL": "SELECT (( SELECT T2.Value FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.Alpha2Code = '1A' AND T2.IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)' AND T2.Year = 1961 ) - ( SELECT T2.Value FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.Alpha2Code = '1A' AND T2.IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)' AND T2.Year = 1960 )) * 1.0 / ( SELECT SUM(T2.Value) FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.Alpha2Code = '1A' AND T2.IndicatorName = 'Adolescent fertility rate (births per 1,000 women ages 15-19)' AND T2.Year = 1960 )",
        "difficulty": "challenging"
    },
    {
        "question_id": 955,
        "prev_question_id": 7812,
        "db_id": "hockey",
        "question": "Calculate the total points scored by team ID ANA and list down the coashes of the team.",
        "evidence": "points scored refers to Pts; team ID refers to tmID;",
        "SQL": "SELECT SUM(T2.Pts), T1.coachID FROM Coaches AS T1 INNER JOIN Teams AS T2 ON T2.tmID = T1.tmID WHERE T2.tmID = 'ANA' GROUP BY T1.coachID",
        "difficulty": "challenging"
    },
    {
        "question_id": 956,
        "prev_question_id": 934,
        "db_id": "cs_semester",
        "question": "What is the difficulty of the course in which a student with level of intellengence of 5 got an A grade?",
        "evidence": "difficulty of the course refers to diff;",
        "SQL": "SELECT T3.diff FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T2.grade = 'A' AND T1.intelligence = 5",
        "difficulty": "challenging"
    },
    {
        "question_id": 957,
        "prev_question_id": 5890,
        "db_id": "airline",
        "question": "Provide the origin of the flight that has the shortest actual elapsed time.",
        "evidence": "shortest actual elapsed time refers to MIN(ACTUAL_ELAPSED_TIME);",
        "SQL": "SELECT ORIGIN FROM Airlines ORDER BY ACTUAL_ELAPSED_TIME ASC LIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question_id": 958,
        "prev_question_id": 4305,
        "db_id": "simpson_episodes",
        "question": "Calculate the percentage of people who were born after 1970 and from California.",
        "evidence": "born after 1970 refers to birthdate > 1970; from California refers to birth_region = 'California'; percentage = divide(count(birthdate > 1970 and birth_region = 'California'), total(birthdate)) * 100%",
        "SQL": "SELECT CAST(SUM(CASE WHEN birth_region = 'California' AND SUBSTR(birthdate, 1, 4) > '1970' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(birthdate) FROM Person;",
        "difficulty": "challenging"
    },
    {
        "question_id": 959,
        "prev_question_id": 461,
        "db_id": "movies_4",
        "question": "Give the names of the female cast in Movie No. 1865.",
        "evidence": "female cast refers to gender = 'Female'; name of cast refers to person_name; Movie No. 1865 refers to movie_id = 1865",
        "SQL": "SELECT T2.person_name FROM movie_cast AS T1 INNER JOIN person AS T2 ON T1.person_id = T2.person_id INNER JOIN gender AS T3 ON T1.gender_id = T3.gender_id WHERE T1.movie_id = 1865 AND T3.gender = 'Female'",
        "difficulty": "challenging"
    },
    {
        "question_id": 960,
        "prev_question_id": 8993,
        "db_id": "bike_share_1",
        "question": "Name all the trips where the bike was borrowed and returned on a different day. State the city where the bike was returned.",
        "evidence": "the bike was borrowed and returned on a different day implies that start_date and end_date are not equal to each other; where the bike was returned refers to end_station_name;",
        "SQL": "SELECT DISTINCT T1.city FROM station AS T1 INNER JOIN trip AS T2 ON T2.start_station_name = T1.name WHERE SUBSTR(CAST(T2.start_date AS TEXT), INSTR(T2.start_date, '/') + 1) - SUBSTR(CAST(T2.start_date AS TEXT), INSTR(T2.start_date, ' ') - 5) <> SUBSTR(CAST(T2.end_date AS TEXT), INSTR(T2.end_date, '/') + 1) - SUBSTR(CAST(T2.end_date AS TEXT), INSTR(T2.end_date, ' ') - 5)",
        "difficulty": "challenging"
    },
    {
        "question_id": 961,
        "prev_question_id": 7819,
        "db_id": "world",
        "question": "Which country has the shortest life expectancy?",
        "evidence": "shortest life expectancy refers to MIN(LifeExpectancy);",
        "SQL": "SELECT Name FROM Country ORDER BY LifeExpectancy LIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question_id": 962,
        "prev_question_id": 900,
        "db_id": "cs_semester",
        "question": "What are the names of the courses that the students with the lowest intelligence are least satisfied with?",
        "evidence": "lower intelligence refers to intelligence = 1; sat refers to student's satisfaction degree with the course where least satisfaction refers to sat = 1;",
        "SQL": "SELECT T3.name FROM student AS T1 INNER JOIN registration AS T2 ON T1.student_id = T2.student_id INNER JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T2.sat = 1 AND T1.intelligence = 1",
        "difficulty": "challenging"
    },
    {
        "question_id": 963,
        "prev_question_id": 1682,
        "db_id": "restaurant",
        "question": "Indicate street and number of the Adelitas Taqueria Restaurants.",
        "evidence": "street refers to street_name; number refers to street_num; Adelitas Taqueria Restaurant refers to label = 'adelitas taqueria'",
        "SQL": "SELECT T1.street_name, T1.street_num FROM location AS T1 INNER JOIN generalinfo AS T2 ON T1.id_restaurant = T2.id_restaurant WHERE T2.label = 'adelitas taqueria'",
        "difficulty": "challenging"
    },
    {
        "question_id": 964,
        "prev_question_id": 8032,
        "db_id": "university",
        "question": "Provide the ID of the university with the highest percentage of female students in 2012.",
        "evidence": "in 2012 refers to year = 2012; highest percentage of female students\u00a0 refers to MAX(pct_female_students); ID of the university refers to university_id",
        "SQL": "SELECT university_id FROM university_year WHERE year = 2012 ORDER BY pct_female_students DESC LIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question_id": 965,
        "prev_question_id": 1519,
        "db_id": "synthea",
        "question": "Among the patients with viral sinusitis condition, which patient's gender is most affected? Provide the number for each respectively.",
        "evidence": "viral sinusitis condition refers to conditions.DESCRIPTION = 'Viral sinusitis (disorder)'; gender that is most affected refers to MAX(COUNT(gender WHERE conditions.DESCRIPTION = 'Viral sinusitis (disorder)'));",
        "SQL": "SELECT SUM(CASE WHEN T1.gender = 'F' THEN 1 ELSE 0 END), SUM(CASE WHEN T1.gender = 'M' THEN 1 ELSE 0 END) FROM patients AS T1 INNER JOIN conditions AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Viral sinusitis (disorder)'",
        "difficulty": "challenging"
    },
    {
        "question_id": 966,
        "prev_question_id": 4167,
        "db_id": "simpson_episodes",
        "question": "What's the rating of the episode in which Dan Castellaneta won the Outstanding Voice-Over Performance award in 2009?",
        "evidence": "\"Dan Castellaneta\" is the person;\u00a0 2009 is year;\u00a0 won refers result = 'Winner'",
        "SQL": "SELECT T2.rating FROM Award AS T1 INNER JOIN Episode AS T2 ON T1.episode_id = T2.episode_id WHERE T1.award = 'Outstanding Voice-Over Performance' AND SUBSTR(T1.year, 1, 4) = '2009' AND T1.person = 'Dan Castellaneta';",
        "difficulty": "challenging"
    },
    {
        "question_id": 967,
        "prev_question_id": 3408,
        "db_id": "video_games",
        "question": "Which game has the most sales in Japan?",
        "evidence": "\nwhich game refers to game_name; most sales refers to MAX(num_sales); Japan refers to region_name = 'Japan';",
        "SQL": "SELECT T5.game_name FROM region AS T1 INNER JOIN region_sales AS T2 ON T1.id = T2.region_id INNER JOIN game_platform AS T3 ON T2.game_platform_id = T3.id INNER JOIN game_publisher AS T4 ON T3.game_publisher_id = T4.id INNER JOIN game AS T5 ON T4.game_id = T5.id WHERE T1.region_name = 'Japan' ORDER BY T2.num_sales DESC LIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question_id": 968,
        "prev_question_id": 9394,
        "db_id": "movie_3",
        "question": "Who are the actors starred in the film \"Bound Cheaper\"?",
        "evidence": "actor refers to first_name, last_name; film \"Bound Cheaper\" refers to title = 'BOUND CHEAPER'",
        "SQL": "SELECT T1.first_name, T1.last_name FROM actor AS T1 INNER JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id INNER JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T3.title = 'BOUND CHEAPER'",
        "difficulty": "challenging"
    },
    {
        "question_id": 969,
        "prev_question_id": 8912,
        "db_id": "cookbook",
        "question": "Among the recipes from The California Tree Fruit Agreement, calculate the percentage of sodium-free recipes.",
        "evidence": "The California Tree Fruit Agreement is a source; calculation = MULTIPLY(DIVIDE(COUNT(sodium BETWEEN 0 AND 5 THEN recipe_id), COUNT(recipe_id)), 100)",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.sodium < 5 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Recipe AS T1 INNER JOIN Nutrition AS T2 ON T1.recipe_id = T2.recipe_id WHERE T1.source = 'The California Tree Fruit Agreement'",
        "difficulty": "challenging"
    },
    {
        "question_id": 970,
        "prev_question_id": 8835,
        "db_id": "food_inspection",
        "question": "Who were the owners of eateries which had highest health hazard by improper cooking time or temperatures?",
        "evidence": "owners of eateries refer to owner_name; highest health hazard by improper cooking time or temperatures refers to risk_category = 'High Risk' and description = 'Improper cooking time or temperatures';",
        "SQL": "SELECT T2.owner_name FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.risk_category = 'High Risk' AND T1.description = 'Improper cooking time or temperatures'",
        "difficulty": "challenging"
    },
    {
        "question_id": 971,
        "prev_question_id": 8114,
        "db_id": "university",
        "question": "Calculate the average score of university ID 79 between year 2013 to 2015.",
        "evidence": "average score refers to avg(score); between year 2013 to 2015 refers to year BETWEEN 2013 AND 2015",
        "SQL": "SELECT AVG(score) FROM university_ranking_year WHERE year BETWEEN 2013 AND 2015 AND university_id = 79",
        "difficulty": "challenging"
    },
    {
        "question_id": 972,
        "prev_question_id": 7255,
        "db_id": "works_cycles",
        "question": "What is the age of the oldest Marketing Specialist by 12/31/2015 and what is his/her hourly rate?",
        "evidence": "age as of 12/31/2015 = SUBTRACT(2015, year(BirthDate)); hourly rate refers to Rate;",
        "SQL": "SELECT 2015 - STRFTIME('%Y', T1.BirthDate), T2.Rate FROM Employee AS T1 INNER JOIN EmployeePayHistory AS T2 ON T1.BusinessEntityID = T2.BusinessEntityID WHERE T1.JobTitle = 'Marketing Specialist' ORDER BY 2015 - STRFTIME('%Y', T1.BirthDate) DESC LIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question_id": 973,
        "prev_question_id": 5348,
        "db_id": "beer_factory",
        "question": "What is the percentage difference of River City sale compare to Frostie?",
        "evidence": "percentage difference = (DIVIDE(MULTIPLY(SUBTRACT(SUM(PurchasePrice WHERE BrandName = 'River City'), SUM(PurchasePrice WHERE BrandName = 'Frostie')), 100), SUM(PurchasePrice WHERE BrandName = 'Frostie'))); River City refers to BrandName = 'River City'; Frostie refers to BrandName = 'Frostie';",
        "SQL": "SELECT CAST((SUM(CASE WHEN T3.BrandName = 'River City' THEN T2.PurchasePrice ELSE 0 END) - SUM(CASE WHEN T3.BrandName = 'Frostie' THEN T2.PurchasePrice ELSE 0 END)) AS REAL) * 100 / SUM(CASE WHEN T3.BrandName = 'Frostie' THEN T2.PurchasePrice ELSE 0 END) FROM rootbeer AS T1 INNER JOIN `transaction` AS T2 ON T1.RootBeerID = T2.RootBeerID INNER JOIN rootbeerbrand AS T3 ON T1.BrandID = T3.BrandID",
        "difficulty": "challenging"
    },
    {
        "question_id": 974,
        "prev_question_id": 941,
        "db_id": "cs_semester",
        "question": "Among the professors with a teachability of 3 and below, what is the percentage of their student advisees with a low salary?",
        "evidence": "teachability < = 3; percentage = MULTIPLY(DIVIDE(COUNT(salary = 'low'), COUNT(salary)), 1.0);",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.salary = 'low' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.salary) FROM RA AS T1 INNER JOIN prof AS T2 ON T1.prof_id = T2.prof_id WHERE T2.teachingability < 3",
        "difficulty": "challenging"
    },
    {
        "question_id": 975,
        "prev_question_id": 5318,
        "db_id": "beer_factory",
        "question": "What percentage of customers who paid with a Discover Credit Card gave a 3-star rating?",
        "evidence": "percentage = MULTIPLY(DIVIDE(COUNT(CustomerID WHERE StarRating = 3), COUNT(CustomerID) WHERE CreditCardType = 'Discover'), 100); Discover Credit Card refers to CreditCardType = 'Discover'; 3-star rating refers to StarRating = 3;",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T1.StarRating = 3 THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.CustomerID) FROM rootbeerreview AS T1 INNER JOIN `transaction` AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.CreditCardType = 'Discover'",
        "difficulty": "challenging"
    },
    {
        "question_id": 976,
        "prev_question_id": 433,
        "db_id": "movies_4",
        "question": "For all the movies which were produced by Cruel and Unusual Films, which one has the most popularity?",
        "evidence": "produced by Cruel and Unusual Films refers to company_name = 'Cruel and Unusual Films'; most popularity refers to max(popularity)",
        "SQL": "SELECT T3.title FROM production_company AS T1 INNER JOIN movie_company AS T2 ON T1.company_id = T2.company_id INNER JOIN movie AS T3 ON T2.movie_id = T3.movie_id WHERE T1.company_name = 'Cruel and Unusual Films' ORDER BY T3.popularity DESC LIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question_id": 977,
        "prev_question_id": 6119,
        "db_id": "food_inspection_2",
        "question": "What is the full name of the sanitarian who inspected Amundsen High School on 2010/5/11?",
        "evidence": "full name refers to first_name, last_name;\u00a0 Amundsen High School refers to dba_name = 'AMUNDSEN HIGH SCHOOL'; on 2010/5/11 refers to inspection_date = '2010-05-11'",
        "SQL": "SELECT T1.first_name, T1.last_name FROM employee AS T1 INNER JOIN inspection AS T2 ON T1.employee_id = T2.employee_id INNER JOIN establishment AS T3 ON T2.license_no = T3.license_no WHERE T2.inspection_date = '2010-05-11' AND T3.dba_name = 'AMUNDSEN HIGH SCHOOL' AND T1.title = 'Sanitarian'",
        "difficulty": "challenging"
    },
    {
        "question_id": 978,
        "prev_question_id": 1854,
        "db_id": "soccer_2016",
        "question": "Among the players born in 1977, what is the percentage of the players with a role as a captain?",
        "evidence": "born in 1977 refers to DOB LIKE '1977%'; a role as a captain refers to Role_Desc = 'Captain'; percentage = divide(count(Role_Id where Role_Desc = 'Captain'), count(Role_Id)) * 100% where DOB LIKE '1977%'",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.Role_Desc = 'Captain' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Role_Id) FROM Rolee AS T1 INNER JOIN Player_Match AS T2 ON T2.Role_Id = T1.Role_Id INNER JOIN Player AS T3 ON T3.Player_Id = T2.Player_Id WHERE T3.DOB LIKE '1977%'",
        "difficulty": "challenging"
    },
    {
        "question_id": 979,
        "prev_question_id": 1550,
        "db_id": "car_retails",
        "question": "What is the average, highest and lowest annual payments collected between 1/1/2003 to 12/31/2005?",
        "evidence": "paymentDate BETWEEN '2003-01-01' AND '2005-12-31'; average annual payments = DIVIDE(SUM(amount), 3);",
        "SQL": "SELECT CAST(SUM(T1.amount) AS REAL) / 3, MAX(T1.amount) , MIN(T1.amount) FROM payments AS T1 INNER JOIN customers AS T2 ON T1.customerNumber = T2.customerNumber WHERE T1.paymentDate BETWEEN '2003-01-01' AND '2005-12-31'",
        "difficulty": "challenging"
    },
    {
        "question_id": 980,
        "prev_question_id": 1543,
        "db_id": "synthea",
        "question": "What is the difference between the number of married patients and the number of single patients with diabetes?",
        "evidence": "difference = SUBTRACT(patients.patient WHERE marital = 'M'), COUNT(patients.patient WHERE marital = 'S') WHERE conditions.DESCRIPTION = 'Diabetes'); married patients refers to marital = 'M'; single patients refers to marital = 'S'; diabetes refers to conditions.DESCRIPTION = 'Diabetes';",
        "SQL": "SELECT SUM(CASE WHEN T2.marital = 'M' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.marital = 'S' THEN 1 ELSE 0 END) FROM conditions AS T1 INNER JOIN patients AS T2 ON T1.PATIENT = T2.patient WHERE T1.DESCRIPTION = 'Diabetes'",
        "difficulty": "challenging"
    },
    {
        "question_id": 981,
        "prev_question_id": 8785,
        "db_id": "food_inspection",
        "question": "Which restaurant had more low risk violation in inspections, Tiramisu Kitchen or OMNI S.F. Hotel - 2nd Floor Pantry?",
        "evidence": "Tiramisu Kitchen and OMNI S.F. Hotel - 2nd Floor Pantry are names of the business; more low risk violations refer to MAX(COUNT(risk_category = 'Low Risk'));",
        "SQL": "SELECT CASE WHEN SUM(CASE WHEN T2.name = 'OMNI S.F. Hotel - 2nd Floor Pantry' THEN 1 ELSE 0 END) > SUM(CASE WHEN T2.name = 'Tiramisu Kitchen' THEN 1 ELSE 0 END) THEN 'OMNI S.F. Hotel - 2nd Floor Pantry' ELSE 'Tiramisu Kitchen' END AS result FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id WHERE T1.risk_category = 'Low Risk'",
        "difficulty": "challenging"
    },
    {
        "question_id": 982,
        "prev_question_id": 5566,
        "db_id": "menu",
        "question": "Which menu page has a bigger width, page 1 of \"Zentral Theater Terrace\" or page 1 of \"Young's Hotel\"?",
        "evidence": "if SUM(full_width where page_number = 1 AND menu.name = 'Zentral Theater Terrace') > SUM(full_width where page_number = 1 AND menu.name = 'Young''s Hotel'), it means Zentral Theater Terrace menu page is bigger than Young's Hotel; if SUM(full_width WHERE page_number = 1 AND menu.name = 'Young''s Hotel') < SUM(full_width WHERE page_number = 1 AND menu.name = 'Zentral Theater Terrace'), it means Young's Hotel menu page is bigger than Zentral Theater Terrace;",
        "SQL": "SELECT CASE WHEN SUM(CASE WHEN T1.name = 'Zentral Theater Terrace' THEN T2.full_width ELSE 0 END) - SUM(CASE WHEN T1.name = 'Young''s Hotel' THEN T2.full_width ELSE 0 END) > 0 THEN 'Zentral Theater Terrace' ELSE 'Young''s Hotel' END FROM Menu AS T1 INNER JOIN MenuPage AS T2 ON T1.id = T2.menu_id",
        "difficulty": "challenging"
    },
    {
        "question_id": 983,
        "prev_question_id": 8935,
        "db_id": "human_resources",
        "question": "Which position has a lower minimum salary, Account Representative or Trainee?",
        "evidence": "position of Account Representative refers to positiontitle = 'Account Representative'; position of Trainee refers to positiontitle = 'Trainee'; lower minimum salary refers to MIN(minsalary)",
        "SQL": "SELECT positiontitle FROM position WHERE positiontitle = 'Account Representative' OR positiontitle = 'Trainee' ORDER BY minsalary ASC LIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question_id": 984,
        "prev_question_id": 2922,
        "db_id": "professional_basketball",
        "question": "What is the difference in the average age of players when they are drafted in the ABA vs when they are drafted in the NBA between the years 1970 and 1970?",
        "evidence": "ABA refers to lgID = 'ABA'; NBA refers to lgID = 'NBA'; between the years 1970 and 1970 refers to draftYear between 1970 and 1970; difference = subtract(avg(subtract(1970, year(birthDate)) where lgID = 'ABA'), avg(subtract(1970, year(birthDate)) where lgID = 'NBA'))",
        "SQL": "SELECT CAST(SUM(IIF(T2.lgID = 'ABA', 1970 - strftime('%Y', T3.birthDate), 0)) AS REAL) / COUNT(IIF(T2.lgID = 'ABA', 1, 0)) - CAST(SUM(IIF(T2.lgID = 'NBA', 1970 - strftime('%Y', T3.birthDate), 0)) AS REAL) / COUNT(IIF(T2.lgID = 'NBA', 1, 0)) FROM draft AS T1 INNER JOIN players_teams AS T2 ON T1.tmID = T2.tmID INNER JOIN players AS T3 ON T2.playerID = T3.playerID WHERE T1.draftYear BETWEEN 1970 AND 1970",
        "difficulty": "challenging"
    },
    {
        "question_id": 985,
        "prev_question_id": 1808,
        "db_id": "soccer_2016",
        "question": "Give the name of venue for the game with a win margin of 138 points.",
        "evidence": "name of venue refers to Venue_Name; a win margin of 138 points refers to Win_Margin = 138",
        "SQL": "SELECT T2.Venue_Name FROM `Match` AS T1 INNER JOIN Venue AS T2 ON T1.Venue_Id = T2.Venue_Id WHERE T1.Win_Margin = 138",
        "difficulty": "challenging"
    },
    {
        "question_id": 986,
        "prev_question_id": 1495,
        "db_id": "synthea",
        "question": "How old was Mrs. Laronda Bernier at the time of her most recent medical encounter?",
        "evidence": "how old = SUBTRACT(MIN(encounters.DATE), patients.birthdate); most recent medical encounter refers to MIN(encounters.DATE);",
        "SQL": "SELECT T2.DATE - T1.birthdate AS age FROM patients AS T1 INNER JOIN encounters AS T2 ON T1.patient = T2.PATIENT WHERE T1.first = 'Laronda' AND T1.last = 'Bernier' ORDER BY T2.DATE DESC LIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question_id": 987,
        "prev_question_id": 6072,
        "db_id": "books",
        "question": "What percentage of books written by Hirohiko make up the number of books published by Viz Media?",
        "evidence": "\"Hirohiko Araki\" is the author_name; 'Viz Media' is the publisher_name; percentage = Divide (Count(author_name = 'Hirohiko Araki'), Count(book_id)) * 100",
        "SQL": "SELECT CAST(SUM(CASE WHEN T1.author_name = 'Hirohiko Araki' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM author AS T1 INNER JOIN book_author AS T2 ON T2.author_id = T1.author_id INNER JOIN book AS T3 ON T3.book_id = T2.book_id INNER JOIN publisher AS T4 ON T4.publisher_id = T3.publisher_id WHERE T4.publisher_name = 'VIZ Media'",
        "difficulty": "challenging"
    },
    {
        "question_id": 988,
        "prev_question_id": 1486,
        "db_id": "synthea",
        "question": "What is the difference between average glucose reading for patients in the 20s and 50s?",
        "evidence": "sum(case when t2.DATE-t1.birthdate between 20 and 29 then t2.VALUE else 0 end)/count(case when t2.DATE-t1.birthdate between 20 and 29 then t2.PATIENT else null end)-sum(case when t2.DATE-t1.birthdate between 50 and 59 then t2.VALUE else 0 end)/count(case when t2.DATE-t1.birthdate between 50 and 59 then t2.PATIENT else null end)",
        "SQL": "SELECT SUM(CASE WHEN ROUND((strftime('%J', T2.DATE) - strftime('%J', T1.birthdate)) / 365) BETWEEN 20 AND 30 THEN T2.VALUE ELSE 0 END) / COUNT(CASE WHEN ROUND((strftime('%J', T2.DATE) - strftime('%J', T1.birthdate)) / 365) BETWEEN 20 AND 30 THEN T2.PATIENT END) - SUM(CASE WHEN ROUND((strftime('%J', T2.DATE) - strftime('%J', T1.birthdate)) / 365) BETWEEN 50 AND 60 THEN T2.VALUE ELSE 0 END) / COUNT(CASE WHEN ROUND((strftime('%J', T2.DATE) - strftime('%J', T1.birthdate)) / 365) BETWEEN 50 AND 60 THEN T2.PATIENT END) AS difference FROM patients AS T1 INNER JOIN observations AS T2 ON T1.patient = T2.PATIENT WHERE T2.DESCRIPTION = 'Glucose'",
        "difficulty": "challenging"
    },
    {
        "question_id": 989,
        "prev_question_id": 7927,
        "db_id": "music_platform_2",
        "question": "List all content reviewed for podcast with the best rating under the 'fiction' category. State the podcast title.",
        "evidence": "'fiction' is the category name; best rating refers to rating = 5; content reviewed refers to content",
        "SQL": "SELECT DISTINCT T2.title FROM categories AS T1 INNER JOIN podcasts AS T2 ON T2.podcast_id = T1.podcast_id INNER JOIN reviews AS T3 ON T3.podcast_id = T2.podcast_id WHERE T3.rating = 5 AND T1.category = 'fiction'",
        "difficulty": "challenging"
    },
    {
        "question_id": 990,
        "prev_question_id": 4125,
        "db_id": "public_review_platform",
        "question": "Among the businesses in Tempe, list the attribute of the business with a medium review count.",
        "evidence": "Tempe is a city; high review count refers to review_count = 'High'",
        "SQL": "SELECT DISTINCT T3.attribute_name FROM Business AS T1 INNER JOIN Business_Attributes AS T2 ON T1.business_id = T2.business_id INNER JOIN Attributes AS T3 ON T2.attribute_id = T3.attribute_id WHERE T1.city = 'Tempe' AND T1.review_count = 'Medium'",
        "difficulty": "challenging"
    },
    {
        "question_id": 991,
        "prev_question_id": 2157,
        "db_id": "world_development_indicators",
        "question": "List out the country code and country name of the rich countries using Euro as their currency unit",
        "evidence": "Non-OECD and OECD countries can be regarded as rich countries for those that are part of the High Income Group;",
        "SQL": "SELECT DISTINCT T1.CountryCode, T2.CountryName FROM Country AS T1 INNER JOIN Indicators AS T2 ON T1.CountryCode = T2.CountryCode WHERE T1.CurrencyUnit = 'Euro' AND (T1.IncomeGroup = 'High income: OECD' OR T1.IncomeGroup = 'High income: nonOECD')",
        "difficulty": "challenging"
    },
    {
        "question_id": 992,
        "prev_question_id": 8815,
        "db_id": "food_inspection",
        "question": "Among the establishments with a postal code of 94102, how many establishments have a score of 90 or more in 2015?",
        "evidence": "establishment has the same meaning as business; score of 90 or more refers to score \u2265 90; year(date) = 2015;",
        "SQL": "SELECT COUNT(DISTINCT T2.business_id) FROM violations AS T1 INNER JOIN businesses AS T2 ON T1.business_id = T2.business_id INNER JOIN inspections AS T3 ON T2.business_id = T3.business_id WHERE STRFTIME('%Y', T1.`date`) = '2015' AND T2.postal_code = '94102' AND T3.score > 90",
        "difficulty": "challenging"
    },
    {
        "question_id": 993,
        "prev_question_id": 4621,
        "db_id": "disney",
        "question": "How much more total box office gross did the Walt Disney Company have in revenue in 1998 than in 1997?",
        "evidence": "SUBTRACT(SUM(Year = 1998), SUM(Year = 1997))",
        "SQL": "SELECT SUM(CASE WHEN `Year` = 1998 THEN Total ELSE 0 END) - SUM(CASE WHEN `Year` = 1997 THEN Total ELSE 0 END) FROM revenue",
        "difficulty": "challenging"
    },
    {
        "question_id": 994,
        "prev_question_id": 1429,
        "db_id": "synthea",
        "question": "What is the prevalence rate of the patients' diseases started on 9th May 2014?",
        "evidence": "diseases started on 9th May 2014 refer to DESCRIPTION from conditions where START = '5/9/2014';",
        "SQL": "SELECT T2.\"PREVALENCE RATE\" FROM conditions AS T1 INNER JOIN all_prevalences AS T2 ON lower(T1.DESCRIPTION) = lower(T2.ITEM) WHERE T1.START = '2014-05-09'",
        "difficulty": "challenging"
    },
    {
        "question_id": 995,
        "prev_question_id": 7183,
        "db_id": "works_cycles",
        "question": "Which product ID do not have any work order ID?",
        "evidence": "Do not have any work order ID means WorkOrderID is null",
        "SQL": "SELECT ProductID FROM Product WHERE ProductID NOT IN ( SELECT T1.ProductID FROM Product AS T1 INNER JOIN WorkOrder AS T2 ON T1.ProductID = T2.ProductID )",
        "difficulty": "challenging"
    },
    {
        "question_id": 996,
        "prev_question_id": 1224,
        "db_id": "talkingdata",
        "question": "Which gender owned more of the Galaxy Note 2 device model?",
        "evidence": "gender that owned more = SUBTRACT(IF(SUM(gender = 'M'), SUM(gender = 'F'),'M','F'));",
        "SQL": "SELECT IIF(SUM(IIF(T1.gender = 'M', 1, 0)) - SUM(IIF(T1.gender = 'F', 1, 0)) > 0, 'M', 'F') AS gender FROM gender_age AS T1 INNER JOIN phone_brand_device_model2 AS T2 ON T1.device_id = T2.device_id WHERE T2.device_model = 'Galaxy Note 2'",
        "difficulty": "challenging"
    },
    {
        "question_id": 997,
        "prev_question_id": 5557,
        "db_id": "menu",
        "question": "What is the average number of dishes per menu in the Souper de Luxe menus? Identify what is the name of the dish that appeared the most in all of its menus.",
        "evidence": "average number of dishes per menu = DIVIDE(COUNT(dish_id), COUNT(menu_page_id)); Souper de Luxe is a name of menu; dish that appeared the most in all of its menus refers to MAX(COUNT(dish_id));",
        "SQL": "SELECT COUNT(*), T1.dish_id FROM MenuItem AS T1 INNER JOIN MenuPage AS T2 ON T1.menu_page_id = T2.id INNER JOIN Menu AS T3 ON T2.menu_id = T3.id INNER JOIN Dish AS T4 ON T1.dish_id = T4.id WHERE T3.name = 'Souper de Luxe' GROUP BY T3.id ORDER BY COUNT(T1.dish_id) DESC LIMIT 1",
        "difficulty": "challenging"
    },
    {
        "question_id": 998,
        "prev_question_id": 5851,
        "db_id": "airline",
        "question": "What is the percentage of flights from Los Angeles International airport that were cancelled due to a type C cancellation code?",
        "evidence": "percentage = MULTIPLY(DIVIDE(SUM(CANCELLATION_CODE = 'C'), COUNT(Code)), 100); flights from refers to ORIGIN; Los Angeles International airport refers to Description = 'Los Angeles, CA: Los Angeles International'; cancelled refers to Cancelled = 1; cancelled due to a type C cancellation code refers to CANCELLATION_CODE = 'C';",
        "SQL": "SELECT CAST(SUM(CASE WHEN T2.CANCELLATION_CODE = 'C' THEN 1.0 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM Airports AS T1 INNER JOIN Airlines AS T2 ON T1.Code = T2.ORIGIN WHERE T2.FL_DATE = '2018/8/15' AND T2.CANCELLATION_CODE IS NOT NULL AND T1.Description = 'Los Angeles, CA: Los Angeles International'",
        "difficulty": "challenging"
    },
    {
        "question_id": 999,
        "prev_question_id": 3341,
        "db_id": "video_games",
        "question": "For all the games which were published by Namco Bandai Games, what percentage of them were adventure games?",
        "evidence": "published by Namco Bandai Games refers to publisher_name = 'Namco Bandai Games'; adventure game refers to genre_name = 'Adventure'; percentage = divide(sum(game_id where genre_name = 'Adventure'), count(game_id)) * 100% where publisher_name = 'Namco Bandai Games'",
        "SQL": "SELECT CAST(COUNT(CASE WHEN T4.genre_name = 'Adventure' THEN T1.id ELSE NULL END) AS REAL) * 100 / COUNT(T1.id) FROM game AS T1 INNER JOIN game_publisher AS T2 ON T1.id = T2.game_id INNER JOIN publisher AS T3 ON T2.publisher_id = T3.id INNER JOIN genre AS T4 ON T1.genre_id = T4.id WHERE T3.publisher_name = 'Namco Bandai Games'",
        "difficulty": "challenging"
    }
]